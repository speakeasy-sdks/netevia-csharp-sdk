openapi: 3.0.2
info:
  title: Netevia API
  description: |
    # Netevia Gateway API for Transaction Processing<br>
    Netevia Payment Gateway provides a simple method of processing payment transactions for merchants who want to integrate payment processing with their existing applications. The Netevia Payment Gateway processes credit card, debit card and Electronic Benefits Transfer (EBT) transactions. Transactions are accepted from various industries including: retail, restaurant, mail order/telephone order, lodging, and E-comm.<br>
    This document describes how to write your own application for processing payment transactions or integrate payment processing capabilities into an existing application.<br><br>
      Copyright 2023 by Netevia, INC DBA Netevia Payment Services. Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance with the License. You may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0.html](http://www.apache.org/licenses/LICENSE-2.0.html). Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.<br><br>
    [Netevia Payment Gateway Web Site](https://netevia.com/).<br>
  contact:
    email: cloudgateway@netevia.com
  license:
    name: Licensed under the Apache License Version 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
servers:
  - url: https://{environment}.netevia.com:{port}
    description: Netevia server
    variables:
      environment:
        description: |
          Environment
            * gatewayapidocs - environment
        default: gatewayapidocs
        enum:
          - gatewayapidocs
      port:
        description: |
          Engine Port
            * 11911
        default: '11911'
        enum:
          - '11911'
  - url: https://{environment}.netevia.com:{port}
    description: Cloud PDC service
    variables:
      environment:
        description: |
          Environment
            * gatewayapidocs 
        default: gatewayapidocs
        enum:
          - gatewayapidocs
      port:
        description: |
          Engine Port
            * 11911
        default: '11911'
        enum:
          - '11911'
  - url: https://virtserver.swaggerhub.com/Netevia_INC/Netevia/0.1.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: '========================== NETEVIA API v2 =========================='
    description: |
      This section describes the path structure updates.
  - name: URL model v2
    description: |
      https://domain:port/Payment/{TransType}?GMID={GMID}&TerminalType={TerminalType}&NeedSwipeCard={NeedSwipeCard}
      ___
      This url model is used for Netevia server, set your request url as the pattern will be the best practice.
      <br/>
      <br/>
      Example : https://gatewaylink.netevia.com:11911/Payment/Sale?TerminalType=None&NeedSwipeCard=Y&GMID=1511093302
  - name: NeteviaAPI v2
    description: |-
      Full generic Netevia API explained  
      ___
      This section is for sample requests only!<br> 
      **In Live environment use only <font color="red">/Payment/{TransType}</font> path. Omit the #TransType shown in examples.**<br>
      **All requests must include the following query parameters <font color="red">TerminalType=None&NeedSwipeCard=N</font>**
  - name: Batch API v2
    description: |-
      Initiate a batch query request to Netevia Gateway.
      <br>**All requests must include the following query parameters <font color="red">TerminalType=None&NeedSwipeCard=N</font>**
  - name: PDC / Desktop PDC v2
    description: |-
      Control local PDC through Netevia Server to complete the transaction.
      <br>**All requests for Windows PDC must include the following query parameters <font color="red">TerminalType=WinPDC&NeedSwipeCard=Y</font>**<br>**All PAX requests must include the following query parameters <font color="red">TerminalType=Pax&NeedSwipeCard=Y</font>**<br>**All Dejavoo requests must include the following query parameters <font color="red">TerminalType=Dejavoo&NeedSwipeCard=Y</font>**
  - name: PDC / CloudPDC v2
    description: |-
      Transaction processing using a Payment Device Controler to read card data. <br> 
      Please check the <a href="https://gatewayapidocs.netevia.com/#/Servers">Servers</a> section for the corresponding URL.<br>
      *<span style="color:green">Options:</span>*
      ---
      - <span style="color:red">local Desktop PDC</span>: local PDC instance installed on a Windows PC that has access to the pin pad over USB/Ethernet. 
      - <span style="color:red">CloudPDC</span>: Cloud PDC service that connects to the pin pads over Ethernet.
      ---
      **All requests for Cloud PDC must include the following query parameters <font color="red">TerminalType=Ingenico&NeedSwipeCard=Y</font>**<br>
  - name: '========================== NETEVIA API v1 =========================='
  - name: URL model
    description: |
      https://domain:port/path?GMID={GMID}
      ___
      This url model is used for Netevia server, set your request url as the pattern will be the best practice.
      <br/>
      <br/>
      Example : https://gatewaylink.netevia.com:11911/restApi?GMID=1511093302
  - name: NeteviaAPI
    description: |
      Full generic Netevia API explained  
      ___
      This section is for sample requests only!<br> 
      **In Live environment use only <font color="red">/restApi</font> path. Omit the #TransType shown in examples.**<br>
      (transaction type will be identified only using the "TransType" value from the body)
  - name: Batch API
    description: |
      Initiate a batch query request to Netevia Gateway.
  - name: GooglePay API
    description: |
      Initiate a request with Google Payload to Netevia Gateway.
  - name: QRPay API
    description: |
      QRPay makes payment simple
  - name: PDC / Desktop PDC
    description: |
      Control desktop PDC through Netevia Server to complete the transaction.
  - name: PDC / CloudPDC
    description: |
      Transaction processing using a Payment Device Controler to read card data. <br> 
      Please check the <a href="https://gatewayapidocs.netevia.com/#/Servers">Servers</a> section for the corresponding URL.<br>
      *<span style="color:green">Options:</span>*
      ---
      - <span style="color:red">local Desktop PDC</span>: local PDC instance installed on a Windows PC that has access to the pin pad over USB/Ethernet. 
      - <span style="color:red">CloudPDC</span>: Cloud PDC service that connects to the pin pads over Ethernet.
      ---
  - name: Profit Sharing Business Case
  - name: Business Case
    description: |
      Can be used by:
      - Taxi Companies
      - Hair Studios  

      to easily distribute service compensations to partners using direct ACH payments.

      Request samples and technical details can be seen <a href="https://gatewayapidocs.netevia.com/#/NeteviaAPI/restApiACHCredit">here</a>.  

      <img src="https://gatewayapidocs.netevia.com/images/ProfitSharingModel.png">  
  - name: SubAccounts
    description: |
      <img src="https://gatewayapidocs.netevia.com/images/SubMerchantRegistration_1.0.png">  
  - name: PayOuts
    description: |
      <img src="https://gatewayapidocs.netevia.com/images/Payout_1.0.png">  
x-speakeasy-name-override:
  - operationId: ^rest.*
    methodNameOverride: rest
  - operationId: ^initiate.*
    methodNameOverride: initiate
  - operationId: ^batch.*
    methodNameOverride: batch
  - operationId: ^control.*
    methodNameOverride: control
paths:
  /restApi:
    post:
      tags:
        - NeteviaAPI
      summary: Generic API.
      description: |
        Initiate a transaction request to Netevia Gateway.<br>
        This is the full set of parameters that can be used. All the data is sent in the body of the request.<br>
        Depending on the transaction type only a subset of these fields are mandatory!<sup>1</sup><br>
        <hr>
        <sup>1</sup>please refer to 'Examples' section for sample subsets  
      operationId: restAPI
      x-speakeasy-group: API
      requestBody:
        $ref: '#/components/requestBodies/genericRequest'
      responses:
        '200':
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
        default:
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Sale:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate different Sale transaction requests.
      description: |
        Initiate a <b>Sale</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Sale</b> transaction authorizes a sale purchased. This action decreases the cardholder's limit to buy. It authorizes a transfer of funds from the cardholder's account to merchant's account.
        <hr>
        <sup>1</sup>Use the examples for different 'Sale' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPISale
      x-speakeasy-group: APISale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicSale:
                $ref: '#/components/examples/ex_req_Sale_Basic'
              BasicSaleWithNewGTRC:
                $ref: '#/components/examples/ex_req_Sale_Basic_NewGTRC'
              PurchaseLvl2_Elavon:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl2_Elavon'
              PurchaseLvl2_FDC:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl2_FDC'
              PurchaseLvl2_TSYS:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl2_TSYS'
              PurchaseLvl3_TSYS:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl3_TSYS'
              PurchaseLvl3_Elavon:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl3_Elavon'
              OfflineSale:
                $ref: '#/components/examples/ex_req_Sale_Offline'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicSale:
                  $ref: '#/components/examples/ex_rep_Sale_Basic'
                BasicSaleWithNewGTRC:
                  $ref: '#/components/examples/ex_rep_Sale_Basic_NewGTRC'
                PurchaseLvl2_Elavon:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl2_Elavon'
                PurchaseLvl2_FDC:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl2_FDC'
                PurchaseLvl2_TSYS:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl2_TSYS'
                PurchaseLvl3_TSYS:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl3_TSYS'
                PurchaseLvl3_Elavon:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl3_Elavon'
                OfflineSale:
                  $ref: '#/components/examples/ex_rep_Sale_Offline'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Auth_Finalize:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate different Auth/Finalize transaction requests.
      description: |
        Initiate an <b>Auth/Finalize</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        An <b>Auth</b> transaction places a temporary hold on the customer’s account. Approvals on authorizations are used later to transfer funds by Finalize or AddTip.<br>
        A <b>Finalize</b> transaction is used to change an <b>Auth</b> transaction to a <b>Sale</b> transaction.
        <hr>
        <sup>1</sup>Use the examples for different 'Auth/Finalize' flavours 
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIAuth
      x-speakeasy-group: APIAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicAuth:
                $ref: '#/components/examples/ex_req_Auth_Basic'
              Finalize:
                $ref: '#/components/examples/ex_req_Finalize'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicAuth:
                  $ref: '#/components/examples/ex_rep_Auth_Basic'
                Finalize:
                  $ref: '#/components/examples/ex_rep_Finalize'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Verify_Inquiry:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate Verify/Inquiry transaction requests.
      description: |
        Initiate a <b>Verify/Inquiry</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Inquiry</b> transaction is used to query the balance amount of a card.<br>
        A <b>Verify</b> transaction is used to check if the card is valid.
        <hr>
        <sup>1</sup>Use the examples for different request samples.
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIVerifyInquiry
      x-speakeasy-group: APIVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicVerify:
                $ref: '#/components/examples/ex_req_Verify_Basic'
              BasicInquiry:
                $ref: '#/components/examples/ex_req_Inquiry_Basic'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicVerify:
                  $ref: '#/components/examples/ex_rep_Verify_Basic'
                BasicInquiry:
                  $ref: '#/components/examples/ex_rep_Inquiry_Basic'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#GetTransInfo:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate GetTransInfo transaction requests.
      description: |
        Initiate a <b>GetTransInfo</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>GetTransInfo</b> transaction is used to query the transaction status by GTRC which was returned for the original transaction or by the Invoice Number used in the original request. 
        <hr>
        <sup>1</sup>Use the examples for different 'GetTransInfo' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIGetTransInfo
      x-speakeasy-group: APIGetTransInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicGetTransInfo:
                $ref: '#/components/examples/ex_req_GetTransInfo_Basic'
              GetTransInfo_ByInvoiceNumber:
                $ref: '#/components/examples/ex_req_GetTransInfo_InvoiceNum'
              GetTransInfo_Failed:
                $ref: '#/components/examples/ex_req_GetTransInfo_Failed'
              GetTransInfo_Void:
                $ref: '#/components/examples/ex_req_GetTransInfo_Void'
              NoRecordFoundOfGetTransInfo:
                $ref: '#/components/examples/ex_req_NoRecordFoundOfGetTransInfo_Basic'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicGetTransInfo:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_Basic'
                GetTransInfo_ByInvoiceNumber:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_InvoiceNum'
                GetTransInfo_Failed:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_Failed'
                GetTransInfo_Void:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_Void'
                NoRecordFoundOfGetTransInfo:
                  $ref: '#/components/examples/ex_rep_NoRecordFoundOfGetTransInfo_Basic'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Refund:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate Refund transaction requests.
      description: |
        Initiate a <b>Refund</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Refund</b> transaction is used to authorize a refund to a customer's credit card account.
        <hr>
        <sup>1</sup>Use the examples for different 'Refund' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIRefund
      x-speakeasy-group: APIRefund
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicRefund:
                $ref: '#/components/examples/ex_req_Refund_Basic'
              GTRCRefund:
                $ref: '#/components/examples/ex_req_Refund_GTRC'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicRefund:
                  $ref: '#/components/examples/ex_rep_Refund_Basic'
                GTRCRefund:
                  $ref: '#/components/examples/ex_rep_Refund_GTRC'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Void_Reverse_Cancel:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate Void/Reverse/Cancel transaction requests.
      description: |
        Initiate a <b>Void/Reverse/Cancel</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        <b>Void</b> transaction is used to cancel an authorized transaction before it has been settled.<br>
        <b>Reverse</b> transaction is used to cancel an authorized transaction whether or not it has been settled.<br>
        <b>Cancel</b> transaction is used to cancel an authorized transaction before it has been settled.
        <hr>
        <sup>1</sup>Use the examples for different 'Void/Reverse/Cancel' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIVoid
      x-speakeasy-group: APIVoid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              Void:
                $ref: '#/components/examples/ex_req_Void_Basic'
              Reverse:
                $ref: '#/components/examples/ex_req_Reverse'
              Cancel:
                $ref: '#/components/examples/ex_req_Cancel'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                Void:
                  $ref: '#/components/examples/ex_rep_Void_Basic'
                Reverse:
                  $ref: '#/components/examples/ex_rep_Reverse'
                Cancel:
                  $ref: '#/components/examples/ex_rep_Cancel'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Modify_Adjust_AddTip:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate Modify/Adjust/AddTip transaction requests.
      description: |
        Initiate a <b>Modify/Adjust/AddTip</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        <b>Modify</b> transaction is used to alter the transaction amount of an original transaction, Auth or Sale.<br>
        <b>Adjust</b> transaction is used to alter the transaction amount of an original transaction whether or not it has been settled, Auth or Sale.
        <b>AddTip</b> transaction is used to add an additional amount to an original transaction, Auth or Sale. If the original transaction is Auth, this operation transfers the Auth to Sale.<br>
        <hr>
        <sup>1</sup>Use the examples for different 'Modify' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIModify
      x-speakeasy-group: APIModify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicModify:
                $ref: '#/components/examples/ex_req_Modify_Basic'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicModify:
                  $ref: '#/components/examples/ex_rep_Modify_Basic'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Tokenization:
    post:
      tags:
        - NeteviaAPI
      summary: How to initiate Token based transaction requests.
      description: |
        Initiate <b>Token</b> based transaction requests to Netevia Gateway.<sup>1</sup><br>

        *<span style="color:green">Valid actions:</span>*
        ---
        ___
        - <span style="color:red">CreateCardToken</span>: is used to create card token.
        - <span style="color:red">DeleteCardToken<sup>2</sup></span>: is used to delete exist card token.
        - <span style="color:red">GetCardTokenInfo</span>: is used to retrieve card data(masked) linked to a token.
        - <span style="color:red">UpdateCardTokenInfo</span>: is used to update card token information. It supports update ExpDate, CustomerAddress, CustomerZipCode.
        <hr>
        <sup>1</sup>Use the examples for different 'Token' flavours<br>
        <sup>2</sup>Pay attention that calling this API will delete the provided 'CardToken'
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIToken
      x-speakeasy-group: APIToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              CreateCardToken:
                $ref: '#/components/examples/ex_req_CreateCardToken'
              DeleteCardToken:
                $ref: '#/components/examples/ex_req_DeleteCardToken'
              GetCardTokenInfo:
                $ref: '#/components/examples/ex_req_GetCardTokenInfo'
              UpdateCardTokenInfo:
                $ref: '#/components/examples/ex_req_UpdateCardTokenInfo'
              SaleTokenGen:
                $ref: '#/components/examples/ex_req_SaleTokenGen'
              AuthTokenGen:
                $ref: '#/components/examples/ex_req_AuthTokenGen'
              SaleWithToken:
                $ref: '#/components/examples/ex_req_TokenSale'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                CreateCardToken:
                  $ref: '#/components/examples/ex_rep_CreateCardToken'
                DeleteCardToken:
                  $ref: '#/components/examples/ex_rep_DeleteCardToken'
                GetCardTokenInfo:
                  $ref: '#/components/examples/ex_rep_GetCardTokenInfo'
                UpdateCardTokenInfo:
                  $ref: '#/components/examples/ex_rep_UpdateCardTokenInfo'
                SaleTokenGen:
                  $ref: '#/components/examples/ex_rep_SaleTokenGen'
                AuthTokenGen:
                  $ref: '#/components/examples/ex_rep_AuthTokenGen'
                SaleWithToken:
                  $ref: '#/components/examples/ex_rep_TokenSale'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Batch:
    post:
      tags:
        - NeteviaAPI
      summary: Request batch closing.
      description: |
        Initiate a batch close request to Netevia Gateway

        ***<span style="color:green">Valid actions:</span>***
        ---
        ___
        - <span style="color:red">Batch</span> : is used to close the current open batch and settle it. It is supported by terminal capture only .For host capture, merchant don’t need submit batch request. For GMS ACH Credit batch, please check the examples from ACHCredit section.
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIBatch
      x-speakeasy-group: APIBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              Batch:
                $ref: '#/components/examples/ex_req_Batch'
        required: true
      responses:
        '200':
          description: |
            Succesfull request.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                Batch:
                  $ref: '#/components/examples/ex_rep_Batch'
        default:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /restApi#ACHDebit:
    post:
      tags:
        - NeteviaAPI
      summary: ACH Debit transactions.
      description: |
        Initiate an <b>ACH</b> debit transaction request to Netevia Gateway.<sup>1</sup><br>
        An <b>ACH</b> debit transaction is used to allow customers to pay using checks. The data from the check is digitaly converted and the transaction is posted to the customer bank account.
        <hr>
        <sup>1</sup>Use the examples for different 'ACH Debit' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIACHDebit
      x-speakeasy-group: APIACHDebit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              ACHSale:
                $ref: '#/components/examples/ex_req_ACH_Sale'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                ACHSale:
                  $ref: '#/components/examples/ex_rep_ACH_Sale'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#ACHCredit:
    post:
      tags:
        - NeteviaAPI
      summary: ACH Credit transactions.
      description: |
        Initiate an <b>ACH</b> credit transaction request to Netevia Gateway.<sup>1</sup><br>
        An <b>ACH</b> credit transaction is used to allow merchants to pay using ACH and transfer money to other bank accounts.<br>
        To be more generic and have a similar approach as for Debit ACH, we can also simulate the single PayOut call for a batch of payments with multiple individual credit transactions calls that will be approved offline by us and when batching happens we can generate the PayOut request to GMS as a single API call(batch file upload) as they require. Now GMS processor support.
        <hr>
        <sup>1</sup>Use the examples for different 'ACH Credit' request flavours.
        <div>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIACHCredit
      x-speakeasy-group: APIACHCredit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              ACHRegister:
                $ref: '#/components/examples/ex_req_ACH_Credit_CreateToken'
              ACHCredit:
                $ref: '#/components/examples/ex_req_ACH_Credit_Credit'
              ACHBatch:
                $ref: '#/components/examples/ex_req_ACH_Credit_Batch'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                ACHRegister:
                  $ref: '#/components/examples/ex_rep_ACH_Credit_CreateToken'
                ACHCredit:
                  $ref: '#/components/examples/ex_rep_ACH_Credit_Credit'
                ACHBatch:
                  $ref: '#/components/examples/ex_rep_ACH_Credit_Batch'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restApi#Gift:
    post:
      tags:
        - NeteviaAPI
      summary: Gitf transactions.
      description: |
        Initiate a <b>Gift</b> credit transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Gift</b> transaction is used to allow Account to pay using Gift and transfer money or points to merchnat.<br>
        Available processors: <b>Givex</b>.<br>
        The supported transaction types.<br>
        <ul>
        <li>Activation: this service enables a merchant to activate a Givex certificate for a certain value once it has been sold. </li>
        <li>Inquiry: perform a card balance lookup, BalanceAmt and PointsBalance will be returned in a successful response.</li>
        <li>Auth: reserve some or all of a card's balance for settle at a later time. please use Finalize to settle. After 7 days will be auto closed. </li>
        <li>Sale: decrement all or part of the value of an existing certificate.</li>
        <li>AddValue: add value to an existing certificate.</li>
        <li>AdjustUp: add value to an existing certificate, the action cannot be voided. </li>
        <li>AdjustDown: decrement value to an existing certificate, the action cannot be voided.</li>
        <li>Finalize: complete a pre-auth and redeem the reserved funds.</li>
        <li>Void: to void the original action.</li>
        <li>Refund:  add value in a consumer comp or merchandise credit scenario at the front line. </li>
        <li>PointsIssue: use for issuing points as part of a loyalty program.</li>
        <li>PointsRedemption: use for redeeming points as part of a loyalty program.</li>
        <li>PointsReduction: use for reducing points as part of a loyalty program. the points transaciton reference pre-defined formulas setup on the processor host through the promo code specified. The formula will caculate the amount of points to reduce based on the amount and promo code provided.</li>
        <li>PointsVoid: void point action.</li>
        </ul>
        <hr>
        New fields
        <ul>
        <li>SecurityCode: The securityCode is to validate the PIN value for the existing card</li>
        <li>PromoCode: used for points issuance service, it needs to be set in the Givex system before using it.</li>
        <li>Units: used for points issuance service</li>
        <li>SKUItems: used for SKU base Scenes, Netevia format is SKU#:Amount:QTY example:"SKUItems":"5:500:2,2:275:1"</li>
        </ul>
        <hr>
        <sup>1</sup>Use the examples for different 'Gift' request flavours.
        <div>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIGift
      x-speakeasy-group: APIGift
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              Activation:
                $ref: '#/components/examples/ex_req_Gift_Activation'
              Inquiry:
                $ref: '#/components/examples/ex_req_Gift_Inquiry'
              Auth:
                $ref: '#/components/examples/ex_req_Gift_Auth'
              Sale:
                $ref: '#/components/examples/ex_req_Gift_Sale'
              Refund:
                $ref: '#/components/examples/ex_req_Gift_Refund'
              AddValue:
                $ref: '#/components/examples/ex_req_Gift_AddValue'
              Adjust:
                $ref: '#/components/examples/ex_req_Gift_Adjust'
              Finalize:
                $ref: '#/components/examples/ex_req_Gift_Finalize'
              Void:
                $ref: '#/components/examples/ex_req_Gift_Void'
              PointsIssuance:
                $ref: '#/components/examples/ex_req_Gift_PointsIssue'
              PointsRedemption:
                $ref: '#/components/examples/ex_req_Gift_PointsRedemption'
              PointsReduction:
                $ref: '#/components/examples/ex_req_Gift_PointsReduction'
              PointsVoid:
                $ref: '#/components/examples/ex_req_Gift_PointsVoid'
              Batch:
                $ref: '#/components/examples/ex_req_Gift_CashOut'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                Activation:
                  $ref: '#/components/examples/ex_req_Gift_Activation'
                Inquiry:
                  $ref: '#/components/examples/ex_rep_Gift_Inquiry'
                Auth:
                  $ref: '#/components/examples/ex_rep_Gift_Auth'
                Sale:
                  $ref: '#/components/examples/ex_rep_Gift_Sale'
                Refund:
                  $ref: '#/components/examples/ex_rep_Gift_Refund'
                AddValue:
                  $ref: '#/components/examples/ex_rep_Gift_AddValue'
                Adjust:
                  $ref: '#/components/examples/ex_rep_Gift_Adjust'
                Finalize:
                  $ref: '#/components/examples/ex_rep_Gift_Finalize'
                Void:
                  $ref: '#/components/examples/ex_rep_Gift_Void'
                PointsIssuance:
                  $ref: '#/components/examples/ex_rep_Gift_PointsIssue'
                PointsRedemption:
                  $ref: '#/components/examples/ex_rep_Gift_PointsRedemption'
                PointsReduction:
                  $ref: '#/components/examples/ex_rep_Gift_PointsReduction'
                PointsVoid:
                  $ref: '#/components/examples/ex_rep_Gift_PointsVoid'
                Batch:
                  $ref: '#/components/examples/ex_rep_Gift_CashOut'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /bchApi:
    post:
      tags:
        - Batch API
      summary: Generic batch query API.
      description: |
        Initiate a batch query request to Netevia Gateway.<br>
        This is the full set of parameters that can be used. All the data is sent in the body of the request.<br>
        Depending on the transaction type only a subset of these fields are mandatory!<sup>1</sup><br>
        ***<span style="color:green">Valid actions:</span>***  
        ---  
        ___
        - <span style="color:red">BatchLookup</span> : is used to get the batch ID by batch date.  If the BatchDate is omitted, the open/current batch is returned. Then the batch ID can be used in BatchQuery API to get more info for that batch.  
        - <span style="color:red">BatchQuery</span> : is used to query transaction list by batch ID.  
        <hr>
        <sup>1</sup>please refer to 'samples' section for sample subsets 
      operationId: batchAPI
      x-speakeasy-group: API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BatchLookup:
                $ref: '#/components/examples/ex_req_BatchLookup'
              BatchLookupNoDate:
                $ref: '#/components/examples/ex_req_BatchLookupNoDate'
              BatchQuery:
                $ref: '#/components/examples/ex_req_BatchQuery'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BatchLookup:
                  $ref: '#/components/examples/ex_rep_BatchLookup'
                BatchLookupNoDate:
                  $ref: '#/components/examples/ex_rep_BatchLookupNoDate'
                BatchQuery:
                  $ref: '#/components/examples/ex_rep_BatchQuery'
        default:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /restGPay:
    post:
      tags:
        - GooglePay API
      summary: Google Pay ™.
      operationId: restGPay
      x-speakeasy-group: GPay
      description: |
        It support GPay, the transasction type same with restApi, but the request must container Payload and PayAPI item.<br>
        This is the full set of parameters that can be used. All the data is sent in the body of the request.<br>
        Depending on the transaction type only a subset of these fields are mandatory!<sup>1</sup><br>
        ***<span style="color:green">Valid actions:</span>***  
        <hr>
        <sup>1</sup>please refer to 'samples' section for sample subsets 
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              GPaySale:
                $ref: '#/components/examples/ex_req_Sale_GPay'
        required: true
      responses:
        '200':
          description: |
            Succesfull request.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                GPaySale:
                  $ref: '#/components/examples/ex_rep_Sale_GPay'
        default:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /qrpay:
    post:
      tags:
        - QRPay API
      summary: Integrated QRPay API interface
      operationId: integrateQRPay
      x-speakeasy-group: QRPay
      description: |
        QRPay flow char <br>
        <img src="https://testlink.c9pg.com/images/QRPayImages/Image_QRPay.png"> 
        Notes: FrontEndSystem is a system for initiating transaction orders, because there is no card number, need to scan the QR code to complete the entire transaction.
        <br/>
        <br/>
        The supported transaction types.<br>
        <ul>
        <li>CreateQRCode: Frontend system ask QRPay server create pre-order with transaction info. For this api have the option fields(QRCodeFormat,QRCodeType,NotificationCallback, ExpirtionTime). if the default is not good for you then you need set the value in the request.

        </li>
        <li>GetQRPayInfo: Inquriy order info from QRPay server.</li>
        <li>QRPaySale: WalletApp got user card number then do payments. </li>
        <li>GetQRPayResult : The Api is use to inquiry the pay results, it have a option field NotificationCallback, if frontend system using async call then please set the value, default is empty.</li>
        <li>NotifyQRPayResult: QRPay server ntofiy pay results to the connect terminal. import, please set the NotificationCallback field in the CreateQRCode request </li>
        </ul>
        <hr>
        New fields
        <ul>
        <li>QRCodeFormat: Specify the QR code format text and image(svg), text is the default, if you request image, please set the value to svg now, future will support more image type.</li>
        <li>QRCodeType: Specify the QR code type static and dynamic, dynamic QR code will only used one time, static QR code can used multiple times, dynamic is the default. In order to avoid repetitive creation of static QR codes, we will check the repetition according to the fields of GMID, GTID, MainAmt, TipAmt, InvoiceNumber. If there are duplicate creations, we will return the last valid static QR code.</li>
        </li>
        <li>QRCodeContext: the QR Code context will returned by QRServer. it is a url, the url like this pattern(https://gatewayapidocs.netevia.com/qrpay?GTRC=UUID). if the QRCodeFormat is text then the context is the true url, if the QRCodeFormat is image then the context is the URL of QRCode image with the format that you specified.
        </li>
        <li>
        ExpirtionTime: This field specifies the validity period of the QRCode in minutes. If there is no expiration time, please set it to N, The default is 15 minutes.
        </li>
        <li>
        NotificationCallback: Optional field. If you need to obtain the payment result asynchronously, please set this parameter.
        </li>
        </ul>
        <hr>
        <sup>1</sup>Use the examples for different 'TransType' request flavours.
        <div>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              CreateDynamicQRCode:
                $ref: '#/components/examples/ex_req_CreateQRCode_Dynamic_QRPay'
              CreateStaticQRCode:
                $ref: '#/components/examples/ex_req_CreateQRCode_Static_QRPay'
              CreateDynamicQRCode(Image Format):
                $ref: '#/components/examples/ex_req_CreateQRCode_Dynamic_SVG_QRPay'
              GetQRPayInfo:
                $ref: '#/components/examples/ex_req_GetQRPayInfo_QRPay'
              QRPaySale:
                $ref: '#/components/examples/ex_req_QRPaySale_QRPay'
              GetQRPayResult:
                $ref: '#/components/examples/ex_req_GetQRPayResult_QRPay'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                CreateDynamicQRCode:
                  $ref: '#/components/examples/ex_rep_CreateQRCode_Dynamic_QRPay'
                CreateStaticQRCode:
                  $ref: '#/components/examples/ex_rep_CreateQRCode_Static_QRPay'
                CreateDynamicQRCode(Image Format):
                  $ref: '#/components/examples/ex_rep_CreateQRCode_Dynamic_SVG_QRPay'
                GetQRPayInfo:
                  $ref: '#/components/examples/ex_rep_GetQRPayInfo_QRPay'
                QRPaySale:
                  $ref: '#/components/examples/ex_rep_QRPaySale_QRPay'
                GetQRPayResult:
                  $ref: '#/components/examples/ex_rep_GetQRPayResult_QRPay'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /restPDC:
    post:
      tags:
        - PDC / Desktop PDC
      summary: Control desktop PDC through Netevia Server to complete the transaction.
      operationId: controlDesktopPDC
      x-speakeasy-group: DesktopPDC
      description: |
        All transaction type are support. use this way you can control desktop PDC to read card data.
        Desktop PDC version need above 2.2.7. and you need add the websocket clinet configuration.
      requestBody:
        $ref: '#/components/requestBodies/genericRequest'
      responses:
        '200':
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
        default:
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /QuickChip:
    post:
      tags:
        - PDC / CloudPDC
      summary: Payment Device Controller - card reader device management API.
      operationId: controlCloudPDC
      x-speakeasy-group: CloudPDC
      description: |
        Payment Device Controller API, dedicated
        *<span style="color:green">Valid actions:</span>*
        ---
        ___
        - <span style="color:red">Register</span>: is used to associate Pin pad’s serial number with GMID/GTID. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">Unregister</span>: is used to unlink Pin pad’s serial number from GMID/GTID and de-activate GMID/GTID. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">GetStatus</span>: is used to judge whether Pin pad is available. We can use the API to get the device bound info as well. This transaction only supported in the EMV, QuickChip endpoint
        - <span style="color:red">AskNumberQuestion</span>: is used to get user input on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">AskSelectionQuestion</span>: is used to get user selection results on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">ShowMessage</span>: is used to display message on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">UploadImage</span>: is used to upload image to the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">SetImageList</span>: is used to set up the index of images that need to be displayed on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">UploadMessage</span>: is used to permanently replace built-in message in Pin pad. Even if restart the Pin pad. A reboot is required following UploadMessage. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">ResetMessage</span>: is used to restore built-in message in Pin pad. A reboot is required following ResetMessage. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">RebootDevice</span>: is used to restart Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">UploadFile</span>: is used to upload the configuration files to the pin pad, preparing for entering tip value by pinpad. After uploading successfully, you’d better restart the pinpad. The configuration file named “CUSTPROMPT.PGZ” exists on our server. You can send the request message with your GMID,GTID and upload it.
        - <span style="color:red">PrintReceipt</span>: is used for re-printing receipts. The request must contain the GTRC of the original transaction.
        - <span style="color:red">ESignature</span>: is used for capturing client's electronic signature on request without performing a transaction.
        - <span style="color:red">CardRead</span>: is used for reading Gift cards details.
        <hr>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGenericPDC'
            examples:
              Register:
                $ref: '#/components/examples/ex_req_PDC_Register'
              RegisterWithGTIDGeneration:
                $ref: '#/components/examples/ex_req_PDC_RegisterWithoutGTID'
              RegisterOffline:
                $ref: '#/components/examples/ex_req_PDC_RegisterOffline'
              Unregister:
                $ref: '#/components/examples/ex_req_PDC_Unregister'
              GetStatus:
                $ref: '#/components/examples/ex_req_PDC_GetStatus'
              GetStatusBySN:
                $ref: '#/components/examples/ex_req_PDC_GetStatusBySN'
              AskNumberQuestion:
                $ref: '#/components/examples/ex_req_PDC_AskNumberQuestion'
              AskSelectionQuestion:
                $ref: '#/components/examples/ex_req_PDC_AskSelectionQuestion'
              ShowMessage:
                $ref: '#/components/examples/ex_req_PDC_ShowMessage'
              UploadImage:
                $ref: '#/components/examples/ex_req_PDC_UploadImage'
              SetImageList:
                $ref: '#/components/examples/ex_req_PDC_SetImageList'
              ResetMessage:
                $ref: '#/components/examples/ex_req_PDC_ResetMessage'
              RebootDevice:
                $ref: '#/components/examples/ex_req_PDC_RebootDevice'
              UploadFile:
                $ref: '#/components/examples/ex_req_PDC_UploadFile'
              PrintReceipt:
                $ref: '#/components/examples/ex_req_PDC_PrintReceipt'
              ESignature:
                $ref: '#/components/examples/ex_req_PDC_ESignature'
              ESignatureCustom:
                $ref: '#/components/examples/ex_req_PDC_ESignatureCustom'
              ESignatureTaC:
                $ref: '#/components/examples/ex_req_PDC_ESignatureTaC'
              ESignatureTaCCustom:
                $ref: '#/components/examples/ex_req_PDC_ESignatureTaCCustom'
              CardRead:
                $ref: '#/components/examples/ex_req_PDC_CardRead'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGenericPDC'
              examples:
                Register:
                  $ref: '#/components/examples/ex_rep_PDC_Register'
                RegisterWithGTIDGeneration:
                  $ref: '#/components/examples/ex_rep_PDC_RegisterWithoutGTID'
                RegisterOffline:
                  $ref: '#/components/examples/ex_rep_PDC_RegisterOffline'
                Unregister:
                  $ref: '#/components/examples/ex_rep_PDC_Unregister'
                GetStatus:
                  $ref: '#/components/examples/ex_rep_PDC_GetStatus'
                GetStatusBySN:
                  $ref: '#/components/examples/ex_rep_PDC_GetStatusBySN'
                AskNumberQuestion:
                  $ref: '#/components/examples/ex_rep_PDC_AskNumberQuestion'
                AskSelectionQuestion:
                  $ref: '#/components/examples/ex_rep_PDC_AskSelectionQuestion'
                ShowMessage:
                  $ref: '#/components/examples/ex_rep_PDC_ShowMessage'
                UploadImage:
                  $ref: '#/components/examples/ex_rep_PDC_UploadImage'
                SetImageList:
                  $ref: '#/components/examples/ex_rep_PDC_SetImageList'
                ResetMessage:
                  $ref: '#/components/examples/ex_rep_PDC_ResetMessage'
                RebootDevice:
                  $ref: '#/components/examples/ex_rep_PDC_RebootDevice'
                UploadFile:
                  $ref: '#/components/examples/ex_rep_PDC_UploadFile'
                PrintReceipt:
                  $ref: '#/components/examples/ex_rep_PDC_PrintReceipt'
                ESignature:
                  $ref: '#/components/examples/ex_rep_PDC_ESignature'
                ESignatureCustom:
                  $ref: '#/components/examples/ex_rep_PDC_ESignatureCustom'
                ESignatureTaC:
                  $ref: '#/components/examples/ex_rep_PDC_ESignatureTaC'
                ESignatureTaCCustom:
                  $ref: '#/components/examples/ex_rep_PDC_ESignatureTaCCustom'
                CardRead:
                  $ref: '#/components/examples/ex_rep_PDC_CardRead'
  /QuickChip#Sale:
    post:
      tags:
        - PDC / CloudPDC
      summary: Initiate a transaction request.
      operationId: initiateCloudPDCSale
      x-speakeasy-group: CloudPDCSale
      description: |
        Initiate a transaction request to Netevia Payment Device Controller. For more samples please review the /restApi endpoint as all transaction types can be used also on this endpoint(without card data). 
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGenericPDC'
            examples:
              Sale_CardRead:
                $ref: '#/components/examples/ex_req_PDC_Sale_CardRead'
              Sale_CardReadWithTip:
                $ref: '#/components/examples/ex_req_PDC_Sale_WithTip'
              Sale_CardReadSig:
                $ref: '#/components/examples/ex_req_PDC_Sale_CardReadSig'
              Sale_CardReadToken:
                $ref: '#/components/examples/ex_req_PDC_SaleTokenGen'
              Auth_CardReadToken:
                $ref: '#/components/examples/ex_req_PDC_AuthTokenGen'
              Sale_Token_Tip:
                $ref: '#/components/examples/ex_req_PDC_SaleTokenTip'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGenericPDC'
              examples:
                Sale_CardRead:
                  $ref: '#/components/examples/ex_rep_PDC_Sale_CardRead'
                Sale_CardReadWithTip:
                  $ref: '#/components/examples/ex_rep_PDC_Sale_WithTip'
                Sale_CardReadSig:
                  $ref: '#/components/examples/ex_rep_PDC_Sale_CardReadSig'
                Sale_CardReadToken:
                  $ref: '#/components/examples/ex_rep_PDC_SaleTokenGen'
                Auth_CardReadToken:
                  $ref: '#/components/examples/ex_rep_PDC_AuthTokenGen'
                Sale_Token_Tip:
                  $ref: '#/components/examples/ex_rep_PDC_SaleTokenTip'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /QuickChip#Refund:
    post:
      tags:
        - PDC / CloudPDC
      summary: Initiate a Refund request.
      operationId: initiateCloudPDCRefund
      x-speakeasy-group: CloudPDCRefund
      description: |
        Initiate a Refund request to Netevia Payment Device Controller.   
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGenericPDC'
            examples:
              Refund_CardRead:
                $ref: '#/components/examples/ex_req_PDC_Refund'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGenericPDC'
              examples:
                Refund_CardRead:
                  $ref: '#/components/examples/ex_rep_PDC_Refund'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}:
    post:
      tags:
        - NeteviaAPI v2
      summary: Generic API.
      description: |
        Initiate a transaction request to Netevia Gateway.<br>
        This is the full set of parameters that can be used. All the data is sent in the body of the request.<br>
        Depending on the transaction type only a subset of these fields are mandatory!<sup>1</sup><br>
        <hr>
        <sup>1</sup>please refer to 'Examples' section for sample subsets  
      operationId: restAPIv2
      x-speakeasy-group: APIv2
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        $ref: '#/components/requestBodies/genericRequest'
      responses:
        '200':
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
        default:
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Sale:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate different Sale transaction requests.
      description: |
        Initiate a <b>Sale</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Sale</b> transaction authorizes a sale purchased. This action decreases the cardholder's limit to buy. It authorizes a transfer of funds from the cardholder's account to merchant's account.
        <hr>
        <sup>1</sup>Use the examples for different 'Sale' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Sale
      x-speakeasy-group: APIv2Sale
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicSale:
                $ref: '#/components/examples/ex_req_Sale_Basic'
              BasicSaleWithNewGTRC:
                $ref: '#/components/examples/ex_req_Sale_Basic_NewGTRC'
              PurchaseLvl2_Elavon:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl2_Elavon'
              PurchaseLvl2_FDC:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl2_FDC'
              PurchaseLvl2_TSYS:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl2_TSYS'
              PurchaseLvl3_TSYS:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl3_TSYS'
              PurchaseLvl3_Elavon:
                $ref: '#/components/examples/ex_req_Sale_Commercial_Card_Lvl3_Elavon'
              OfflineSale:
                $ref: '#/components/examples/ex_req_Sale_Offline'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicSale:
                  $ref: '#/components/examples/ex_rep_Sale_Basic'
                BasicSaleWithNewGTRC:
                  $ref: '#/components/examples/ex_rep_Sale_Basic_NewGTRC'
                PurchaseLvl2_Elavon:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl2_Elavon'
                PurchaseLvl2_FDC:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl2_FDC'
                PurchaseLvl2_TSYS:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl2_TSYS'
                PurchaseLvl3_TSYS:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl3_TSYS'
                PurchaseLvl3_Elavon:
                  $ref: '#/components/examples/ex_rep_Sale_Commercial_Card_Lvl3_Elavon'
                OfflineSale:
                  $ref: '#/components/examples/ex_rep_Sale_Offline'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Auth_Finalize:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate different Auth/Finalize transaction requests.
      description: |
        Initiate an <b>Auth/Finalize</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        An <b>Auth</b> transaction places a temporary hold on the customer’s account. Approvals on authorizations are used later to transfer funds by Finalize or AddTip.<br>
        A <b>Finalize</b> transaction is used to change an <b>Auth</b> transaction to a <b>Sale</b> transaction.
        <hr>
        <sup>1</sup>Use the examples for different 'Auth/Finalize' flavours 
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Auth
      x-speakeasy-group: APIv2Auth
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicAuth:
                $ref: '#/components/examples/ex_req_Auth_Basic'
              Finalize:
                $ref: '#/components/examples/ex_req_Finalize'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicAuth:
                  $ref: '#/components/examples/ex_rep_Auth_Basic'
                Finalize:
                  $ref: '#/components/examples/ex_rep_Finalize'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Verify_Inquiry:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate Verify/Inquiry transaction requests.
      description: |
        Initiate a <b>Verify/Inquiry</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Inquiry</b> transaction is used to query the balance amount of a card.<br>
        A <b>Verify</b> transaction is used to check if the card is valid.
        <hr>
        <sup>1</sup>Use the examples for different request samples.
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2VerifyInquiry
      x-speakeasy-group: APIv2Verify
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicVerify:
                $ref: '#/components/examples/ex_req_Verify_Basic'
              BasicInquiry:
                $ref: '#/components/examples/ex_req_Inquiry_Basic'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicVerify:
                  $ref: '#/components/examples/ex_rep_Verify_Basic'
                BasicInquiry:
                  $ref: '#/components/examples/ex_rep_Inquiry_Basic'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#GetTransInfo:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate GetTransInfo transaction requests.
      description: |
        Initiate a <b>GetTransInfo</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>GetTransInfo</b> transaction is used to query the transaction status by GTRC which was returned for the original transaction or by the Invoice Number used in the original request. 
        <hr>
        <sup>1</sup>Use the examples for different 'GetTransInfo' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2GetTransInfo
      x-speakeasy-group: APIv2GetTransInfo
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicGetTransInfo:
                $ref: '#/components/examples/ex_req_GetTransInfo_Basic'
              GetTransInfo_ByInvoiceNumber:
                $ref: '#/components/examples/ex_req_GetTransInfo_InvoiceNum'
              GetTransInfo_Failed:
                $ref: '#/components/examples/ex_req_GetTransInfo_Failed'
              GetTransInfo_Void:
                $ref: '#/components/examples/ex_req_GetTransInfo_Void'
              NoRecordFoundOfGetTransInfo:
                $ref: '#/components/examples/ex_req_NoRecordFoundOfGetTransInfo_Basic'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicGetTransInfo:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_Basic'
                GetTransInfo_ByInvoiceNumber:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_InvoiceNum'
                GetTransInfo_Failed:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_Failed'
                GetTransInfo_Void:
                  $ref: '#/components/examples/ex_rep_GetTransInfo_Void'
                NoRecordFoundOfGetTransInfo:
                  $ref: '#/components/examples/ex_rep_NoRecordFoundOfGetTransInfo_Basic'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Refund:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate Refund transaction requests.
      description: |
        Initiate a <b>Refund</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Refund</b> transaction is used to authorize a refund to a customer's credit card account.
        <hr>
        <sup>1</sup>Use the examples for different 'Refund' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Refund
      x-speakeasy-group: APIv2Refund
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicRefund:
                $ref: '#/components/examples/ex_req_Refund_Basic'
              GTRCRefund:
                $ref: '#/components/examples/ex_req_Refund_GTRC'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicRefund:
                  $ref: '#/components/examples/ex_rep_Refund_Basic'
                GTRCRefund:
                  $ref: '#/components/examples/ex_rep_Refund_GTRC'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Void_Reverse_Cancel:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate Void/Reverse/Cancel transaction requests.
      description: |
        Initiate a <b>Void/Reverse/Cancel</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        <b>Void</b> transaction is used to cancel an authorized transaction before it has been settled.<br>
        <b>Reverse</b> transaction is used to cancel an authorized transaction whether or not it has been settled.<br>
        <b>Cancel</b> transaction is used to cancel an authorized transaction before it has been settled.
        <hr>
        <sup>1</sup>Use the examples for different 'Void/Reverse/Cancel' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Void
      x-speakeasy-group: APIv2Void
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              Void:
                $ref: '#/components/examples/ex_req_Void_Basic'
              Reverse:
                $ref: '#/components/examples/ex_req_Reverse'
              Cancel:
                $ref: '#/components/examples/ex_req_Cancel'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                Void:
                  $ref: '#/components/examples/ex_rep_Void_Basic'
                Reverse:
                  $ref: '#/components/examples/ex_rep_Reverse'
                Cancel:
                  $ref: '#/components/examples/ex_rep_Cancel'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Modify_Adjust_AddTip:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate Modify/Adjust/AddTip transaction requests.
      description: |
        Initiate a <b>Modify/Adjust/AddTip</b> transaction request to Netevia Gateway.<sup>1</sup><br>
        <b>Modify</b> transaction is used to alter the transaction amount of an original transaction, Auth or Sale.<br>
        <b>Adjust</b> transaction is used to alter the transaction amount of an original transaction whether or not it has been settled, Auth or Sale.
        <b>AddTip</b> transaction is used to add an additional amount to an original transaction, Auth or Sale. If the original transaction is Auth, this operation transfers the Auth to Sale.<br>
        <hr>
        <sup>1</sup>Use the examples for different 'Modify' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Modify
      x-speakeasy-group: APIv2Modify
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BasicModify:
                $ref: '#/components/examples/ex_req_Modify_Basic'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BasicModify:
                  $ref: '#/components/examples/ex_rep_Modify_Basic'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Tokenization:
    post:
      tags:
        - NeteviaAPI v2
      summary: How to initiate Token based transaction requests.
      description: |
        Initiate <b>Token</b> based transaction requests to Netevia Gateway.<sup>1</sup><br>

        *<span style="color:green">Valid actions:</span>*
        ---
        ___
        - <span style="color:red">CreateCardToken</span>: is used to create card token.
        - <span style="color:red">DeleteCardToken<sup>2</sup></span>: is used to delete exist card token.
        - <span style="color:red">GetCardTokenInfo</span>: is used to retrieve card data(masked) linked to a token.
        - <span style="color:red">UpdateCardTokenInfo</span>: is used to update card token information. It supports update ExpDate, CustomerAddress, CustomerZipCode.
        <hr>
        <sup>1</sup>Use the examples for different 'Token' flavours<br>
        <sup>2</sup>Pay attention that calling this API will delete the provided 'CardToken'
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Token
      x-speakeasy-group: APIv2Token
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              CreateCardToken:
                $ref: '#/components/examples/ex_req_CreateCardToken'
              DeleteCardToken:
                $ref: '#/components/examples/ex_req_DeleteCardToken'
              GetCardTokenInfo:
                $ref: '#/components/examples/ex_req_GetCardTokenInfo'
              UpdateCardTokenInfo:
                $ref: '#/components/examples/ex_req_UpdateCardTokenInfo'
              SaleTokenGen:
                $ref: '#/components/examples/ex_req_SaleTokenGen'
              AuthTokenGen:
                $ref: '#/components/examples/ex_req_AuthTokenGen'
              SaleWithToken:
                $ref: '#/components/examples/ex_req_TokenSale'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                CreateCardToken:
                  $ref: '#/components/examples/ex_rep_CreateCardToken'
                DeleteCardToken:
                  $ref: '#/components/examples/ex_rep_DeleteCardToken'
                GetCardTokenInfo:
                  $ref: '#/components/examples/ex_rep_GetCardTokenInfo'
                UpdateCardTokenInfo:
                  $ref: '#/components/examples/ex_rep_UpdateCardTokenInfo'
                SaleTokenGen:
                  $ref: '#/components/examples/ex_rep_SaleTokenGen'
                AuthTokenGen:
                  $ref: '#/components/examples/ex_rep_AuthTokenGen'
                SaleWithToken:
                  $ref: '#/components/examples/ex_rep_TokenSale'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Batch:
    post:
      tags:
        - NeteviaAPI v2
      summary: Request batch closing.
      description: |
        Initiate a batch close request to Netevia Gateway

        ***<span style="color:green">Valid actions:</span>***
        ---
        ___
        - <span style="color:red">Batch</span> : is used to close the current open batch and settle it. It is supported by terminal capture only .For host capture, merchant don’t need submit batch request. For GMS ACH Credit batch, please check the examples from ACHCredit section.
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Batch
      x-speakeasy-group: APIv2Batch
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              Batch:
                $ref: '#/components/examples/ex_req_Batch'
        required: true
      responses:
        '200':
          description: |
            Succesfull request.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                Batch:
                  $ref: '#/components/examples/ex_rep_Batch'
        default:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /Payment/{TransType}#ACHDebit:
    post:
      tags:
        - NeteviaAPI v2
      summary: ACH Debit transactions.
      description: |
        Initiate an <b>ACH</b> debit transaction request to Netevia Gateway.<sup>1</sup><br>
        An <b>ACH</b> debit transaction is used to allow customers to pay using checks. The data from the check is digitaly converted and the transaction is posted to the customer bank account.
        <hr>
        <sup>1</sup>Use the examples for different 'ACH Debit' flavours
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      operationId: restAPIv2ACHDebit
      x-speakeasy-group: APIv2ACHDebit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              ACHSale:
                $ref: '#/components/examples/ex_req_ACH_Sale'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                ACHSale:
                  $ref: '#/components/examples/ex_rep_ACH_Sale'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#ACHCredit:
    post:
      tags:
        - NeteviaAPI v2
      summary: ACH Credit transactions.
      description: |
        Initiate an <b>ACH</b> credit transaction request to Netevia Gateway.<sup>1</sup><br>
        An <b>ACH</b> credit transaction is used to allow merchants to pay using ACH and transfer money to other bank accounts.<br>
        To be more generic and have a similar approach as for Debit ACH, we can also simulate the single PayOut call for a batch of payments with multiple individual credit transactions calls that will be approved offline by us and when batching happens we can generate the PayOut request to GMS as a single API call(batch file upload) as they require. Now GMS processor support.
        <hr>
        <sup>1</sup>Use the examples for different 'ACH Credit' request flavours.
        <div>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      operationId: restAPIv2ACHCredit
      x-speakeasy-group: APIv2ACHCredit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              ACHRegister:
                $ref: '#/components/examples/ex_req_ACH_Credit_CreateToken'
              ACHCredit:
                $ref: '#/components/examples/ex_req_ACH_Credit_Credit'
              ACHBatch:
                $ref: '#/components/examples/ex_req_ACH_Credit_Batch'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                ACHRegister:
                  $ref: '#/components/examples/ex_rep_ACH_Credit_CreateToken'
                ACHCredit:
                  $ref: '#/components/examples/ex_rep_ACH_Credit_Credit'
                ACHBatch:
                  $ref: '#/components/examples/ex_rep_ACH_Credit_Batch'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Gift:
    post:
      tags:
        - NeteviaAPI v2
      summary: Gitf transactions.
      description: |
        Initiate a <b>Gift</b> credit transaction request to Netevia Gateway.<sup>1</sup><br>
        A <b>Gift</b> transaction is used to allow Account to pay using Gift and transfer money or points to merchnat.<br>
        Available processors: <b>Givex</b>.<br>
        The supported transaction types.<br>
        <ul>
        <li>Activation: this service enables a merchant to activate a Givex certificate for a certain value once it has been sold. </li>
        <li>Inquiry: perform a card balance lookup, BalanceAmt and PointsBalance will be returned in a successful response.</li>
        <li>Auth: reserve some or all of a card's balance for settle at a later time. please use Finalize to settle. After 7 days will be auto closed. </li>
        <li>Sale: decrement all or part of the value of an existing certificate.</li>
        <li>AddValue: add value to an existing certificate.</li>
        <li>AdjustUp: add value to an existing certificate, the action cannot be voided. </li>
        <li>AdjustDown: decrement value to an existing certificate, the action cannot be voided.</li>
        <li>Finalize: complete a pre-auth and redeem the reserved funds.</li>
        <li>Void: to void the original action.</li>
        <li>Refund:  add value in a consumer comp or merchandise credit scenario at the front line. </li>
        <li>PointsIssue: use for issuing points as part of a loyalty program.</li>
        <li>PointsRedemption: use for redeeming points as part of a loyalty program.</li>
        <li>PointsReduction: use for reducing points as part of a loyalty program. the points transaciton reference pre-defined formulas setup on the processor host through the promo code specified. The formula will caculate the amount of points to reduce based on the amount and promo code provided.</li>
        <li>PointsVoid: void point action.</li>
        </ul>
        <hr>
        New fields
        <ul>
        <li>SecurityCode: The securityCode is to validate the PIN value for the existing card</li>
        <li>PromoCode: used for points issuance service, it needs to be set in the Givex system before using it.</li>
        <li>Units: used for points issuance service</li>
        <li>SKUItems: used for SKU base Scenes, Netevia format is SKU#:Amount:QTY example:"SKUItems":"5:500:2,2:275:1"</li>
        </ul>
        <hr>
        <sup>1</sup>Use the examples for different 'Gift' request flavours.
        <div>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      operationId: restAPIv2Gift
      x-speakeasy-group: APIv2Gift
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              Activation:
                $ref: '#/components/examples/ex_req_Gift_Activation'
              Inquiry:
                $ref: '#/components/examples/ex_req_Gift_Inquiry'
              Auth:
                $ref: '#/components/examples/ex_req_Gift_Auth'
              Sale:
                $ref: '#/components/examples/ex_req_Gift_Sale'
              Refund:
                $ref: '#/components/examples/ex_req_Gift_Refund'
              AddValue:
                $ref: '#/components/examples/ex_req_Gift_AddValue'
              Adjust:
                $ref: '#/components/examples/ex_req_Gift_Adjust'
              Finalize:
                $ref: '#/components/examples/ex_req_Gift_Finalize'
              Void:
                $ref: '#/components/examples/ex_req_Gift_Void'
              PointsIssuance:
                $ref: '#/components/examples/ex_req_Gift_PointsIssue'
              PointsRedemption:
                $ref: '#/components/examples/ex_req_Gift_PointsRedemption'
              PointsReduction:
                $ref: '#/components/examples/ex_req_Gift_PointsReduction'
              PointsVoid:
                $ref: '#/components/examples/ex_req_Gift_PointsVoid'
              Batch:
                $ref: '#/components/examples/ex_req_Gift_CashOut'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                Activation:
                  $ref: '#/components/examples/ex_req_Gift_Activation'
                Inquiry:
                  $ref: '#/components/examples/ex_rep_Gift_Inquiry'
                Auth:
                  $ref: '#/components/examples/ex_rep_Gift_Auth'
                Sale:
                  $ref: '#/components/examples/ex_rep_Gift_Sale'
                Refund:
                  $ref: '#/components/examples/ex_rep_Gift_Refund'
                AddValue:
                  $ref: '#/components/examples/ex_rep_Gift_AddValue'
                Adjust:
                  $ref: '#/components/examples/ex_rep_Gift_Adjust'
                Finalize:
                  $ref: '#/components/examples/ex_rep_Gift_Finalize'
                Void:
                  $ref: '#/components/examples/ex_rep_Gift_Void'
                PointsIssuance:
                  $ref: '#/components/examples/ex_rep_Gift_PointsIssue'
                PointsRedemption:
                  $ref: '#/components/examples/ex_rep_Gift_PointsRedemption'
                PointsReduction:
                  $ref: '#/components/examples/ex_rep_Gift_PointsReduction'
                PointsVoid:
                  $ref: '#/components/examples/ex_rep_Gift_PointsVoid'
                Batch:
                  $ref: '#/components/examples/ex_rep_Gift_CashOut'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#BatchLookup_BatchQuery:
    post:
      tags:
        - Batch API v2
      summary: Generic batch query API.
      description: |
        Initiate a batch query request to Netevia Gateway.<br>
        This is the full set of parameters that can be used. All the data is sent in the body of the request.<br>
        Depending on the transaction type only a subset of these fields are mandatory!<sup>1</sup><br>
        ***<span style="color:green">Valid actions:</span>***  
        ---  
        ___
        - <span style="color:red">BatchLookup</span> : is used to get the batch ID by batch date.  If the BatchDate is omitted, the open/current batch is returned. Then the batch ID can be used in BatchQuery API to get more info for that batch.  
        - <span style="color:red">BatchQuery</span> : is used to query transaction list by batch ID.  
        <hr>
        <sup>1</sup>please refer to 'samples' section for sample subsets 
      operationId: batchAPIv2
      x-speakeasy-group: APIv2
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGeneric'
            examples:
              BatchLookup:
                $ref: '#/components/examples/ex_req_BatchLookup'
              BatchLookupNoDate:
                $ref: '#/components/examples/ex_req_BatchLookupNoDate'
              BatchQuery:
                $ref: '#/components/examples/ex_req_BatchQuery'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
              examples:
                BatchLookup:
                  $ref: '#/components/examples/ex_rep_BatchLookup'
                BatchLookupNoDate:
                  $ref: '#/components/examples/ex_rep_BatchLookupNoDate'
                BatchQuery:
                  $ref: '#/components/examples/ex_rep_BatchQuery'
        default:
          description: Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /Payment/{TransType}#WinPDC_PAX:
    post:
      tags:
        - PDC / Desktop PDC v2
      summary: Control desktop PDC through Netevia Server to complete the transaction.
      operationId: controlDesktopPDCv2
      x-speakeasy-group: DesktopPDCv2
      description: |
        All transaction type are support. use this way you can control desktop PDC to read card data.
        Desktop PDC version need above 2.2.7. and you need add the websocket clinet configuration.
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        $ref: '#/components/requestBodies/genericRequest'
      responses:
        '200':
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
        default:
          description: Succesfull transaction
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Ingenico:
    post:
      tags:
        - PDC / CloudPDC v2
      summary: Cloud Payment Device Controller - card reader device management API.
      operationId: controlCloudPDCv2Ingenico
      x-speakeasy-group: CloudPDCv2Ingenico
      description: |
        Payment Device Controller API, dedicated
        *<span style="color:green">Valid actions:</span>*
        ---
        ___
        - <span style="color:red">Register</span>: is used to associate Pin pad’s serial number with GMID/GTID. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">Unregister</span>: is used to unlink Pin pad’s serial number from GMID/GTID and de-activate GMID/GTID. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">GetStatus</span>: is used to judge whether Pin pad is available. We can use the API to get the device bound info as well. This transaction only supported in the EMV, QuickChip endpoint
        - <span style="color:red">AskNumberQuestion</span>: is used to get user input on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">AskSelectionQuestion</span>: is used to get user selection results on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">ShowMessage</span>: is used to display message on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">UploadImage</span>: is used to upload image to the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">SetImageList</span>: is used to set up the index of images that need to be displayed on the Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">UploadMessage</span>: is used to permanently replace built-in message in Pin pad. Even if restart the Pin pad. A reboot is required following UploadMessage. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">ResetMessage</span>: is used to restore built-in message in Pin pad. A reboot is required following ResetMessage. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">RebootDevice</span>: is used to restart Pin pad. This transaction only supported in the EMV, QuickChip endpoint.
        - <span style="color:red">UploadFile</span>: is used to upload the configuration files to the pin pad, preparing for entering tip value by pinpad. After uploading successfully, you’d better restart the pinpad. The configuration file named “CUSTPROMPT.PGZ” exists on our server. You can send the request message with your GMID,GTID and upload it.
        - <span style="color:red">PrintReceipt</span>: is used for re-printing receipts. The request must contain the GTRC of the original transaction.
        - <span style="color:red">ESignature</span>: is used for capturing client's electronic signature on request without performing a transaction.
        - <span style="color:red">CardRead</span>: is used for reading Gift cards details.
        <hr>
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGenericPDC'
            examples:
              Register:
                $ref: '#/components/examples/ex_req_PDC_Register'
              RegisterWithGTIDGeneration:
                $ref: '#/components/examples/ex_req_PDC_RegisterWithoutGTID'
              RegisterOffline:
                $ref: '#/components/examples/ex_req_PDC_RegisterOffline'
              Unregister:
                $ref: '#/components/examples/ex_req_PDC_Unregister'
              GetStatus:
                $ref: '#/components/examples/ex_req_PDC_GetStatus'
              GetStatusBySN:
                $ref: '#/components/examples/ex_req_PDC_GetStatusBySN'
              AskNumberQuestion:
                $ref: '#/components/examples/ex_req_PDC_AskNumberQuestion'
              AskSelectionQuestion:
                $ref: '#/components/examples/ex_req_PDC_AskSelectionQuestion'
              ShowMessage:
                $ref: '#/components/examples/ex_req_PDC_ShowMessage'
              UploadImage:
                $ref: '#/components/examples/ex_req_PDC_UploadImage'
              SetImageList:
                $ref: '#/components/examples/ex_req_PDC_SetImageList'
              ResetMessage:
                $ref: '#/components/examples/ex_req_PDC_ResetMessage'
              RebootDevice:
                $ref: '#/components/examples/ex_req_PDC_RebootDevice'
              UploadFile:
                $ref: '#/components/examples/ex_req_PDC_UploadFile'
              PrintReceipt:
                $ref: '#/components/examples/ex_req_PDC_PrintReceipt'
              ESignature:
                $ref: '#/components/examples/ex_req_PDC_ESignature'
              ESignatureCustom:
                $ref: '#/components/examples/ex_req_PDC_ESignatureCustom'
              ESignatureTaC:
                $ref: '#/components/examples/ex_req_PDC_ESignatureTaC'
              ESignatureTaCCustom:
                $ref: '#/components/examples/ex_req_PDC_ESignatureTaCCustom'
              CardRead:
                $ref: '#/components/examples/ex_req_PDC_CardRead'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGenericPDC'
              examples:
                Register:
                  $ref: '#/components/examples/ex_rep_PDC_Register'
                RegisterWithGTIDGeneration:
                  $ref: '#/components/examples/ex_rep_PDC_RegisterWithoutGTID'
                RegisterOffline:
                  $ref: '#/components/examples/ex_rep_PDC_RegisterOffline'
                Unregister:
                  $ref: '#/components/examples/ex_rep_PDC_Unregister'
                GetStatus:
                  $ref: '#/components/examples/ex_rep_PDC_GetStatus'
                GetStatusBySN:
                  $ref: '#/components/examples/ex_rep_PDC_GetStatusBySN'
                AskNumberQuestion:
                  $ref: '#/components/examples/ex_rep_PDC_AskNumberQuestion'
                AskSelectionQuestion:
                  $ref: '#/components/examples/ex_rep_PDC_AskSelectionQuestion'
                ShowMessage:
                  $ref: '#/components/examples/ex_rep_PDC_ShowMessage'
                UploadImage:
                  $ref: '#/components/examples/ex_rep_PDC_UploadImage'
                SetImageList:
                  $ref: '#/components/examples/ex_rep_PDC_SetImageList'
                ResetMessage:
                  $ref: '#/components/examples/ex_rep_PDC_ResetMessage'
                RebootDevice:
                  $ref: '#/components/examples/ex_rep_PDC_RebootDevice'
                UploadFile:
                  $ref: '#/components/examples/ex_rep_PDC_UploadFile'
                PrintReceipt:
                  $ref: '#/components/examples/ex_rep_PDC_PrintReceipt'
                ESignature:
                  $ref: '#/components/examples/ex_rep_PDC_ESignature'
                ESignatureCustom:
                  $ref: '#/components/examples/ex_rep_PDC_ESignatureCustom'
                ESignatureTaC:
                  $ref: '#/components/examples/ex_rep_PDC_ESignatureTaC'
                ESignatureTaCCustom:
                  $ref: '#/components/examples/ex_rep_PDC_ESignatureTaCCustom'
                CardRead:
                  $ref: '#/components/examples/ex_rep_PDC_CardRead'
  /Payment/{TransType}#Ingenico_Sale:
    post:
      tags:
        - PDC / CloudPDC v2
      summary: Initiate a transaction request.
      operationId: initiateCloudPDCv2Sale
      x-speakeasy-group: CloudPDCv2Sale
      description: |
        Initiate a transaction request to Netevia Payment Device Controller. For more samples please review the /restApi endpoint as all transaction types can be used also on this endpoint(without card data). 
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGenericPDC'
            examples:
              Sale_CardRead:
                $ref: '#/components/examples/ex_req_PDC_Sale_CardRead'
              Sale_CardReadWithTip:
                $ref: '#/components/examples/ex_req_PDC_Sale_WithTip'
              Sale_CardReadSig:
                $ref: '#/components/examples/ex_req_PDC_Sale_CardReadSig'
              Sale_CardReadToken:
                $ref: '#/components/examples/ex_req_PDC_SaleTokenGen'
              Auth_CardReadToken:
                $ref: '#/components/examples/ex_req_PDC_AuthTokenGen'
              Sale_Token_Tip:
                $ref: '#/components/examples/ex_req_PDC_SaleTokenTip'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGenericPDC'
              examples:
                Sale_CardRead:
                  $ref: '#/components/examples/ex_rep_PDC_Sale_CardRead'
                Sale_CardReadWithTip:
                  $ref: '#/components/examples/ex_rep_PDC_Sale_WithTip'
                Sale_CardReadSig:
                  $ref: '#/components/examples/ex_rep_PDC_Sale_CardReadSig'
                Sale_CardReadToken:
                  $ref: '#/components/examples/ex_rep_PDC_SaleTokenGen'
                Auth_CardReadToken:
                  $ref: '#/components/examples/ex_rep_PDC_AuthTokenGen'
                Sale_Token_Tip:
                  $ref: '#/components/examples/ex_rep_PDC_SaleTokenTip'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
  /Payment/{TransType}#Ingenico_Refund:
    post:
      tags:
        - PDC / CloudPDC v2
      summary: Initiate a Refund request.
      operationId: initiateCloudPDCv2Refund
      x-speakeasy-group: CloudPDCv2Refund
      description: |
        Initiate a Refund request to Netevia Payment Device Controller.   
        <br><br><span style="color:red">*NOTE: If you don't see Request Schema, you are in "Try it out" mode and you need to press "Cancel"!</span>
      parameters:
        - $ref: '#/components/parameters/TransType'
        - $ref: '#/components/parameters/TerminalType'
        - $ref: '#/components/parameters/NeedSwipeCard'
        - $ref: '#/components/parameters/GMID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGenericPDC'
            examples:
              Refund_CardRead:
                $ref: '#/components/examples/ex_req_PDC_Refund'
        required: true
      responses:
        '200':
          description: |
            Succesfull transaction.
            <br><span style="color:red">*NOTE: this is an abbreviated version of the response. To see all the typical fields, check Response Schema or use "Try it out" functionality!</span>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGenericPDC'
              examples:
                Refund_CardRead:
                  $ref: '#/components/examples/ex_rep_PDC_Refund'
        default:
          description: Succesfull transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGeneric'
components:
  parameters:
    TransType:
      in: path
      name: TransType
      required: true
      schema:
        type: string
        enum:
          - Auth
          - Sale
          - AddTip
          - Finalize
          - Modify
          - Refund
          - Batch
          - BatchQuery
          - SelBatch
          - BatchLookUp
          - Register
          - Unregister
          - GetStatus
          - Ping
          - GetTransInfo
          - DeleteCardToken
          - GetCardToken
          - UpdateCardTokenInfo
          - CreateCardToken
          - GetSessionKey
          - ReAuth
    TerminalType:
      in: query
      name: TerminalType
      required: false
      schema:
        type: string
        enum:
          - None
          - Ingenico
          - WinPDC
          - Pax
          - Dejavoo
          - M6Plus
        default: None
      description: ''
    NeedSwipeCard:
      in: query
      name: NeedSwipeCard
      required: false
      schema:
        type: string
        enum:
          - 'Y'
          - 'N'
        default: 'N'
    GMID:
      in: query
      name: GMID
      required: true
      schema:
        type: string
        description: GMID value of the account.
  schemas:
    error:
      type: string
    grp_configure:
      required:
        - GMID
        - GMPW
        - GTID
      type: object
      properties:
        GMID:
          type: string
          description: |
            Merchant identifier Assigned by<br>
            Netevia Payment Systems Administrator during registration
          example: '1110222484'
        GTID:
          type: string
          description: |
            Merchant's terminal identifier<br>
            Assigned by Netevia Payment Systems Administrator during registration.<br>
            This field is Optional when doing Register.
          example: GT1120095178
        GMPW:
          type: string
          description: |
            Merchant password<br>
            Only verified for Refund transactions.<br>
            It can be any value for other transactions.
          example: GMPW3010300378
        AllowsPartialAuth:
          type: string
          description: |
            Indicates whether partial authorization is allowed.
          example: 'N'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
      description: |
        Note: This subgroup is used for all transactions.
    grp_amount:
      type: object
      properties:
        MainAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Primary charge amount.<br>
            Total digits = 12
          format: int64
          example: 10000
        TipAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Tip amount that is in addition to the main amount.<br>
            Total digits = 12
          format: int64
          example: 10000
        IncTaxAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Tax amount that is included in the main amount.<br>
            Total digits = 12
          format: int64
          example: 10000
        IncCashBackAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Cash back amount that is included in the main amount.<br>
            Total digits = 12
          format: int64
          example: 10000
        TaxIndicator:
          type: string
          description: |
            Additional Information about TaxAmt.
          example: Ntprvd
          default: Ntprvd
          enum:
            - Ntprvd
            - NonTax
            - Prvded
      description: |
        Note: This subgroup is only used for Auth/Sale/Refund/Addtip transactions.
    grp_amount_extra_PDC:
      type: object
      properties:
        ServiceAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Service charge amount will be used as the reference amount when calculating the percentage tip amount. In case it is missing, the MainAmt will be used as the ServiceAmt. This is usefull for use cases when the charged amount is less than the actual service amount(for cases when discounts are applied).<br>
            Total digits = 12
          format: int64
        RequestTipAmount:
          type: string
          description: |
            The feature to support cardholders choosing a predefined percentage/value or manual entering tip amount on the device. If the flag set to 'Y' then this feature is enabled.
          example: 'Y'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        TipAmountRate:
          type: string
          description: |
            The "TipAmountRate" is used to set 3 predefined tip values. The specific meaning of the data is determined by the field TipAmountPromptFormat.<br>
            If TipAmountPromptFormat is 'A' then the tip will be $0.10 $0.20 $0.30 on the device screen.<br>
            If TipAmountPromptFormat is 'P' then the tip will be calculated based on the service amount(1000, $10.00), device will display options like 10% 20% 30% and the real tip amount is $1.00 $2.00 $3.00.<br>
             If TipAmountPromptFormat is 'D' then the calculated percentage tip amount will show on the device.
          example: 10,20,30
        TipAmountPromptFormat:
          type: string
          description: |
            This flag will specify the TipAmountRate format: a percentage, the calculated percentage amount or a fixed amount. <br>
            Valid values:<br>
            <ul>
              <li>'A': TipAmountRate contains fixed tip amounts</li>
              <li>'P': TipAmountRate contains percentages and the tip is the percentage of the service amount or the main amount. The pinpad will display the percentages to choose from.</li>
              <li>'D': TipAmountRate contains percentages and the tip is the percentage of the service amount or the main amount. The pinpad will display the calculated amount percentages to choose from.</li>
            </ul>
          example: P
          default: P
          enum:
            - P
            - D
            - A
      description: |
        Note: This subgroup contains fields specific to the PDC transactions.
    grp_action:
      required:
        - TransType
      type: object
      properties:
        TransType:
          type: string
          description: |
            Transaction Type.
          example: Sale
          enum:
            - Auth
            - Sale
            - Credit
            - Finalize
            - Addtip
            - Void
            - Reverse
            - Refund
            - Inquiry
            - Modify
            - Batch
            - BatchLookup
            - BatchQuery
            - UpdateCardTokenInfo
            - DeleteCardToken
            - CreateCardToken
            - GetTransInfo
            - Verify
            - Register
            - Unregister
            - GetStatus
            - AskNumberQuestion
            - AskSelectionQuestion
            - ShowMessage
            - UploadImage
            - SetImageList
            - UploadMessage
            - ResetMessage
            - RebootDevice
            - UploadFile
            - PrintReceipt
            - ESignature
            - CardRead
        IsOffline:
          type: string
          description: |
            Indicates whether is an offline transaction.
          example: 'N'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        CreditOnFailure:
          type: string
          description: |
            Indicates whether do force void transaction.
          example: 'N'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        VerifyCard:
          type: string
          description: |
            Indicates whether verify card when doing CreateCardToken.
          example: 'N'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        CheckDuplicate:
          type: string
          description: |
            Indicates whether to check for duplicate transactions.<br>
            Duplicate check interval: 1 minute.<br>
            Note: you need to supply this field in all the request to enable this feature.
          example: 'N'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        IgnoreAVSResult:
          type: string
          description: Ignore AVS result from processor, default value is Y, if need to check AVS result please send it in request with N. the feature only works in TSYS and Elavon. Elavon if host return the code (A,B,C,E,N,R,W,Z) and doesnt' ignore avs result code then Netevia will reject the verify request. TSYS if host return N and doesn't ignore avs result then Netevia will reject the Verify, Auth, Sale request.
          example: 'Y'
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
        IgnoreCVVResult:
          type: string
          description: Ignore CVV result from processor, default value is Y, if need to check CVV result please send it in request with N. the feature only works in TSYS and Elavon. Elavon, if doesn't Ignore CVV and host return N then Netevia will reject the Verify request. TSYS, if doesn't ignore cvv and host return N then Netevia will reject the Verify/Auth/Sale request.
          example: 'Y'
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
        IgnoreVoidResult:
          type: string
          description: Ignore Void result from processor. if processor return fail, then we force it to success. Default value is Y,
          example: 'Y'
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
      description: |
        NOTE: This subgroup is used for all transactions.
    grp_action_extra_PDC:
      type: object
      properties:
        NeedSwipeCard:
          type: string
          description: |
            This field is used when sending a request to a PDC. Indicates whether the card data should be retrieved using the pinpad("Y") or it is not needed(Void/Refund) or already provided in the request("N"). This works for all entry modes Manual/Swipe/EMV/Contactless.
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
      description: |
        PDC specific fields.
    grp_extendInfo:
      type: object
      properties:
        InvoiceNum:
          type: string
          description: |
            Invoice Number.
          example: Inv123456
        OrderNum:
          type: string
          description: |
            Order Number.<br>
            Only used for purchase cards.
          example: Ord12345
        AuthCode:
          type: string
          description: |
            Offline Auth Code.<br>
            UsedOnly used for offline transactions.
          example: OK1234
        VoucherNum:
          type: string
          description: |
            Voucher serial number.<br>
            Only used for offline EBT transactions.
          example: Voucher12345
        AdditionalInfo:
          type: string
          description: |
            Reserved for future use. Data is delimited by a F(0x1c) and is formatted as follows:<br>
            Key=Value0x1cKey=Value0x1cKey=Value…
          example: Key1=Val10x1CKey2=Val2...
      description: |
        Request Extend Info. Group
    grp_trace:
      type: object
      properties:
        SourceTraceNum:
          type: string
          description: |
            Source Trace number.<br>
            Provided by the merchant and it uniquely identifies a transaction.
          example: '123456'
        GTRC:
          type: string
          description: |
            Gateway trace<br>
            It is a unique trace number assigned to a transaction by Netevia payment and returned in the response message. The POS must submit it back for Void/Addtip/Finalize etc. based on a previous transactions.
          example: e134bff9203f44e8974a11b2aef7665d
        NewGTRC:
          type: string
          description: |
            Gateway trace<br>
            It is a Unique trace number like GTRC, but the difference is that the client can include it in Auth/Sale trans request, then we can track the transaction lifecycle by it.<br>
            Please generate this value in UUID format.
          example: fe31047eca6b47f2a07ead29be5a7672
      description: |
        Trace Group
    grp_cardInfo:
      type: object
      properties:
        Medium:
          type: string
          description: |
            Card Type. Must be present when card info is from POS.
          example: Credit
          enum:
            - Credit
            - Debit
            - EBTFood
            - EBTCash
            - Prepaid
            - Gift
            - ElectronickCheck
        AccountNum:
          maxLength: 22
          type: string
          description: |
            Card number. Maximum length = 22. Must be present when card info is from POS and encrypted.<br>
            If this field and ExpDate are set in the request, it does not need to provide Track1, Track2, CardToken. And EntryMode needs to be set to Manual.
          example: '5415244444444444'
        ExpDate:
          type: string
          description: |
            Card expiration Date MMYY. Must be present when card info is from POS and encrypted.
          example: '1225'
        PayAPI:
          type: string
          description: indicate the pay protocol.
          example: GooglePay
          enum:
            - GooglePay
            - ApplePay
        Payload:
          type: string
          description: It is GPay info and containers the encryption card data.
          example: '{"signature":"MEMCIBD7zOfOintAG/gjg6XenH+x8uM//2b3L/i+GKlhOMtxAh89lRkECojoDHc/Ohis4hvivc2EtCNf/k69MWMCemBN","intermediateSigningKey":{"signedKey":"{\"keyValue\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEq1r61W296dtgCNIJYS9KTl5bp8lMPjz7SDEjE5Zk27iiuane/oEZbOQYlF8YurHvitrLyFN9ROU8p+9Rts7feg\\u003d\\u003d\",\"keyExpiration\":\"1603261713365\"}","signatures":["MEUCIQDnvLuziBPYWDmMuUR493lDMYoZYccEPi7sCYHC+EILkgIgacX5hiHoxxD7HRfm9xG9lYNHAoV5i2OaFpggArB0uwQ\u003d"]},"protocolVersion":"ECv2","signedMessage":"{\"encryptedMessage\":\"+Oc0tH5ZWHTyrUlxBOimgM1zyIeOEKJAf300KNBlTUUUU1RzswJMhXa6Ehc9haOTnfYdqcQRx+1f7ztnqbHujPfITzRCjTA8DPMHfYe/Z/MhPPZr9MIHubFjizenRU/tBjm6f/WuAjMj+CoDxDUwR7cD+ZMwAvYzyY5A3hBG/iJrJfqvYcF2g9GNZFwYI4MsgrYh8SM4tViEVr//B4AxSGNiCp8Utgyy7qilRWcViEzl/t2cqXxK9p4lG7xkN+nC4qOcNTwtQASmX3WqUA2nt3yb7J9t84iAKYIFvWxdiHLonxs89bfanpgLW9ZG4Dt2YycGZo3+wVbCFDzQ8MlzM+ibTXifaTYyWWIEEZFrm3nkVQxsu337VGUdtA60uM8GxawG7zARWeoE+6wC+E2G6kUyXYybm5IBDXQMYWprjhWLyAB1D+bjXzldcG8rUvbk2zHzzg4BEf36kzHwqmCWiuxKKtzGTZce5XQqF1Jd8p9c/Gc\\u003d\",\"ephemeralPublicKey\":\"BGJ+y+S+rQ+6IywwstXdh2nzHwP3LKcvI58XAN3LW3PoSNlWuNluRJ6cJ3dn7XP6dl+m2y8SuzXFxelPspg8moY\\u003d\",\"tag\":\"v8r09doA5qKuA8SeLuQVgKCsJxdorUgoj/Rmh0/5MLk\\u003d\"}"}'
        EntryMode:
          type: string
          description: |
            Must be present when card data is provided by the POS.
          enum:
            - Swipe
            - Manual
            - Proximity
            - ChipContact
            - ChipContactless
            - EMVFallback2Swip
        CVVNum:
          maxLength: 6
          type: string
          description: |
            Card verification code on the card.
          example: '123'
        Track1:
          type: string
          description: |
            Full magnetic Track I data read from the card by a card reader.<br>
             If this field is set in the request, it does not need to provide AccountNum, ExpDate, Track2, CardToken. And EntryMode needs to be set to Swipe.
          example: B5413330089020029^MTIP02^2512629807900000000000000000
        Track2:
          type: string
          description: |
            Full magnetic Track II data read from the card by a card reader.<br>
            If this field is set in the request, it does not need to provide AccountNum, ExpDate, Track1, CardToken. And EntryMode needs to be set to Swipe.
          example: 5413330000000000=2512101123456789
        CardPresent:
          type: string
          description: |
            Indicates whether the card is present.
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
        CommercialCard:
          type: string
          description: |
            Indicates whether the card is Commercial.
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
        CardToken:
          maxLength: 32
          minLength: 32
          type: string
          description: |
            It can replace AccountNum and ExpDate. Only support in json request.<br>
            If this field is set in the request, it does not need to provide AccountNum, ExpDate, Track1, Track2. And EntryMode needs to be set to Manual.
          example: 18c9c75f28a04538939112fb109702fb
        RequestCardToken:
          type: string
          description: |
            Indicates whether server should return CardToken.<br>
            Only support in json request.
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        CustomerName:
          type: string
          description: Cardholder's name.
          example: John Doe
        CustomerZipCode:
          type: string
          description: Cardholder's billing zip code.
          example: '12345'
        CustomerAddress:
          type: string
          description: Cardholder's billing address.
          example: Test Street 4
        CustomerCity:
          type: string
          description: Cardholder's billing city.
          example: Miami
        CustomerState:
          type: string
          description: Cardholder's billing State.
          example: Florida
        CustomerNum:
          type: string
          description: |
            Cardholder's number.  
            Purchase Level2/3 Transaction: This value is used to identify the customer number for purchasing card transactions.
          example: C91101
      description: |
        NOTE: This subgroup is only used when card info is from POS, not PDC.<br>
              When sent to a PDC, NeedSwipeCard must be “N”.
    grp_ACH:
      type: object
      properties:
        EleCheckRoutingNumber:
          type: string
          description: ACH routing number.
          example: '102000021'
        EleCheckAccountNumber:
          type: string
          description: ACH account number.
          example: '125401754499'
        EleCheckServiceProvider:
          type: string
          description: ACH Debit transaction type.
          example: ElecCheckWEB
          enum:
            - ElecCheckWEB
            - ElecCheckTEL
            - ElecCheckPPD
            - ElecCheckCCD
            - ElecCheckPOP
            - ElecCheckARC
            - ElecCheckBOC
            - ElecCheckECA
            - ElecCheckICA
            - ElecCheckCBP
            - ElecCheckCertegy
        EleCheckTransactionType:
          type: string
          description: ACH Debit transaction type.
          example: EleCheckConversion
          enum:
            - EleCheckConversion
            - EleCheckVerification
            - EleCheckGuarantee
        AccountType:
          type: string
          description: ACH Account type.
          example: savings
          enum:
            - savings
            - checking
        TotalCreditAmt:
          type: string
          description: |
            Total Credit amount for the current ACH batch.<br>
            Only used for ACH credit accounts during batching. This will be the total PayOut value and will be used to validate the credits previously stored; if the value will not match then the batch will fail.
          example: '25000'
      description: |
        NOTE: This subgroup is only used for ACH transactions.
    grp_terminalInfo:
      type: object
      properties:
        SN:
          type: string
          description: |
            Pin pad’s serial number.<br>
            Used in Register, Unregister request.<br>
            Valid values:<br>
            Full serial number: 14281PP81035776,<br>
            Last 8 digit of serial number: 81035776
          example: '81035776'
        MessageIndex:
          type: string
          description: |
            Index of question display on the pin pad.<br>
            Used in AskNumberQuestion<br>
            Valid values:<br>
            <ul>
              <li>001: Please enter your home phone number</li>
              <li>002: Please enter your 10-digit HOME phone number</li>
              <li>003: Please enter your date of birth</li>
              <li>004: Please Enter ZIP Code</li>
              <li>010: Enter Card Number</li>
              <li>011: Enter Expiration Date</li>
              <li>012: Enter CVV or CID from card</li>
            </ul>
            Used in UploadMessage<br>
            Valid values<br>
            <ul>
              <li>1001: replace built-in message "Lane Closed"</li>
            </ul>
        MessageText:
          maxLength: 30
          type: string
          description: |
            Text to be displayed on pin pad. Used in AskSelectionQuestion, ShowMessage, UploadMessage, ESignature
        ImageData:
          type: string
          description: Base64 encode image.
        ImageLength:
          type: string
          description: The length of image data.
        ImageID:
          type: string
          description: The ID index of image.
          enum:
            - '001'
            - '002'
            - '003'
            - '004'
            - '005'
            - '006'
            - '007'
            - '008'
            - '009'
            - '010'
            - '012'
            - '013'
        Model:
          type: string
          description: The pinpad model.
          enum:
            - L3000
            - L5000
            - L7000
            - L8000
            - M5000
        ImageList:
          type: string
          description: |
            The ID list of image that needs to be displayed on the PinPad<br>
            Valid values:<br>
            001 002 003 004 005 006 007 008 009 010 012 013
        NeedSignature:
          type: string
          description: Only supported for swipe/manual key entry transactions in Local and Cloud PDC and for electronic signature capable terminals. Indicates whether PDC returns signature data in response message.
          default: 'Y'
          enum:
            - 'Y'
            - 'N'
        FileName:
          type: string
          description: |
            The name of pinpad configuration file that upload to the pinpad.
          example: CUSTPROMPT.PGZ
        NeedReceipt:
          type: string
          description: |
            Indicates whether to print receipt.
          example: 'N'
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        TermsAndConditions:
          maxLength: 1024
          type: string
          description: |
            Terms and Conditions to be displayed on the pinpad for the customer to accept and then capture an electronic signature. Used in ESignature.
      description: |
        Request Terminal Info. Group
    grp_EMV:
      type: object
      properties:
        EMV42:
          type: string
          description: Issuer Identification Number.
        EMV4F:
          type: string
          description: Application Identifier (AID).
        EMV50:
          type: string
          description: Application Label.
        EMV57:
          type: string
          description: Track 2 Equivalent Data.
        EMV5A:
          type: string
          description: Primary Account Number.
        EMV71:
          type: string
          description: Issuer script template 1.
        EMV72:
          type: string
          description: Issuer script template 2.
        EMV82:
          type: string
          description: Application Interchange Profile.
        EMV84:
          type: string
          description: Dedicated File (DF) Name.
        EMV87:
          type: string
          description: Application Priority Indicator.
        EMV8A:
          type: string
          description: Authorization Response Code.
        EMV8E:
          type: string
          description: Card Holder Verification Method (CVM) List.
        EMV91:
          type: string
          description: Issuer Authentication Data.
        EMV95:
          type: string
          description: Terminal Verification Results.
        EMV9A:
          type: string
          description: Transaction Date.
        EMV9B:
          type: string
          description: Transaction Status Information.
        EMV9C:
          type: string
          description: Transaction Type.
        EMV5F20:
          type: string
          description: Cardholder name.
        EMV5F24:
          type: string
          description: Expiry Date.
        EMV5F28:
          type: string
          description: Issuer Country Code, 3 digit numeric.
        EMV5F2A:
          type: string
          description: Transaction Currency Code.
        EMV5F2D:
          type: string
          description: Preferred languages.
        EMV5F30:
          type: string
          description: Service Code.
        EMV5F34:
          type: string
          description: Application PAN Sequence Number.
        EMV5F54:
          type: string
          description: Bank Identifier Code (BIC).
        EMV5F55:
          type: string
          description: Issuer Country Code, 2 digit alpha.
        EMV5F56:
          type: string
          description: Issuer Country Code, 3 digit alpha.
        EMV9F02:
          type: string
          description: Amount, Authorized (Numeric).
        EMV9F03:
          type: string
          description: Amount, Other (Numeric).
        EMV9F06:
          type: string
          description: Application ID Terminal.
        EMV9F07:
          type: string
          description: Application Usage Control.
        EMV9F08:
          type: string
          description: Application Version Number (ICC).
        EMV9F09:
          type: string
          description: Application Version Number (Terminal).
        EMV9F0B:
          type: string
          description: Cardholder Name Extended.
        EMV9F0D:
          type: string
          description: Issuer Action Code Default.
        EMV9F0E:
          type: string
          description: Issuer Action Code Denial.
        EMV9F0F:
          type: string
          description: Issuer Action Code Online.
        EMV9F10:
          type: string
          description: Issuer Application Data.
        EMV9F11:
          type: string
          description: Issuer Code Table Index.
        EMV9F12:
          type: string
          description: Application Preferred Name.
        EMV9F14:
          type: string
          description: Lower Consecutive Offline Limit
        EMV9F17:
          type: string
          description: PIN Try Count.
        EMV9F1A:
          type: string
          description: Terminal Country Code.
        EMV9F1B:
          type: string
          description: Terminal Floor Limit.
        EMV9F1E:
          type: string
          description: Interface Device (IFD) Serial Number.
        EMV9F1F:
          type: string
          description: Track 1 Discretionary Data
        EMV9F20:
          type: string
          description: Track 2 Discretionary Data
        EMV9F21:
          type: string
          description: Transaction Time.
        EMV9F26:
          type: string
          description: Application Cryptogram (AC).
        EMV9F27:
          type: string
          description: Cryptogram Information Data (CID).
        EMV9F33:
          type: string
          description: Terminal Capabilities.
        EMV9F34:
          type: string
          description: Cardholder Verification method (CVM) Results.
        EMV9F35:
          type: string
          description: Terminal Type.
        EMV9F36:
          type: string
          description: Application Transaction Counter (ATC).
        EMV9F37:
          type: string
          description: Unpredictable Number.
        EMV9F39:
          type: string
          description: POS Entry Mode.
        EMV9F40:
          type: string
          description: Additional Terminal Capabilities.
        EMV9F41:
          type: string
          description: Transaction Sequence Counter.
        EMV9F42:
          type: string
          description: Application Currency Code.
        EMV9F51:
          type: string
          description: Application Currency Code/DRDOL.
        EMV9F53:
          type: string
          description: Transaction Category Code (VISA only).
        EMV9F5B:
          type: string
          description: Transaction Category Code (VISA only).
        EMV9F5D:
          type: string
          description: Available Offline Spending Amount (AOSA).
        EMV9F66:
          type: string
          description: Terminal Transaction Qualifiers (TTQ)
        EMV9F67:
          type: string
          description: (Amex spec) - NATC (Track2) / MSD Offset.
        EMV9F6C:
          type: string
          description: Card Transaction Qualifiers (CTQ).
        EMV9F6D:
          type: string
          description: EMV Proprietary tag. See brand specifications for details per brand.
        EMV9F6E:
          type: string
          description: Third Party Data.
        EMV9F71:
          type: string
          description: Protected Data Envelope 2 & Mobile CVM Results
        EMV9F7C:
          type: string
          description: Customer Exclusive Data (CED) & Merchant Custom Data.
        EMVDF03:
          type: string
          description: Terminal Action Code Default.
        EMVDF04:
          type: string
          description: Terminal Action Code Denial.
        EMVDF05:
          type: string
          description: Terminal Action Code Online.
        EMVDF11:
          type: string
          description: Issuer Script Results.
      description: |
        EMV Custom Control Pin pad.<br>
        All fields are Hex-ASCII encoded
    grp_cardDataEncryption:
      type: object
      properties:
        KeyID:
          type: string
          description: |
            This is an identifier used to retrieve the private key, which is required for decryption.
          example: '66257982464'
        EncrptTrgt:
          type: string
          description: |
            Indicates the type of data that is being encrypted.
          example: PAN
          enum:
            - Track1
            - Track2
            - PAN
        EncrptBlock:
          type: string
          description: |
            Contains the track data or card number provided in an encrypted block. Be Present when card data is encrypted.
      description: |
        Encryption Data Group.<br>
        These are present for P2PE enabled card readers
    grp_PIN:
      type: object
      properties:
        PinBlock:
          maxLength: 16
          minLength: 16
          type: string
          description: |
            Contains the Encrypted PIN Block for the Debit or EBT or EMV with PIN transaction being submitted
          example: F652B46D04B5D191
        KSN:
          maxLength: 20
          minLength: 20
          type: string
          description: |
            Used to create the base PIN encryption key for DUKPT PIN Debit and EBT transactions. Mandatory for PIN Debit and EBT transactions.
          example: FFFF6543210000A00029
      description: |
        PIN Group.
    grp_Lvl3:
      type: object
      properties:
        CommercialL3:
          type: string
          description: |
            Indicates that the transaction is Purchase Level III.
          default: 'N'
          enum:
            - 'Y'
            - 'N'
        LocalTaxIncludedFlag:
          type: integer
          description: |
            Provides details about the tax amount.<br>
            Valid values:<br>
            <ul>
              <li>0: Sales Tax not Provided</li>
              <li>1: Local or Sales Tax Amount</li>
              <li>2: Tax Exempt</li>
            </ul>
          enum:
            - 0
            - 1
            - 2
        LocalTaxAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            The sales tax associated with the purchase.<br>
            Total digits = 12
          format: int64
          example: 10000
        NationalTaxAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            The national tax included in the transaction amount.<br>
            Total digits = 12
          format: int64
          example: 10000
        BusinessRefNum:
          maxLength: 20
          minLength: 0
          type: string
          description: |
            The government assigned tax identification number of the merchant from whom the goods or services were purchased from.
          example: M12345678
        CustomerRefNum:
          maxLength: 13
          minLength: 0
          type: string
          description: |
            Value Added Tax registration number supplied by the Commercial Card cardholder.
          example: C1234
        OrderDate:
          maxLength: 6
          minLength: 6
          type: string
          description: |
            The purchase order date and must be supplied in YYMMDD format.
          example: '190303'
        SummaryCommodityCode:
          maxLength: 4
          minLength: 0
          type: string
          description: |
            An international description code of the overall goods or services being supplied. The acquirer bank or processor should provide the merchant an updated listing of currently defined codes.
          example: COMC
        DestZIPCode:
          maxLength: 10
          minLength: 0
          type: string
          description: |
            The Postal/ZIP code of the address where purchased goods will be delivered.
          example: '85284'
        ShipZIP:
          maxLength: 10
          minLength: 0
          type: string
          description: |
            The postal/ZIP code of the address from where the purchased goods are being shipped.
          example: '85284'
        DestContryCode:
          maxLength: 3
          minLength: 0
          type: string
          description: |
            The ISO numeric code of the country where the goods are being shipped.
          example: '840'
        InvoiceNum:
          type: string
          description: |
            The invoice number that is associated with the VAT invoice.
          example: '3434343434343'
        ItemCount:
          maximum: 999
          minimum: 0
          type: integer
          description: |
            The total number of line item detail records associated with the transaction being settled.
          format: int64
          example: 2
        Item1:
          $ref: '#/components/schemas/grp_Lvl3Item'
      description: |
        Purchase Level 3 Data Group.
    grp_Lvl3Item:
      type: object
      properties:
        ItemCommodityCode:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            An international description code of the individual good or service being supplied.
          example: UPC 1
        ItemDescription:
          maxLength: 35
          minLength: 0
          type: string
          description: |
            An alphanumeric description of the item(s) being supplied.
          example: VI ITEM 1
        ItemProductionCode:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            A merchant defined description code of the item being purchased.
          example: MATERIAL 1
        ItemQuantity:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            The quantity of the item(s) being.
          example: '10000'
        ItemUnit:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            The alphanumeric code for units of measurement as used in international trade.
          example: EAC
        ItemUnitCost:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            The unit cost of the item purchased. This field reflects an implied decimal point of a four character numeric.
          example: '21'
        ItemTaxAmt:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            The amount of any value added taxes which can be associated with the purchased item.
          example: '0'
        ItemTaxRate:
          maxLength: 4
          minLength: 0
          type: string
          description: |
            The tax rate used to calculate the sales tax amount appearing in Payment transaction identifier - Mastercard only.
          example: '0'
        ItemDiscount:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            The total discount amount applied against the line item total. This field should be zeroes if the unit cost reflects a discount price or if no line item discount applies.
          example: '0'
        ItemTotalAmt:
          maxLength: 12
          minLength: 0
          type: string
          description: |
            The purchase amount associated with the specific line item detail record.
          example: '0'
      description: |
        Purchase Level 3 Item Data.<br>
        Item1, Item2,...ItemN where N is the items count.
    grp_result:
      required:
        - Status
      type: object
      properties:
        AuthCode:
          type: string
          description: Auth code is assigned by the association, issuing bank, or Debit/EBT network.
          example: OK4126
        Status:
          type: string
          description: |
            Indicates whether transaction was successfull or failed.

            *<span style="color:green">Valid values:</span>*
            ---
            ___
            - <span style="color:red">success</span> : Transaction success
            - <span style="color:red">fail</span> : Transaction fail
            - <span style="color:red">cancel</span> : Transaction cancel
            - <span style="color:red">timeout</span> : Transaction time out, please re-try later
            - <span style="color:red">invalidData</span> : The element is wrong
          example: success
          enum:
            - success
            - fail
            - timeout
            - cancel
            - invalidData
        ResponseCode:
          type: string
          description: The host response to a string number to indicate the status of the transaction.
          example: '00'
        ResponseText:
          type: string
          description: The host response to a message to describe the status of the transaction.
          example: APPROVAL
        ErrorCode:
          type: string
          description: "The Netevia error code response to indicate the error of the transaction.\n\n*<span style=\"color:green\">Netevia Error/Response Codes:</span>*\n---\n___\n- <span style=\"color:red\">100</span> : No Error\n- <span style=\"color:red\">101</span> : Invalid GMID\n- <span style=\"color:red\">102</span> : Invalid GTID\n- <span style=\"color:red\">103</span> : Invalid GMPW\n- <span style=\"color:red\">104</span> : Invalid GTRC\n- <span style=\"color:red\">105</span> : Invalid Card Token\n- <span style=\"color:red\">106</span> : Invalid Database\n- <span style=\"color:red\">107</span> : Processor does not support the card type\n- <span style=\"color:red\">108</span> : Processor module not loaded\n- <span style=\"color:red\">109</span> : Invalid amount\n- <span style=\"color:red\">110</span> : Void amount exceeds original authorized amount\n- <span style=\"color:red\">111</span> : Offline transaction can only be used for Credit Card Sale / EBT Food Stamp Sale\n- <span style=\"color:red\">112</span> : Credit / EBT Food Stamp card with cashback is not allowed\n- <span style=\"color:red\">113</span> : Addtip must be based on Auth/Sale transactions\n- <span style=\"color:red\">114</span> : Finalize must be based on Auth transactions\n- <span style=\"color:red\">115</span> : Original transaction has already been voided\n- <span style=\"color:red\">116</span> : Offline transaction must supply AuthCode\n- <span style=\"color:red\">117</span> : Engine process timed out\n- <span style=\"color:red\">118</span> : Proxy process timed out\n- <span style=\"color:red\">119</span> : PDC process timed out\n- <span style=\"color:red\">120</span> : Processor process timed out\n- <span style=\"color:red\">121</span> : Failed to delete the card token info\n- <span style=\"color:red\">122</span> : Failed to update the card token info\n- <span style=\"color:red\">123</span> : Failed to create the card token info\n- <span style=\"color:red\">124</span> : Processor not support the transaction type\n- <span style=\"color:red\">125</span> : Transaction type empty\n- <span style=\"color:red\">126</span> : Card type empty\n- <span style=\"color:red\">127</span> : NeedSwipeCard empty\n- <span style=\"color:red\">128</span> : EntryMode empty\n- <span style=\"color:red\">129</span> : CardToken empty\n- <span style=\"color:red\">130</span> : GTRC empty\n- <span style=\"color:red\">131</span> : SourceTraceNum empty\n- <span style=\"color:red\">132</span> : CardType empty\n- <span style=\"color:red\">133</span> : Card number invalid\n- <span style=\"color:red\">134</span> : Card date expired\n- <span style=\"color:red\">135</span> : Invalid Track1\n- <span style=\"color:red\">136</span> : Invalid Track2\n- <span style=\"color:red\">137</span> : AVS Verification Failed\n- <span style=\"color:red\">138</span> : Bad CVV or Exp Date\n- <span style=\"color:red\">139</span> : ZIP Verification Failed\n- <span style=\"color:red\">140</span> : PIN empty.\n- <span style=\"color:red\">141</span> : KSN empty\n- <span style=\"color:red\">142</span> : Card data is incomplete\n- <span style=\"color:red\">143</span> : EntryMode not support this card type\n- <span style=\"color:red\">144</span> : EntryMode not support this transaction type\n- <span style=\"color:red\">145</span> : Store&Forward mode not support this transaction type\n- <span style=\"color:red\">146</span> : Duplicate transaction.\n- <span style=\"color:red\">147</span> : Decline.(e.g., in case of Partial Approval and merchant does not support it)\n- <span style=\"color:red\">149</span> : PinPad busy, please wait for the current transaction to finish and try again.\n- <span style=\"color:red\">150</span> : Failed to connect to pin pad.\n- <span style=\"color:red\">151</span> : User/Operator cancel\n- <span style=\"color:red\">152</span> : Swipe card time out\n- <span style=\"color:red\">153</span> : PinPad unavailable\n- <span style=\"color:red\">154</span> : Failed to read card data\n- <span style=\"color:red\">155</span> : PinPad declined\n- <span style=\"color:red\">156</span> : PinPad invalid serial number\n- <span style=\"color:red\">157</span> : PinPad serial number registrationFailed\n- <span style=\"color:red\">158</span> : PinPadSerialNumberRegistrationFailed, Pin pad already registered with another GMID/GTID.\n- <span style=\"color:red\">159</span> : PinPad Service not suport, please connect 911Software e-mail: dev.cn@911software.com, Thank you.\n- <span style=\"color:red\">160</span> : Payment Gateway Network Error\n- <span style=\"color:red\">161</span> : Terminal Serial Number Unregistration failed.\n- <span style=\"color:red\">162</span> : No Terminal Serial Number registered for TID.\n- <span style=\"color:red\">163</span> : Merchant No SetUp\n- <span style=\"color:red\">170</span> : Please check PDC config have been enabled your card type.\n- <span style=\"color:red\">175</span> : Invalid Message Index\n- <span style=\"color:red\">176</span> : Invalid Message Length\n- <span style=\"color:red\">177</span> : Invalid Image ID\n- <span style=\"color:red\">178</span> : Invalid Image Data\n- <span style=\"color:red\">179</span> : The type of terminal not support this function\n- <span style=\"color:red\">180</span> : Invalid Card Date\n- <span style=\"color:red\">181</span> : Invalid Transaction\n- <span style=\"color:red\">182</span> : Invalid InvoiceNum\n- <span style=\"color:red\">183</span> : RushMode not support check duplicate\n- <span style=\"color:red\">184</span> : RushMode not support EMV\n- <span style=\"color:red\">190</span> : System batch invalid, please connect 911Software e-mail: dev.cn@911software.com, Thank you.\n- <span style=\"color:red\">191</span> : Batch is processing, please try later.\n- <span style=\"color:red\">201</span> : Query database error.\n- <span style=\"color:red\">202</span> : No record found.\n- <span style=\"color:red\">203</span> : Multiple records found.\n- <span style=\"color:red\">204</span> : Processor network invalid\n- <span style=\"color:red\">210</span> : Please refer device error code\n- <span style=\"color:red\">999</span> : Undefined error\n\n*<span style=\"color:green\">Netevia Batch Operation Error/Response Codes:</span>*\n---\n___\n- <span style=\"color:red\">0NB</span> : No Finalized Transactions to Batch\n- <span style=\"color:red\">0GB</span> : Good Batch\n- <span style=\"color:red\">0DB</span> : Duplicate Batch\n- <span style=\"color:red\">0RB</span> : Rejected Batch\n- <span style=\"color:red\">0EB</span> : Batch Failed on Processor Host\n\n*<span style=\"color:green\">Processor Specific Error/Response Codes:</span>*\n---\n___\n- <span style=\"color:red\">000</span> : Approved and completed\n- <span style=\"color:red\">001</span> : Refer to issuer\n- <span style=\"color:red\">002</span> : Refer to issuer-Special condition\n- <span style=\"color:red\">003</span> : Invalid Merchant ID\n- <span style=\"color:red\">004</span> : Pick up card (no fraud)\n- <span style=\"color:red\">005</span> : Do not honor\n- <span style=\"color:red\">006</span> : General error\n- <span style=\"color:red\">007</span> : Pick up card, special condition (fraud account)\n- <span style=\"color:red\">008</span> : Honor Mastercard with ID\n- <span style=\"color:red\">010</span> : Partial approval for the authorized amount returned in Group III version 022\n- <span style=\"color:red\">011</span> : VIP approval\n- <span style=\"color:red\">012</span> : Invalid transaction\n- <span style=\"color:red\">013</span> : Invalid amount\n- <span style=\"color:red\">014</span> : Invalid card number\n- <span style=\"color:red\">015</span> : No such issuer\n- <span style=\"color:red\">019</span> : Re-enter transaction\n- <span style=\"color:red\">021</span> : Unable to back out transaction\n- <span style=\"color:red\">028</span> : File is temporarily unavailable\n- <span style=\"color:red\">034</span> : Mastercard use only, Transaction Cancelled; Fraud Concern (Used in reversal requests only)\n- <span style=\"color:red\">039</span> : No credit account\n- <span style=\"color:red\">041</span> : Lost card, pick up (fraud account)\n- <span style=\"color:red\">043</span> : Stolen card, pick up (fraud account)\n- <span style=\"color:red\">051</span> : Insufficient funds\n- <span style=\"color:red\">052</span> : No checking account\n- <span style=\"color:red\">053</span> : No savings account\n- <span style=\"color:red\">054</span> : Expired card\n- <span style=\"color:red\">055</span> : Incorrect PIN\n- <span style=\"color:red\">057</span> : Transaction not permitted-Card\n- <span style=\"color:red\">058</span> : Transaction not permitted-Terminal\n- <span style=\"color:red\">059</span> : Transaction not permitted-Merchant\n- <span style=\"color:red\">061</span> : Exceeds withdrawal limit\n- <span style=\"color:red\">062</span> : Invalid service code, restricted\n- <span style=\"color:red\">063</span> : Security violation\n- <span style=\"color:red\">065</span> : Activity limit exceeded\n- <span style=\"color:red\">075</span> : PIN tried exceeded\n- <span style=\"color:red\">076</span> : Unable to locate, no match\n- <span style=\"color:red\">077</span> : Inconsistant data, reversed, or repeat\n- <span style=\"color:red\">078</span> : No account\n- <span style=\"color:red\">079</span> : Already reversed at switch\n- <span style=\"color:red\">080</span> : No Financial impact (used in reversal responses to declined originals).\n- <span style=\"color:red\">081</span> : Cryptographic error\n- <span style=\"color:red\">082</span> : CVV data is not correct\n- <span style=\"color:red\">083</span> : Cannot verify PIN\n- <span style=\"color:red\">085</span> : No reason to decline\n- <span style=\"color:red\">086</span> : Cannot verify PIN\n- <span style=\"color:red\">091</span> : Issuer or switch is unavailable\n- <span style=\"color:red\">092</span> : Destination not found\n- <span style=\"color:red\">093</span> : Violation, cannot complete\n- <span style=\"color:red\">094</span> : Unable to locate, no match\n- <span style=\"color:red\">096</span> : System malfunction\n- <span style=\"color:red\">0A1</span> : POS device authentication successful\n- <span style=\"color:red\">0A2</span> : POS device authentication not successful\n- <span style=\"color:red\">0A3</span> : POS device deactivation successful\n- <span style=\"color:red\">0B1</span> : Surcharge amount not permitted on debit cards or EBT food stamps\n- <span style=\"color:red\">0B2</span> : Surcharge amount not supported by debit network issuer\n- <span style=\"color:red\">0CV</span> : Card Type Verification Error\n- <span style=\"color:red\">0D3</span> : Transaction failure due to missing or invalid 3D-Secure cryptogram\n- <span style=\"color:red\">0E1</span> : Encryption is not configured\n- <span style=\"color:red\">0E2</span> : Terminal is not authenticated\n- <span style=\"color:red\">0E3</span> : Data could not be decrypted\n- <span style=\"color:red\">0EA</span> : Verification error\n- <span style=\"color:red\">0EB</span> : Verification error\n- <span style=\"color:red\">0EC</span> : Verification error\n- <span style=\"color:red\">0HV</span> : Hierarchy Verification Error\n- <span style=\"color:red\">0K0</span> : Token request was processed\n- <span style=\"color:red\">0K1</span> : Tokenization is not configured\n- <span style=\"color:red\">0K2</span> : Terminal is not authenticated\n- <span style=\"color:red\">0K3</span> : Data could not be de-tokenized\n- <span style=\"color:red\">0M0</span> : Mastercard: Canada region-issued Domestic Debit Transaction not allowed\n- <span style=\"color:red\">0N3</span> : Cash back service not available\n- <span style=\"color:red\">0N4</span> : Exceeds issuer withdrawal limit\n- <span style=\"color:red\">0N7</span> : CVV2 Value supplied is invalid\n- <span style=\"color:red\">0R0</span> : Customer requested stop of specific recurring payment\n- <span style=\"color:red\">0R1</span> : Customer requested stop of all recurring payments from specific merchant\n- <span style=\"color:red\">0T0</span> : First check is OK and has been converted\n- <span style=\"color:red\">0T1</span> : Check is OK but cannot be converted This is a declined transaction\n- <span style=\"color:red\">0T2</span> : Invalid ABA number, not an ACH participant\n- <span style=\"color:red\">0T3</span> : Amount greater than the limit\n- <span style=\"color:red\">0T4</span> : Unpaid items, failed negative file check\n- <span style=\"color:red\">0T5</span> : Duplicate check number\n- <span style=\"color:red\">0T6</span> : MICR error\n- <span style=\"color:red\">0T7</span> : Too many checks (over merchant or bank limit)\n- <span style=\"color:red\">0V1</span> : Daily threshold exceeded\n\n*<span style=\"color:green\">Givex Specific Error/Response Codes:</span>*\n---\n___\n- <span style=\"color:red\">  001  </span> :   Invalid user ID/pswd\n- <span style=\"color:red\">  002  </span> :   Cert not exist\n- <span style=\"color:red\">  003  </span> :   Cert invalid\n- <span style=\"color:red\">  004  </span> :   Validation wrong\n- <span style=\"color:red\">  005  </span> :   Certificate closed\n- <span style=\"color:red\">  006  </span> :   Certificate expired\n- <span style=\"color:red\">  007  </span> :   Unused\n- <span style=\"color:red\">  008  </span> :   Cert already active on YYYY-MM-DD HH:MM:SS\n- <span style=\"color:red\">  009  </span> :   ERR bal=$99.99 (with actual balance)\n- <span style=\"color:red\">  010  </span> :   Invalid amt < min\n- <span style=\"color:red\">  011  </span> :   Invalid amt > max\n- <span style=\"color:red\">  012  </span> :   Invalid amt\n- <span style=\"color:red\">  013  </span> :   Incorrect amt\n- <span style=\"color:red\">  014  </span> :   Trans invalid\n- <span style=\"color:red\">  015  </span> :   Trans too old\n- <span style=\"color:red\">  016  </span> :   Cancel not allowed\n- <span style=\"color:red\">  017  </span> :   Invalid operator\n- <span style=\"color:red\">  018  </span> :   Serial number not supplied\n- <span style=\"color:red\">  019  </span> :   Operation not permitted\n- <span style=\"color:red\">  020  </span> :   No transactions meeting specified criteria\n- <span style=\"color:red\">  021  </span> :   No report currently started\n- <span style=\"color:red\">  022  </span> :   Invalid points\n- <span style=\"color:red\">  023  </span> :   Invalid operator\n- <span style=\"color:red\">  024  </span> :   Invalid report\n- <span style=\"color:red\">  025  </span> :   Invalid cashout\n- <span style=\"color:red\">  026  </span> :   Terminal already registered\n- <span style=\"color:red\">  027  </span> :   Certificate on hold\n- <span style=\"color:red\">  028  </span> :   Certificate cancelled\n- <span style=\"color:red\">  029  </span> :   Certificate cancelled for fraud\n- <span style=\"color:red\">  030  </span> :   Service code is not valid\n- <span style=\"color:red\">  031  </span> :   Certificate is not registered as loyalty program member\n- <span style=\"color:red\">  032  </span> :   Certificate has invalid tier_id\n- <span style=\"color:red\">  033  </span> :   Promo code is not valid\n- <span style=\"color:red\">  034  </span> :   Base points calculation formula is not defined\n- <span style=\"color:red\">  035  </span> :   Units quantity is not valid\n- <span style=\"color:red\">  036  </span> :   Customer does not qualify for this promo code\n- <span style=\"color:red\">  037  </span> :   Promo code points calculation formula is not defined\n- <span style=\"color:red\">  038  </span> :   Certificate can only be used after YYYY-MM-DD\n- <span style=\"color:red\">  039  </span> :   Invalid terminal ID/pswd\n- <span style=\"color:red\">  040  </span> :   Certificate is not active\n- <span style=\"color:red\">  041  </span> :   Invalid Security Code\n- <span style=\"color:red\">  042  </span> :   Cannot transfer to same card\n- <span style=\"color:red\">  043  </span> :   Promo code not active\n- <span style=\"color:red\">  044  </span> :   System not set up correctly\n- <span style=\"color:red\">  045  </span> :   Balance cannot be transferred\n- <span style=\"color:red\">  046  </span> :   Currency conversion failed\n- <span style=\"color:red\">  047  </span> :   Currency conversion not allowed\n- <span style=\"color:red\">  048  </span> :   Post-Auth references invalid Pre-Auth\n- <span style=\"color:red\">  049  </span> :   Phone number is not unique\n- <span style=\"color:red\">  050  </span> :   Amt exceeds bal limit\n- <span style=\"color:red\">  051  </span> :   Closed on MM/DD HH:MM\n- <span style=\"color:red\">  052  </span> :   Invalid selection\n- <span style=\"color:red\">  053  </span> :   Form entry has been terminated\n- <span style=\"color:red\">  054  </span> :   Terminal not registered\n- <span style=\"color:red\">  055  </span> :   Date is invalid\n- <span style=\"color:red\">  056  </span> :   Keyed entry not permitted for operator\n- <span style=\"color:red\">  057  </span> :   Declined: Activated at Store\_Store ABC.\n- <span style=\"color:red\">  058  </span> :   Terminal is not configured properly.\n- <span style=\"color:red\">  059  </span> :   Invalid SKU\n- <span style=\"color:red\">  060  </span> :   Invalid reward\n- <span style=\"color:red\">  061  </span> :   Self-excluded\n- <span style=\"color:red\">  062  </span> :   Cert already registered\n- <span style=\"color:red\">  063  </span> :   Cert expired. Bal=$99.99\n- <span style=\"color:red\">  064  </span> :   Maximum points adjustment amount exceeded\n- <span style=\"color:red\">  065  </span> :   Maximum points balance exceeded\n- <span style=\"color:red\">  066  </span> :   Referral already processed\n- <span style=\"color:red\">  067  </span> :   The member is already enrolled\n- <span style=\"color:red\">  068  </span> :   Self referral not allowed\n- <span style=\"color:red\">  069  </span> :   Existing customer can not be referred\n- <span style=\"color:red\">  070  </span> :   Declined: Activated at Store\_Store ABC.\n- <span style=\"color:red\">  071  </span> :   Ticket does not exist\n- <span style=\"color:red\">  072  </span> :   Ticket invalid\n- <span style=\"color:red\">  073  </span> :   Ticket expired\n- <span style=\"color:red\">  074  </span> :   Ticket redeemed\n- <span style=\"color:red\">  075  </span> :   Ticket already activated\n- <span style=\"color:red\">  076  </span> :   ERR bal=$99.99\n- <span style=\"color:red\">  077  </span> :   Ticket on hold\n- <span style=\"color:red\">  078  </span> :   Ticket cancelled\n- <span style=\"color:red\">  079  </span> :   Ticket cancelled for fraud\n- <span style=\"color:red\">  080  </span> :   Ticket can be used after this date only: YYYY-MM-DD.\n- <span style=\"color:red\">  081  </span> :   Ticket not active\n- <span style=\"color:red\">  082  </span> :   Ticket already registered\n- <span style=\"color:red\">  083  </span> :   Ticket initial value not active\n- <span style=\"color:red\">  084  </span> :   Not permitted at this terminal\n- <span style=\"color:red\">  085  </span> :   Daily limit exceeded\n- <span style=\"color:red\">  086  </span> :   Weekly limit exceeded\n- <span style=\"color:red\">  087  </span> :   Already reversed\n- <span style=\"color:red\">  088  </span> :   Package not exist\n- <span style=\"color:red\">  089  </span> :   Package issuance not allowed\n- <span style=\"color:red\">  090  </span> :   Invalid quantity\n- <span style=\"color:red\">  091  </span> :   Invalid item list for custom issuance\n- <span style=\"color:red\">  092  </span> :   Insufficient item balance\n- <span style=\"color:red\">  093  </span> :   Item not exist\n- <span style=\"color:red\">  094  </span> :   No balance to adjust\n- <span style=\"color:red\">  095  </span> :   Invalid item/package code\n- <span style=\"color:red\">  096  </span> :   Amount cannot be split evenly\n- <span style=\"color:red\">  097  </span> :   Card Pack Number does not exist\n- <span style=\"color:red\">  098  </span> :   Loyalty card required for this transaction\n- <span style=\"color:red\">  099  </span> :   Package redemption not allowed\n- <span style=\"color:red\">  100  </span> :   User ID already registered\n- <span style=\"color:red\">  101  </span> :   Coupon Already Redeemed\n- <span style=\"color:red\">  102  </span> :   Amount is greater than the max balance\n- <span style=\"color:red\">  103  </span> :   Same ticket balance transfer not allowed\n- <span style=\"color:red\">  104  </span> :   Performance does not match\n- <span style=\"color:red\">  105  </span> :   Ticket has already replaced another ticket\n- <span style=\"color:red\">  106  </span> :   Coupon not associated to Member Card\n- <span style=\"color:red\">  107  </span> :   Coupon not active\n- <span style=\"color:red\">  108  </span> :   Coupon expired\n- <span style=\"color:red\">  109  </span> :   Coupon does not exist\n- <span style=\"color:red\">  110  </span> :   Duplicate Email Address (Account Registration/Update)\n- <span style=\"color:red\">  111  </span> :   Duplicate SMS Address (Account Registration/Update)\n- <span style=\"color:red\">  112  </span> :   Duplicate Email & SMS Address (Account Registration/Update)\n- <span style=\"color:red\">  113  </span> :   No more card to allocate (Register from a pool of cards)\n- <span style=\"color:red\">  114  </span> :   Cert must be registered to a CWS account before it can be used\n- <span style=\"color:red\">  115  </span> :   Invalid Email address\n- <span style=\"color:red\">  116  </span> :   Invalid Channel\n- <span style=\"color:red\">  117  </span> :   Cannot be redeemed at this time\n- <span style=\"color:red\">  118  </span> :   Invalid number of stores\n- <span style=\"color:red\">  119  </span> :   Invalid search distance\n- <span style=\"color:red\">  120  </span> :   Invalid amenities\n- <span style=\"color:red\">  121  </span> :   Invalid longitude/latitude location\n- <span style=\"color:red\">  122  </span> :   Invalid search criteria\n- <span style=\"color:red\">  123  </span> :   Invalid performance reference\n- <span style=\"color:red\">  124  </span> :   Invalid performance description\n- <span style=\"color:red\">  125  </span> :   Invalid ticket barcode\n- <span style=\"color:red\">  126  </span> :   Invalid seat\n- <span style=\"color:red\">  127  </span> :   Invalid section\n- <span style=\"color:red\">  128  </span> :   Invalid row\n- <span style=\"color:red\">  129  </span> :   Invalid status\n- <span style=\"color:red\">  130  </span> :   Invalid initial ticket value code\n- <span style=\"color:red\">  131  </span> :   New patron does not match existing patron for ticket\n- <span style=\"color:red\">  132  </span> :   Ticket could not be imported due to a setup issue\n- <span style=\"color:red\">  133  </span> :   Invalid pocket\n- <span style=\"color:red\">  134  </span> :   No SKU discount found.\n- <span style=\"color:red\">  135  </span> :   Limit for registered loyalty cards has been reached\n- <span style=\"color:red\">  136  </span> :   Exchange rate updating failed\n- <span style=\"color:red\">  137  </span> :   Maximum points per day exceeded\n- <span style=\"color:red\">  138  </span> :   Birth date is not old enough\n- <span style=\"color:red\">  139  </span> :   Failed to create Mapped Card Group detail\n- <span style=\"color:red\">  140  </span> :   Card ID is not unique\n- <span style=\"color:red\">  141  </span> :   Amount exceeds redeemable balance $99.99 (with actual balance)\n- <span style=\"color:red\">  142  </span> :   Package adjustment not allowed\n- <span style=\"color:red\">  143  </span> :   Package adjustment not allowed\n- <span style=\"color:red\">  144  </span> :   Primary certificate is not active\n- <span style=\"color:red\">  145  </span> :   Units must be greater than 99 (with actual min units)\n- <span style=\"color:red\">  146  </span> :   Units must be greater than 99 and less than 9999 (with actual min/max units)\n- <span style=\"color:red\">  147  </span> :   Can not transfer, there are pending pre-auth transactions\n- <span style=\"color:red\">  148  </span> :   Customer login required\n- <span style=\"color:red\">  149  </span> :   Customer Password required\n- <span style=\"color:red\">  150  </span> :   Invalid customer login/password\n- <span style=\"color:red\">  151  </span> :   Guest Info is not provided\n- <span style=\"color:red\">  152  </span> :   Amount is less than threshold\n- <span style=\"color:red\">  153  </span> :   Units quantity is less than threshold\n- <span style=\"color:red\">  154  </span> :   Amount and Units quantity are less than thresholds\n- <span style=\"color:red\">  155  </span> :   Not redeemable at this location\n- <span style=\"color:red\">  156  </span> :   The phone number entered has already been used for an existing registered user. Please provide a different number.\n- <span style=\"color:red\">  157  </span> :   Customer is not provided\n- <span style=\"color:red\">  158  </span> :   Customer does not exist\n- <span style=\"color:red\">  159  </span> :   Customer address information not found\n- <span style=\"color:red\">  162  </span> :   Customer information is invalid\n- <span style=\"color:red\">  163  </span> :   Customer is inactive\n- <span style=\"color:red\">  166  </span> :   Error updating customer record\n- <span style=\"color:red\">  167  </span> :   Error inserting customer record\n- <span style=\"color:red\">  168  </span> :   Address type already exists for customer\n- <span style=\"color:red\">  169  </span> :   Mandatory field missing\n- <span style=\"color:red\">  170  </span> :   Error inserting customer address record\n- <span style=\"color:red\">  171  </span> :   Contact type already exists for customer\n- <span style=\"color:red\">  172  </span> :   Error inserting customer contact record\n- <span style=\"color:red\">  173  </span> :   Billing Address information for customer not found\n- <span style=\"color:red\">  174  </span> :   Could not get info for increment transaction\n- <span style=\"color:red\">  176  </span> :   Could not get merchant info\n- <span style=\"color:red\">  177  </span> :   Increment transaction failed\n- <span style=\"color:red\">  178  </span> :   Card number already registered for automated card reload\n- <span style=\"color:red\">  179  </span> :   Error inserting automated reload record\n- <span style=\"color:red\">  182  </span> :   Customer already exists\n- <span style=\"color:red\">  184  </span> :   Password is invalid\n- <span style=\"color:red\">  185  </span> :   No card reload exists for customer\n- <span style=\"color:red\">  186  </span> :   Error updating customer contact record\n- <span style=\"color:red\">  187  </span> :   Error updating customer address record\n- <span style=\"color:red\">  188  </span> :   Error updating customer card reload record\n- <span style=\"color:red\">  189  </span> :   No transaction info found\n- <span style=\"color:red\">  192  </span> :   Card number already registered for CLP.\n- <span style=\"color:red\">  193  </span> :   Error inserting CLP record.\n- <span style=\"color:red\">  194  </span> :   Could not get certificate for increment transaction\n- <span style=\"color:red\">  195  </span> :   Error updating SMS Verification record\n- <span style=\"color:red\">  196  </span> :   The phone number entered has already been used for an existing registered user. Please provide a different number.\n- <span style=\"color:red\">  197  </span> :   No tiers found for merchant\n- <span style=\"color:red\">  198  </span> :   No member types found for merchant\n- <span style=\"color:red\">  199  </span> :   Payment information invalid\n- <span style=\"color:red\">  200  </span> :   Invalid Government Identification\n- <span style=\"color:red\">  201  </span> :   Merchant Credit (activation) transaction failed\n- <span style=\"color:red\">  202  </span> :   Card is not registered to this customer\n- <span style=\"color:red\">  203  </span> :   Duplicate reference found in last 24 hours.\n- <span style=\"color:red\">  204  </span> :   Patron Card is not unique\n- <span style=\"color:red\">  205  </span> :   Invalid Day of Week\n- <span style=\"color:red\">  206  </span> :   Invalid Coupon Redeem value\n- <span style=\"color:red\">  207  </span> :   No rewards found\n- <span style=\"color:red\">  208  </span> :   Insufficient points balance\n- <span style=\"color:red\">  209  </span> :   Free reward issuance failed\n- <span style=\"color:red\">  210  </span> :   The mobile phone number entered has already been used for an existing registered user. Please provide a different number.\n- <span style=\"color:red\">  211  </span> :   Invalid mapping card group\n- <span style=\"color:red\">  212  </span> :   From\_ticket invalid\n- <span style=\"color:red\">  213  </span> :   To\_ticket invalid\n- <span style=\"color:red\">  214  </span> :   Full account card cannot be merged\n- <span style=\"color:red\">  215  </span> :   No survey found\n- <span style=\"color:red\">  216  </span> :   Question ID invalid\n- <span style=\"color:red\">  217  </span> :   Answer ID invalid\n- <span style=\"color:red\">  218  </span> :   Required answer missing\n- <span style=\"color:red\">  219  </span> :   Maximum number of answers exceeded\n- <span style=\"color:red\">  220  </span> :   Order Generation failed\n- <span style=\"color:red\">  221  </span> :   Invalid Order\n- <span style=\"color:red\">  222  </span> :   Order Number has expired\n- <span style=\"color:red\">  223  </span> :   Two of optional fields must be provided\n- <span style=\"color:red\">  224  </span> :   Multiple customers found\n- <span style=\"color:red\">  225  </span> :   Extend free reward failed\n- <span style=\"color:red\">  226  </span> :   Loyalty Name is too short\n- <span style=\"color:red\">  227  </span> :   Loyalty Name has digits only\n- <span style=\"color:red\">  228  </span> :   Multiple records found for requested value. Please refine your search.\n- <span style=\"color:red\">  231  </span> :   Verification failed\n- <span style=\"color:red\">  232  </span> :   The PIN must be 4 digits in length\n- <span style=\"color:red\">  233  </span> :   The PIN can only contain digits\n- <span style=\"color:red\">  234  </span> :   Member has no email address\n- <span style=\"color:red\">  235  </span> :   Member has no mobile number\n- <span style=\"color:red\">  236  </span> :   Invalid Loyalty Name\n- <span style=\"color:red\">  237  </span> :   Duplicate Loyalty Name\n- <span style=\"color:red\">  238  </span> :   Coupon Promotions not enabled for store\n- <span style=\"color:red\">  239  </span> :   No Coupon Issued\n- <span style=\"color:red\">  240  </span> :   Amount Spent is less than minimum required\n- <span style=\"color:red\">  241  </span> :   Cert can not be reactivated\n- <span style=\"color:red\">  242  </span> :   Cert is not expired\n- <span style=\"color:red\">  243  </span> :   Cannot process the transaction, only one card can be used per transaction.\n- <span style=\"color:red\">  244  </span> :   Minimum amount to be spent is 99.99\n- <span style=\"color:red\">  245  </span> :   Invalid Action Type for holding up or restoring or canceling for fraud or canceling card\n- <span style=\"color:red\">  246  </span> :   Card can not be restored\n- <span style=\"color:red\">  247  </span> :   Transaction already cancelled\n- <span style=\"color:red\">  248  </span> :   Duplicate Customer Login\n- <span style=\"color:red\">  249  </span> :   Token Expired\n- <span style=\"color:red\">  250  </span> :   Reward already redeemed\n- <span style=\"color:red\">  251  </span> :   Hold for the certificate is not allowed\n- <span style=\"color:red\">  252  </span> :   Cancel for the certificate is not allowed\n- <span style=\"color:red\">  253  </span> :   Fraud for the certificate is not allowed\n- <span style=\"color:red\">  254  </span> :   Certificate on hold. Bal=$99.99\n- <span style=\"color:red\">  255  </span> :   Invalid input for Customer ID/Cardnumber flag\n- <span style=\"color:red\">  256  </span> :   Invalid list of customer ids or card numbers\n- <span style=\"color:red\">  257  </span> :   No customer(s) found\n- <span style=\"color:red\">  258  </span> :   No card(s) found\n- <span style=\"color:red\">  259  </span> :   Card has some money value\n- <span style=\"color:red\">  260  </span> :   Address is required\n- <span style=\"color:red\">  261  </span> :   City is required\n- <span style=\"color:red\">  262  </span> :   Email address is required\n- <span style=\"color:red\">  263  </span> :   First name is required\n- <span style=\"color:red\">  264  </span> :   Gender is required\n- <span style=\"color:red\">  265  </span> :   Last name is required\n- <span style=\"color:red\">  266  </span> :   Phone number is required\n- <span style=\"color:red\">  267  </span> :   Province is required\n- <span style=\"color:red\">  268  </span> :   Postal code is required\n- <span style=\"color:red\">  269  </span> :   Shipping Address Info is needed.\n- <span style=\"color:red\">  270  </span> :   Country is not valid\n- <span style=\"color:red\">  271  </span> :   Date Start to get card history is not valid: YYYY-MM-DD\n- <span style=\"color:red\">  272  </span> :   Date End to get card history is not valid: YYYY-MM-DD\n- <span style=\"color:red\">  273  </span> :   Discount is not valid\n- <span style=\"color:red\">  274  </span> :   Email address is not valid\n- <span style=\"color:red\">  275  </span> :   Postal/ZIP code is not valid\n- <span style=\"color:red\">  276  </span> :   Province is not valid\n- <span style=\"color:red\">  277  </span> :   Title is not valid\n- <span style=\"color:red\">  278  </span> :   Ecert order info not enough\n- <span style=\"color:red\">  279  </span> :   Ecert order detail info not enough\n- <span style=\"color:red\">  280  </span> :   Gift card order info not enough\n- <span style=\"color:red\">  281  </span> :   Gift card order detail info not enough\n- <span style=\"color:red\">  282  </span> :   Order cannot be cancelled\n- <span style=\"color:red\">  283  </span> :   Invalid History Type\n- <span style=\"color:red\">  284  </span> :   ISO-Serial or Givex Number fields must be filled in.\n- <span style=\"color:red\">  285  </span> :   Failed to get cert balance for certificate\n- <span style=\"color:red\">  286  </span> :   CWS Address is required\n- <span style=\"color:red\">  287  </span> :   CWS Address City is required\n- <span style=\"color:red\">  288  </span> :   CWS Address Country is required\n- <span style=\"color:red\">  289  </span> :   CWS Address ZIP/Postal Code is required\n- <span style=\"color:red\">  290  </span> :   CWS Order Ecert Total is required\n- <span style=\"color:red\">  291  </span> :   CWS Order Total is required\n- <span style=\"color:red\">  292  </span> :   Reason for CWS Order cancellation is required\n- <span style=\"color:red\">  293  </span> :   CWS Item was not found\n- <span style=\"color:red\">  294  </span> :   CWS Order creation failed\n- <span style=\"color:red\">  295  </span> :   CWS Order FF Shipping Type was not found\n- <span style=\"color:red\">  296  </span> :   CWS Order ID is not found\n- <span style=\"color:red\">  297  </span> :   No CWS Order Card faces found\n- <span style=\"color:red\">  298  </span> :   CWS Address ZIP/Postal Code is not valid\n- <span style=\"color:red\">  299  </span> :   CWS Ecert Order Receiving Email is required\n- <span style=\"color:red\">  300  </span> :   CWS Ecert Order Total is not valid\n- <span style=\"color:red\">  302  </span> :   CWS Entry quantity is not valid\n- <span style=\"color:red\">  303  </span> :   CWS Order Total is not valid\n- <span style=\"color:red\">  304  </span> :   CWS Order ID is invalid\n- <span style=\"color:red\">  305  </span> :   CWS Order Confirmation Email is not valid\n- <span style=\"color:red\">  306  </span> :   CWS Ecert Order size is over limit\n- <span style=\"color:red\">  307  </span> :   CWS Order Total does not match to the calculated one\n- <span style=\"color:red\">  308  </span> :   CWS Ecert Order delivery date in invalid format.\n- <span style=\"color:red\">  309  </span> :   CWS Ecert Order delivery date cannot be in the past.\n- <span style=\"color:red\">  310  </span> :   CWS Ecert Order Expiry Date is not valid\n- <span style=\"color:red\">  311  </span> :   CWS Ecert Order Expiry Date is not valid, for a system-generated date\n- <span style=\"color:red\">  312  </span> :   CWS Ecert Order expiry date cannot be on same date or earlier than delivery date, for a system-generated date.\n- <span style=\"color:red\">  313  </span> :   CWS Ecert Order expiry date cannot be on same date or earlier than delivery date.\n- <span style=\"color:red\">  314  </span> :   CWS Ecert Order Receiving Email is not valid\n- <span style=\"color:red\">  315  </span> :   Retrieved more than one CWS Item\n- <span style=\"color:red\">  316  </span> :   Retrieved more than one CWS Order FF Shipping Type\n- <span style=\"color:red\">  317  </span> :   Number of greeting messages exceeds card quantity\n- <span style=\"color:red\">  318  </span> :   Card ISO required\n- <span style=\"color:red\">  319  </span> :   Serial Number required\n- <span style=\"color:red\">  320  </span> :   Invalid ISO/Serial Number\n- <span style=\"color:red\">  321  </span> :   Customer new password required\n- <span style=\"color:red\">  322  </span> :   Invalid customer login\n- <span style=\"color:red\">  323  </span> :   Invalid customer login/email\n- <span style=\"color:red\">  324  </span> :   CWS Order shopping_cart empty\n- <span style=\"color:red\">  325  </span> :   Selected item(s) are currently out of stock\n- <span style=\"color:red\">  326  </span> :   Login is required\n- <span style=\"color:red\">  327  </span> :   Login is not a valid email address\n- <span style=\"color:red\">  328  </span> :   Invalid customer type\n- <span style=\"color:red\">  329  </span> :   Invalid expiry period\n- <span style=\"color:red\">  330  </span> :   Invalid token\n- <span style=\"color:red\">  331  </span> :   Gift already collected on YYYY-MM-DD HH:MM:SS\n- <span style=\"color:red\">  332  </span> :   Gift expired on YYYY-MM-DD\n- <span style=\"color:red\">  333  </span> :   CWS Bulk Ecert Order delivery method invalid\n- <span style=\"color:red\">  334  </span> :   CWS Bulk Ecert Order delivery ftp address invalid\n- <span style=\"color:red\">  335  </span> :   Customer Address Description required\n- <span style=\"color:red\">  336  </span> :   Customer Address ID required\n- <span style=\"color:red\">  337  </span> :   Invalid site\n- <span style=\"color:red\">  338  </span> :   Invalid address type\n- <span style=\"color:red\">  339  </span> :   Invalid Base points\n- <span style=\"color:red\">  340  </span> :   No customer orders found\n- <span style=\"color:red\">  341  </span> :   Setting favourite order failed\n- <span style=\"color:red\">  342  </span> :   Invalid Card Face ID\n- <span style=\"color:red\">  343  </span> :   Card Face ID required\n- <span style=\"color:red\">  344  </span> :   Preview image required\n- <span style=\"color:red\">  345  </span> :   Finalized print image required\n- <span style=\"color:red\">  346  </span> :   Bad user uploaded image base64 data\n- <span style=\"color:red\">  347  </span> :   Bad preview image base64 data\n- <span style=\"color:red\">  348  </span> :   Bad finalized image base64 data\n- <span style=\"color:red\">  349  </span> :   Error creating new CWS card image record\n- <span style=\"color:red\">  350  </span> :   Error updating CWS card image record\n- <span style=\"color:red\">  351  </span> :   No shipping methods found\n- <span style=\"color:red\">  352  </span> :   Invalid promo offer code\n- <span style=\"color:red\">  353  </span> :   CWS Order activation not allowed\n- <span style=\"color:red\">  354  </span> :   CWS Order already active\n- <span style=\"color:red\">  355  </span> :   CWS Order activation failed\n- <span style=\"color:red\">  356  </span> :   Customer has no access to activate orders\n- <span style=\"color:red\">  357  </span> :   Invalid payment type\n- <span style=\"color:red\">  358  </span> :   Customer ID required\n- <span style=\"color:red\">  359  </span> :   Invalid customer ID\n- <span style=\"color:red\">  360  </span> :   Additional Data missing or invalid\n- <span style=\"color:red\">  361  </span> :   User requesting the customer account update is not found\n- <span style=\"color:red\">  362  </span> :   Social Login is invalid\n- <span style=\"color:red\">  363  </span> :   Customer address already exists\n- <span style=\"color:red\">  364  </span> :   Card description is required\n- <span style=\"color:red\">  365  </span> :   Reload Type is not valid\n- <span style=\"color:red\">  366  </span> :   Reload Frequency is not valid\n- <span style=\"color:red\">  367  </span> :   Reload Amount is not valid\n- <span style=\"color:red\">  368  </span> :   Threshold Amount is not valid\n- <span style=\"color:red\">  369  </span> :   Credit Card Profile ID is not valid\n- <span style=\"color:red\">  370  </span> :   Custom Card Image ID is not valid\n- <span style=\"color:red\">  371  </span> :   Order type not valid for merchant.\n- <span style=\"color:red\">  372  </span> :   Item is not valid.\n- <span style=\"color:red\">  373  </span> :   Invalid Payment Amount.\n- <span style=\"color:red\">  374  </span> :   Online ordering not enabled for store.\n- <span style=\"color:red\">  375  </span> :   Invalid outlet id.\n- <span style=\"color:red\">  376  </span> :   Invalid Items List\n- <span style=\"color:red\">  377  </span> :   Invalid Item ID/SKU Code\n- <span style=\"color:red\">  378  </span> :   Invalid settings level.\n- <span style=\"color:red\">  379  </span> :   Invalid maximum rows\n- <span style=\"color:red\">  380  </span> :   Invalid starting position\n- <span style=\"color:red\">  381  </span> :   Pre-Auth already closed\n- <span style=\"color:red\">  382  </span> :   Payment Plan does not exist\n- <span style=\"color:red\">  383  </span> :   CWS Ecert Order declined - generation merchant is no longer grouped.\n- <span style=\"color:red\">  384  </span> :   Company ABN is required\n- <span style=\"color:red\">  385  </span> :   Company Name is required\n- <span style=\"color:red\">  386  </span> :   Valid Activation Code is required\n- <span style=\"color:red\">  387  </span> :   One and only one of Checkout Order/Shipping Order/Card Number required\n- <span style=\"color:red\">  388  </span> :   No valid promos found\n- <span style=\"color:red\">  389  </span> :   Pending Payment\n- <span style=\"color:red\">  390  </span> :   ERR remaining credit=$99.99\n- <span style=\"color:red\">  391  </span> :   ERR remaining shared balance=$99.99 (with actual balance)\n- <span style=\"color:red\">  392  </span> :   Reverse Sale/Setup Fee failed\n- <span style=\"color:red\">  393  </span> :   Custom Card Image has been removed\n- <span style=\"color:red\">  394  </span> :   Minimum 7 digits is required\n- <span style=\"color:red\">  395  </span> :   Invalid combo item\n- <span style=\"color:red\">  396  </span> :   Item is out of stock\n- <span style=\"color:red\">  397  </span> :   Invalid Bulk Job ID\n- <span style=\"color:red\">  398  </span> :   Duplicate Transactions found\n- <span style=\"color:red\">  399  </span> :   Government Identification cannot be updated while mapped to a card\n- <span style=\"color:red\">  400  </span> :   Phone Number cannot be updated while mapped to a card\n- <span style=\"color:red\">  401  </span> :   Invalid Table Number\n- <span style=\"color:red\">  402  </span> :   Invalid pickup template\n- <span style=\"color:red\">  403  </span> :   Balance of card is not up to date.\n- <span style=\"color:red\">  404  </span> :   Invalid CWS Skin.\n- <span style=\"color:red\">  405  </span> :   CWS Skin is not active.\n- <span style=\"color:red\">  406  </span> :   Invalid IP address\n- <span style=\"color:red\">  407  </span> :   New password must be different than existing password\n- <span style=\"color:red\">  408  </span> :   Transfer Type not valid\n- <span style=\"color:red\">  409  </span> :   Insufficient funds on ticket\n- <span style=\"color:red\">  410  </span> :   Insufficient funds in Patron Account\n- <span style=\"color:red\">  411  </span> :   Certificate is a shared coupon and is restricted from registration\n- <span style=\"color:red\">  412  </span> :   Invalid performance\n- <span style=\"color:red\">  413  </span> :   Invalid phone number\n- <span style=\"color:red\">  414  </span> :   Shipping option can only deliver to physical addresses.\n- <span style=\"color:red\">  415  </span> :   Temporary error. Please retry.\n- <span style=\"color:red\">  416  </span> :   Invalid Wallet Platform\n- <span style=\"color:red\">  426  </span> :   Payment due is negative, please re-input purchase details\n- <span style=\"color:red\">  435  </span> :   Ticket can be redeemed after this date only: 01/20/2020. bal=$99.99 (with actual data and balance)\n- <span style=\"color:red\">  442  </span> :   Invalid Promotional offer name\n- <span style=\"color:red\">  443  </span> :   Promotional offer name is not unique\n- <span style=\"color:red\">  444  </span> :   Promotional offer name does not exist\n- <span style=\"color:red\">  445  </span> :   Promotional offer key limit must be a number with no decimal\n- <span style=\"color:red\">  446  </span> :   Invalid Promotional offer key limit\n- <span style=\"color:red\">  447  </span> :   Promotional offer key limit must be a number\n- <span style=\"color:red\">  448  </span> :   Invalid Promotional offer arguments\n- <span style=\"color:red\">  449  </span> :   This code is already present: 10001 (with actual offer code)\n- <span style=\"color:red\">  455  </span> :   Event Date is not valid\n- <span style=\"color:red\">  456  </span> :   Event Promotion is not valid\n"
          enum:
            - '100'
            - '101'
            - '102'
            - '103'
            - '104'
            - '105'
            - '106'
            - '107'
            - '108'
            - '109'
            - '110'
            - '111'
            - '112'
            - '113'
            - '114'
            - '115'
            - '116'
            - '117'
            - '118'
            - '119'
            - '120'
            - '121'
            - '122'
            - '123'
            - '124'
            - '125'
            - '126'
            - '127'
            - '128'
            - '129'
            - '130'
            - '131'
            - '132'
            - '133'
            - '134'
            - '135'
            - '136'
            - '137'
            - '138'
            - '139'
            - '140'
            - '141'
            - '142'
            - '143'
            - '144'
            - '145'
            - '146'
            - '147'
            - '149'
            - '150'
            - '151'
            - '152'
            - '153'
            - '154'
            - '155'
            - '156'
            - '157'
            - '158'
            - '159'
            - '160'
            - '161'
            - '162'
            - '163'
            - '170'
            - '175'
            - '176'
            - '177'
            - '178'
            - '179'
            - '180'
            - '181'
            - '182'
            - '183'
            - '184'
            - '190'
            - '191'
            - '201'
            - '202'
            - '203'
            - '204'
            - '210'
            - '999'
            - '0NB'
            - '0GB'
            - '0DB'
            - '0RB'
            - '0EB'
            - '000'
            - '001'
            - '002'
            - '003'
            - '004'
            - '005'
            - '006'
            - '007'
            - '008'
            - '010'
            - '011'
            - '012'
            - '013'
            - '014'
            - '015'
            - '019'
            - '021'
            - '028'
            - '034'
            - '039'
            - '041'
            - '043'
            - '051'
            - '052'
            - '053'
            - '054'
            - '055'
            - '057'
            - '058'
            - '059'
            - '061'
            - '062'
            - '063'
            - '065'
            - '075'
            - '076'
            - '077'
            - '078'
            - '079'
            - '080'
            - '081'
            - '082'
            - '083'
            - '085'
            - '086'
            - '091'
            - '092'
            - '093'
            - '094'
            - '096'
            - '0A1'
            - '0A2'
            - '0A3'
            - '0B1'
            - '0B2'
            - '0CV'
            - '0D3'
            - '0E1'
            - '0E2'
            - '0E3'
            - '0EA'
            - '0EC'
            - '0HV'
            - '0K0'
            - '0K1'
            - '0K2'
            - '0K3'
            - '0M0'
            - '0N3'
            - '0N4'
            - '0N7'
            - '0R0'
            - '0R1'
            - '0T0'
            - '0T1'
            - '0T2'
            - '0T3'
            - '0T4'
            - '0T5'
            - '0T6'
            - '0T7'
            - '0V1'
            - '148'
            - '166'
            - '167'
            - '168'
            - '169'
            - '171'
            - '172'
            - '173'
            - '174'
            - '185'
            - '186'
            - '187'
            - '188'
            - '189'
            - '192'
            - '193'
            - '194'
            - '195'
            - '196'
            - '197'
            - '198'
            - '199'
            - '200'
            - '205'
            - '206'
            - '207'
            - '208'
            - '209'
            - '211'
            - '212'
            - '213'
            - '214'
            - '215'
            - '216'
            - '217'
            - '218'
            - '219'
            - '220'
            - '221'
            - '222'
            - '223'
            - '224'
            - '225'
            - '226'
            - '227'
            - '228'
            - '231'
            - '232'
            - '233'
            - '234'
            - '235'
            - '236'
            - '237'
            - '238'
            - '239'
            - '240'
            - '241'
            - '242'
            - '243'
            - '244'
            - '245'
            - '246'
            - '247'
            - '248'
            - '249'
            - '250'
            - '251'
            - '252'
            - '253'
            - '254'
            - '255'
            - '256'
            - '257'
            - '258'
            - '259'
            - '260'
            - '261'
            - '262'
            - '263'
            - '264'
            - '265'
            - '266'
            - '267'
            - '268'
            - '269'
            - '270'
            - '271'
            - '272'
            - '273'
            - '274'
            - '275'
            - '276'
            - '277'
            - '278'
            - '279'
            - '280'
            - '281'
            - '282'
            - '283'
            - '284'
            - '285'
            - '286'
            - '287'
            - '288'
            - '289'
            - '290'
            - '291'
            - '292'
            - '293'
            - '294'
            - '295'
            - '296'
            - '297'
            - '298'
            - '299'
            - '300'
            - '302'
            - '303'
            - '304'
            - '305'
            - '306'
            - '307'
            - '308'
            - '309'
            - '310'
            - '311'
            - '312'
            - '313'
            - '314'
            - '315'
            - '316'
            - '317'
            - '318'
            - '319'
            - '320'
            - '321'
            - '322'
            - '323'
            - '324'
            - '325'
            - '326'
            - '327'
            - '328'
            - '329'
            - '330'
            - '331'
            - '332'
            - '333'
            - '334'
            - '335'
            - '336'
            - '337'
            - '338'
            - '339'
            - '340'
            - '341'
            - '342'
            - '343'
            - '344'
            - '345'
            - '346'
            - '347'
            - '348'
            - '349'
            - '350'
            - '351'
            - '352'
            - '353'
            - '354'
            - '355'
            - '356'
            - '357'
            - '358'
            - '359'
            - '360'
            - '361'
            - '362'
            - '363'
            - '364'
            - '365'
            - '366'
            - '367'
            - '368'
            - '369'
            - '370'
            - '371'
            - '372'
            - '373'
            - '374'
            - '375'
            - '376'
            - '377'
            - '378'
            - '379'
            - '380'
            - '381'
            - '382'
            - '383'
            - '384'
            - '385'
            - '386'
            - '387'
            - '388'
            - '389'
            - '390'
            - '391'
            - '392'
            - '393'
            - '394'
            - '395'
            - '396'
            - '397'
            - '398'
            - '399'
            - '400'
            - '401'
            - '402'
            - '403'
            - '404'
            - '405'
            - '406'
            - '407'
            - '408'
            - '409'
            - '410'
            - '411'
            - '412'
            - '413'
            - '414'
            - '415'
            - '416'
            - '426'
            - '435'
            - '442'
            - '443'
            - '444'
            - '445'
            - '446'
            - '447'
            - '448'
            - '449'
            - '455'
            - '456'
        ErrorText:
          type: string
          description: The Netevia error text response to describe the error of the transaction.
          example: APPROVAL
        ResultCode:
          type: string
          description: The Netevia response to a string number to indicate the status of the transaction.
          example: '000'
        ResultText:
          type: string
          description: The Netevia response to a message to describe the status of the transaction.
          example: APPROVAL
        AVSResultCode:
          type: string
          description: If address verification requested, address verification result code returned by the Issuer.
          example: M
        CVVResultCode:
          type: string
          description: If card verification value was provided in the request, card verification value result code provided by the Issuer.
          example: M
        DeviceResultCode:
          type: string
          description: Receipt return code.
          example: '100'
        DeviceResultText:
          type: string
          description: Receipt return text.
          example: Successful
      description: |
        Result Group.
    grp_responseRef:
      type: object
      properties:
        AuthDate:
          type: string
          description: Auth date.
        AuthTime:
          type: string
          description: Auth time.
        NewRecordCreated:
          type: string
          description: New recorded created.
          enum:
            - 'Y'
            - 'N'
        SESSIONID:
          type: string
          description: session id.
        TransactionIdentifier:
          type: string
          description: Transaction Identifier.
      description: |
        Response References Group.
    grp_responseMerchant:
      type: object
      properties:
        MerchantAddr:
          type: string
          description: Merchant address.
        MerchantCity:
          type: string
          description: Merchant city.
        MerchantName:
          type: string
          description: Merchant name.
        MerchantPhoneNum:
          type: string
          description: Merchant phone number.
        MerchantState:
          type: string
          description: Merchant state.
        MerchantZip:
          type: string
          description: Merchant zip.
        ProcessorID:
          type: string
          description: Merchant processor ID.
      description: |
        Response Merchant Group.
    grp_responseAmount:
      type: object
      properties:
        AuthAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Approval amout.<br>
            Total digits = 12
          format: int64
          example: 10000
        TipAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            Approved tip amout.<br>
            Total digits = 12
          format: int64
          example: 1000
        BalanceAmt:
          maximum: 999999999999
          minimum: 0
          type: integer
          description: |
            If supplied from the Issuer, the available balance on the associated prepaid, EBT, or gift card.<br>
            Total digits = 12
          format: int64
          example: 10000
      description: |
        Response Amount Group.
    grp_responseCardInfo:
      type: object
      properties:
        Medium:
          type: string
          description: |
            Card Type.
          example: Credit
          enum:
            - Credit
            - Debit
            - EBTFood
            - EBTCash
            - Prepaid
            - Gift
            - ElectronickCheck
        Brand:
          type: string
          description: |
            Card Brand.
          example: Credit
          enum:
            - Visa
            - MasterCard
            - Discover
            - Amex
            - JCB
            - DinersClub
        AccountNum:
          maxLength: 22
          type: string
          description: |
            Masked Card number(first six and last 4 digits).<br>
            Maximum length = 22
          example: 476173******1133
        CardToken:
          maxLength: 32
          minLength: 32
          type: string
          description: |
            Card token.<br>
            Set RequestCardToken to 'Y' in the request for the server to return it.
          example: 18c9c75f28a04538939112fb109702fb
        ExpDate:
          maxLength: 4
          type: string
          description: |
            Card expiration Date MMYY.
          example: '1250'
        HolderName:
          type: string
          description: Cardholder's name from an EMV Card or from the Track1 of the magnetic stripe(for swipe with Track1).
          example: John Doe
        Track1:
          type: string
          description: |
            Only returned for "CardRead" requests using Gift cards. Full magnetic Track I data read from a Gift Card using a card reader.
          example: MerchantNameGiftCard
        Track2:
          type: string
          description: |
            Only returned for "CardRead" requests using Gift cards. Full magnetic Track II data read from a Gift Card using a card reader.
          example: '1234567890'
        Track3:
          type: string
          description: |
            Only returned for "CardRead" requests using Gift cards. Full magnetic Track III data read from a Gift Card using a card reader.
          example: $100
      description: |
        Response Card Info Group.
    grp_responseTerminalInfo:
      type: object
      properties:
        SN:
          type: string
          description: |
            Pin pad’s serial number. The last 8 digit of full serial number.<br>
            Valid values:<br>
            Full serial number: 14281PP81035776,<br>
            Last 8 digit of serial number: 81035776
          example: '81035776'
        DeviceStatus:
          type: string
          description: Pin pad status.
          example: 'true'
          enum:
            - 'true'
            - 'false'
            - BUSY
        SignatureData:
          type: string
          description: |
            Only supported in Local and Cloud PDC.<br>
            SignatureData HEX encoded: <a href="https://gatewayapidocs.netevia.com/images/docs/PaymentDevices/Ingenico/Tetra/Signature/IngenicoThree-Byte ASCII Signature Format.pdf" >ASCII with 3-Byte ASCII Signature Format</a>
      description: |
        Request Terminal Info. Group
    grp_responseEMV:
      type: object
      properties:
        AID:
          type: string
          description: Application Identifier
        ARQC:
          type: string
          description: Authorization Request Cryptogram
        ApplicationLabel:
          type: string
          description: Application Label
        ATC:
          type: string
          description: Application Transaction Counter
        TSI:
          type: string
          description: Transaction Status Information
        EMV72:
          type: string
          description: Issuer Script Template 2
        EMV8A:
          type: string
          description: Authorisation Response Code
        EMV91:
          type: string
          description: Issuer Authentication Data
      description: |
        Response EMV Info.<br>
        Please Note that not all cards return these information, depending on the card, we may only return some of them.
    requestGeneric:
      type: object
      allOf:
        # - $ref: '#/components/schemas/grp_configure'
        # - $ref: '#/components/schemas/grp_action'
        - anyOf:
            - $ref: '#/components/schemas/grp_amount'
            - $ref: '#/components/schemas/grp_extendInfo'
            - $ref: '#/components/schemas/grp_Lvl3'
            - $ref: '#/components/schemas/grp_trace'
            - $ref: '#/components/schemas/grp_cardInfo'
            - $ref: '#/components/schemas/grp_EMV'
            - $ref: '#/components/schemas/grp_cardDataEncryption'
            - $ref: '#/components/schemas/grp_PIN'
            - $ref: '#/components/schemas/grp_ACH'
    requestGenericPDC:
      type: object
      allOf:
        # - $ref: '#/components/schemas/grp_configure'
        # - $ref: '#/components/schemas/grp_action'
        # - $ref: '#/components/schemas/grp_action_extra_PDC'
        - anyOf:
            - $ref: '#/components/schemas/grp_amount'
            - $ref: '#/components/schemas/grp_amount_extra_PDC'
            - $ref: '#/components/schemas/grp_extendInfo'
            - $ref: '#/components/schemas/grp_Lvl3'
            - $ref: '#/components/schemas/grp_trace'
            - $ref: '#/components/schemas/grp_cardInfo'
            - $ref: '#/components/schemas/grp_terminalInfo'
            - $ref: '#/components/schemas/grp_EMV'
            - $ref: '#/components/schemas/grp_cardDataEncryption'
            - $ref: '#/components/schemas/grp_PIN'
            - $ref: '#/components/schemas/grp_ACH'
    responseGeneric:
      type: object
      allOf:
        # - $ref: '#/components/schemas/grp_configure'
        # - $ref: '#/components/schemas/grp_result'
        - anyOf:
            - $ref: '#/components/schemas/grp_trace'
            - $ref: '#/components/schemas/grp_responseAmount'
            - $ref: '#/components/schemas/grp_responseCardInfo'
            - $ref: '#/components/schemas/grp_responseEMV'
            - $ref: '#/components/schemas/grp_responseRef'
            - $ref: '#/components/schemas/grp_responseMerchant'
    responseGenericPDC:
      type: object
      allOf:
        # - $ref: '#/components/schemas/grp_configure'
        # - $ref: '#/components/schemas/grp_result'
        - anyOf:
            - $ref: '#/components/schemas/grp_trace'
            - $ref: '#/components/schemas/grp_responseAmount'
            - $ref: '#/components/schemas/grp_responseCardInfo'
            - $ref: '#/components/schemas/grp_responseTerminalInfo'
            - $ref: '#/components/schemas/grp_responseEMV'
            - $ref: '#/components/schemas/grp_responseRef'
            - $ref: '#/components/schemas/grp_responseMerchant'
  examples:
    ex_req_Sale_Basic:
      summary: Basic Sale
      description: Standard basic Sale request with Card Info from POS
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "Medium": "Credit",
          "AccountNum": "4788250000028291",
          "ExpDate": "1250",
          "MainAmt": "1001",
          "EntryMode": "Manual",
          "InvoiceNum":"E2TV2SHM"        }
    ex_rep_Sale_Basic:
      summary: Basic Sale
      description: Standard basic Sale reply with Card Info from POS
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "1213",
          "AuthCode": "TAS110",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS110 ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "1b9d6a04dab84eda9aacc051c1e10ac6",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS110 ",
          "Status": "success"
        }
    ex_req_Sale_Basic_NewGTRC:
      summary: Basic Sale With NewGTRC
      description: Standard basic Sale request with Card Info from POS
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "Medium": "Credit",
          "AccountNum": "4788250000028291",
          "NewGTRC": "1b9d6a04dab84eda9aacc051c1e10ac6",
          "ExpDate": "1250",
          "MainAmt": "1001",
          "TipAmt": "212",
          "IncTaxAmt": "153",
          "EntryMode": "Manual",
          "InvoiceNum":"E2TV2SHM"
        }
    ex_rep_Sale_Basic_NewGTRC:
      summary: Basic Sale With NewGTRC
      description: Standard basic Sale reply with Card Info from POS
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "1213",
          "AuthCode": "TAS110",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS110 ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "1b9d6a04dab84eda9aacc051c1e10ac6",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS110 ",
          "Status": "success"
        }
    ex_req_Sale_Commercial_Card_Lvl2_Elavon:
      summary: Purchasing Card transaction(Elavon)
      description: |
        Purchase Level2 transaction.   


        <font color="red">***Warning:</font> The below fields are mandatory for Purchase Level2 transactions with commercial cards. If they are missing the transactions are going to be downgraded.   
        - CommercialCard
        - CustomerNum
        - IncTaxAmt
        - InvoiceNum (REQUIRED on Card NOT Present)
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "Medium": "Credit",
          "EntryMode": "Swipe",
          "Track2": "4012000098765439=20121011796251900000",
          "CommercialCard": "Y",
          "CustomerNum": "54391912041200",
          "MainAmt": "10000",
          "IncTaxAmt": "1500",
          "InvoiceNum": "TICKET AG1234"
        }
    ex_rep_Sale_Commercial_Card_Lvl2_Elavon:
      summary: Purchasing Card transaction(Elavon)
      description: Purchase Level2 transaction
      value: |
        {
          "AVSResultCode": "0",
          "AccountNum": "401200******5439",
          "AuthAmt": "10000",
          "AuthCode": "TAS629",
          "AuthDate": "20191203",
          "AuthTime": "193655",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS629 ",
          "ExpDate": "1220",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "7d61c3d5245c4422941344d06c3f889b",
          "MainAmt": "10000",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS629 ",
          "ResultCode": "000",
          "ResultText": "APPROVAL TAS629 ",
          "SESSIONID": "Web{ab2d2726-6afc-4b16-b8c2-14bffa27db51}_1575419813188",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale",
          "TransactionIdentifier": "000000000355784"
        }    
    ex_req_Sale_Commercial_Card_Lvl2_FDC:
      summary: Purchasing Card transaction(First Data)
      description: |
        Purchase Level2 transaction.   


        <font color="red">***Warning:</font> The below fields are mandatory for Purchase Level2 transactions with commercial cards. If they are missing the transactions are going to be downgraded.   
        - CommercialCard
        - CustomerNum
        - IncTaxAmt
        - TaxIndicator
        - OrderNum
        - TaxId (MasterCard/Maestro only)
        - ProductInfo (Amex only)
        - InvoiceNum
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "Medium": "Credit",
          "EntryMode": "Swipe",
          "Track2": "4012000098765439=20121011796251900000",
          "CommercialCard": "Y",
          "CustomerNum": "54391912041200",
          "MainAmt": "10000",
          "IncTaxAmt": "1500",
          "TaxIndicator": "Prvded",
          "OrderNum": "ORDER AG1234",
          "TaxId": "MC/Maestro",
          "ProductInfo": "PAPER",
          "InvoiceNum": "TICKET AG1234"
        }
    ex_rep_Sale_Commercial_Card_Lvl2_FDC:
      summary: Purchasing Card transaction(First Data)
      description: Purchase Level2 transaction
      value: |
        {
          "AVSResultCode": "0",
          "AccountNum": "401200******5439",
          "AuthAmt": "10000",
          "AuthCode": "TAS629",
          "AuthDate": "20191203",
          "AuthTime": "193655",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS629 ",
          "ExpDate": "1220",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "7d61c3d5245c4422941344d06c3f889b",
          "MainAmt": "10000",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS629 ",
          "ResultCode": "000",
          "ResultText": "APPROVAL TAS629 ",
          "SESSIONID": "Web{ab2d2726-6afc-4b16-b8c2-14bffa27db51}_1575419813188",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale",
          "TransactionIdentifier": "000000000355784"
        }    
    ex_req_Sale_Commercial_Card_Lvl2_TSYS:
      summary: Purchasing Card transaction(TSYS)
      description: |
        Purchase Level2 transaction.   
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "Medium": "Credit",
          "EntryMode": "Swipe",
          "Track2":"4012000098765439=20121011796251900000",
          "CommercialCard": "Y",
          "MainAmt": "1200",
          "LocalTaxIncludedFlag": "0",
          "InvoiceNum":"E2TV2SHM"
        }
    ex_rep_Sale_Commercial_Card_Lvl2_TSYS:
      summary: Purchasing Card transaction(TSYS)
      description: Purchase Level2 transaction
      value: |
        {
          "AVSResultCode": "0",
          "AccountNum": "401200******5439",
          "AuthAmt": "1200",
          "AuthCode": "TAS678",
          "AuthDate": "20200324",
          "AuthTime": "210331",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS678 ",
          "ExpDate": "1220",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "76dc7bf94f4c48a5982f6ebb76537c72",
          "MainAmt": "1200",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS678 ",
          "ResultCode": "000",
          "ResultText": "APPROVAL TAS678 ",
          "SESSIONID": "Web{d4d7b66f-0a21-4b76-8dc2-70fd5e2ce850}_1585098208373",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale",
          "TransactionIdentifier": "000000000371083"
        }
    ex_req_Sale_Commercial_Card_Lvl3_TSYS:
      summary: Purchasing Card Lvl3 transaction(TSYS)
      description: |
        Purchase Level3 transaction.   
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType":"Sale",
          "Medium":"Credit",
          "CommercialCard":"Y",
          "CommercialL3":"Y",
          "EntryMode":"Swipe",
          "Track2":";4012000098765439=20121011796251900000?",
          "MainAmt":"1203",
          "OrderDate":"190303",
          "LocalTaxIncludedFlag":"2",
          "NationalTaxAmt":"0",
          "BusinessRefNum":"M12345678",
          "CustomerRefNum":"C1234",
          "SummaryCommodityCode":"COMC",
          "DestZIPCode":"85284",
          "ShipZIP":"85284",
          "DestContryCode":"840",
          "InvoiceNum":"3434343434343",
          "ItemCount":"1",
          "Item1":"{\"ItemCommodityCode\":\"UPC 1\",\"ItemDescription\":\"VI ITEM 1\",\"ItemProductionCode\":\"MATERIAL 1\",\"ItemQuantity\":\"10000\",\"ItemUnit\":\"EAC\",\"ItemUnitCost\":\"53\",\"ItemTaxAmt\":\"0\",\"ItemTaxRate\":\"0\",\"ItemTotalAmt\":\"53\"}"    
        }
    ex_rep_Sale_Commercial_Card_Lvl3_TSYS:
      summary: Purchasing Card Lvl3 transaction(TSYS)
      description: Purchase Level3 transaction
      value: |
        {
          "AVSResultCode": "0",
          "AccountNum": "401200******5439",
          "AuthAmt": "1203",
          "AuthCode": "TAS689",
          "AuthDate": "20200324",
          "AuthTime": "210441",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS689 ",
          "ExpDate": "1220",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "8346da625de344019e28bdc2e0756943",
          "MainAmt": "1203",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS689 ",
          "ResultCode": "000",
          "ResultText": "APPROVAL TAS689 ",
          "SESSIONID": "Web{2547d5cc-cb41-41f8-9cca-dddfbd947cbb}_1585098278247",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale",
          "TransactionIdentifier": "000000000371098"
        } 
    ex_req_Sale_Commercial_Card_Lvl3_Elavon:
      summary: Purchasing Card Lvl3 transaction(Elavon)
      description: |
        Purchase Level3 transaction Elavon.   
      value: |
        {
          "GMID": "2001008990",
          "GTID": "GT3010024077",
          "GMPW": "GMPW3010027013",
          "TransType":"Sale",
          "Medium":"Credit",
          "CommercialCard":"Y",
          "CommercialL3":"Y",
          "AllowsPartialAuth":"Y",
          "NeedSwipeCard":"N",
          "EntryMode":"Swipe",
          "Track2":"5413330089020037=251210100000",
          "MainAmt":"362000",
          "IncTaxAmt":"30650",
          "OrderDate":"210201",
          "BusinessRefNum":"Merchant VAT xyz1230",
          "CustomerRefNum":"ALRP&A1N1G6E8F7",
          "CustomerNum":"ALRP&A1N1G6E8F7",
          "CustomerAddress":"1041 Center Avenue",
          "CustomerZipCode":"93721",
          "LocalTaxIncludedFlag":"1",
          "NationalTaxAmt":"0",
          "DestZIPCode":"93721",
          "ShipZIP":"37920",
          "DestContryCode":"840",
          "InvoiceNum":"IUON-3923571976",
          "ItemCount":"6",
          "Item1":"{\"ItemCommodityCode\":\"WGT000001\",\"ItemDescription\":\"WIDGET_SMALL\",\"ItemProductionCode\":\"WGT000001\",\"ItemQuantity\":\"50\",\"ItemUnit\":\"OZ\",\"ItemUnitCost\":\"12500\",\"DebitCreditIndicator\":\"D\",\"ItemTaxIndicator\":\"Y\",\"ItemTaxAmt\":\"529\",\"ItemTaxRate\":\"0925\",\"DiscountIndicatorFlag\":\"N\",\"ItemTotalAmt\":\"6250\"}",
          "Item2":"{\"ItemCommodityCode\":\"WGT000002\",\"ItemDescription\":\"WIDGET_MEDIUM\",\"ItemProductionCode\":\"WGT000002\",\"ItemQuantity\":\"50\",\"ItemUnit\":\"LB\",\"ItemUnitCost\":\"000000046125\",\"DebitCreditIndicator\":\"D\",\"ItemTaxIndicator\":\"Y\",\"ItemTaxAmt\":\"1953\",\"ItemTaxRate\":\"0925\",\"DiscountIndicatorFlag\":\"N\",\"ItemTotalAmt\":\"23063\"}",
          "Item3":"{\"ItemCommodityCode\":\"WGT000003\",\"ItemDescription\":\"WIDGET_LARGE\",\"ItemProductionCode\":\"WGT000003\",\"ItemQuantity\":\"50\",\"ItemUnit\":\"SQFT\",\"ItemUnitCost\":\"000000115375\",\"DebitCreditIndicator\":\"D\",\"ItemTaxIndicator\":\"Y\",\"ItemTaxAmt\":\"4884\",\"ItemTaxRate\":\"0925\",\"DiscountIndicatorFlag\":\"N\",\"ItemTotalAmt\":\"57688\"}",
          "Item4":"{\"ItemCommodityCode\":\"SRV000004\",\"ItemDescription\":\"WIDGET_XLG\",\"ItemProductionCode\":\"SRV000004\",\"ItemQuantity\":\"5\",\"ItemUnit\":\"TON\",\"ItemUnitCost\":\"000000543125\",\"DebitCreditIndicator\":\"D\",\"ItemTaxIndicator\":\"Y\",\"ItemTaxAmt\":\"2299\",\"ItemTaxRate\":\"0925\",\"DiscountIndicatorFlag\":\"N\",\"ItemTotalAmt\":\"000000027156\"}",
          "Item5":"{\"ItemCommodityCode\":\"FRM000001\",\"ItemDescription\":\"FRAME_ASSY\",\"ItemProductionCode\":\"FRM000001\",\"ItemQuantity\":\"1\",\"ItemUnit\":\"EA\",\"ItemUnitCost\":\"000017390000\",\"DebitCreditIndicator\":\"D\",\"ItemTaxIndicator\":\"Y\",\"ItemTaxAmt\":\"14211\",\"ItemTaxRate\":\"0925\",\"DiscountIndicatorFlag\":\"Y\",\"ItemDiscount\":\"6056\",\"ItemTotalAmt\":\"000000167844\"}",
          "Item6":"{\"ItemCommodityCode\":\"SRV000001\",\"ItemDescription\":\"SERVICE\",\"ItemProductionCode\":\"SRV000001\",\"ItemQuantity\":\"4\",\"ItemUnit\":\"HR\",\"ItemUnitCost\":\"2000000\",\"DebitCreditIndicator\":\"D\",\"ItemTaxIndicator\":\"Y\",\"ItemTaxAmt\":\"6773\",\"ItemTaxRate\":\"0925\",\"DiscountIndicatorFlag\":\"N\",\"ItemTotalAmt\":\"80000\"}"
        }
    ex_rep_Sale_Commercial_Card_Lvl3_Elavon:
      summary: Purchasing Card Lvl3 transaction(Elavon)
      description: Purchase Level3 transaction Elavon
      value: |
        {
          "AVSResultCode": "U",
          "AccountNum": "541333******0037",
          "AuthAmt": "362000",
          "AuthCode": "147101",
          "AuthDate": "20210202",
          "AuthTime": "143934",
          "Brand": "Master",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL",
          "ExpDate": "1225",
          "GMID": "2001008990",
          "GMPW": "GMPW3010027013",
          "GTID": "GT3010024077",
          "GTRC": "426c580e51f24740bddffb03392a1698",
          "MainAmt": "362000",
          "Medium": "Credit",
          "MerchantAddr": "state1",
          "MerchantCity": "Phoenix",
          "MerchantName": "ELAVON",
          "MerchantPhoneNum": "9282032000",
          "MerchantState": "AZ",
          "MerchantZip": "85008",
          "NewRecordCreated": "Y",
          "ProcessorID": "40201",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "ResultCode": "000",
          "ResultText": "APPROVAL",
          "SESSIONID": "Web{ec3a719c-436d-4ac6-b501-0eb27d2f6621}_1612294772667",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale"
        } 
    ex_req_Sale_Offline:
      summary: Offline Sale
      description: Offline Sale request
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AllowsPartialAuth": "N",
          "MainAmt": "1000",
          "TipAmt": "200",
          "InvoiceNum": "000005",
          "AuthCode": "123456",
          "TransType": "Sale",
          "IsOffline": "Y",
          "SourceTraceNum": "000005",
          "Medium": "Credit",
          "AccountNum": "4788250000028291",
          "ExpDate": "1250",
          "EntryMode": "Manual"
        }
    ex_rep_Sale_Offline:
      summary: Offline Sale
      description: Offline Sale reply
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "1200",
          "AuthCode": "123456",
          "Brand": "Visa",
          "EntryMode": "Swipe",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "21d3bc44239a498db5f2b8604c015e80",
          "Medium": "Credit",
          "ResponseCode": "0",
          "ResponseText": "Success",
          "Status": "success"
        }
    ex_req_Auth_Basic:
      summary: Basic Auth
      description: Standard basic Auth request with Card Info from POS
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AllowsPartialAuth": "N",
          "TransType": "Auth",
          "Medium": "Credit",
          "AccountNum": "4788250000028291",
          "ExpDate": "1250",
          "MainAmt": "500",
          "EntryMode": "Manual",
          "IsOffline": "N",
          "InvoiceNum":"E2TV2SHM"
        }
    ex_rep_Auth_Basic:
      summary: Basic Auth
      description: Standard basic Auth reply with Card Info from POS
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "500",
          "AuthCode": "37986A",
          "Brand": "Visa",
          "EntryMode": "Manual",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "f83cd5bb63a54f0abefd9f2bb4bd8312",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "Status": "success"
        }
    ex_req_Finalize:
      summary: Finalize
      description: |
        Standard Finalise request.<br>
        **The value of the <font color="red">'GTRC'</font> must be the one returned in the 'Auth' reply.**
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "2324f5e36253423fac2f18640ce4a4de",
          "TransType": "Finalize"
        }
    ex_rep_Finalize:
      summary: Finalize
      description: Standard Finalize reply
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "0",
          "AuthDate": "20200320",
          "AuthTime": "042745",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "SUCCESS",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "2324f5e36253423fac2f18640ce4a4de",
          "MainAmt": "500",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "N",
          "PrevGTRC": "2324f5e36253423fac2f18640ce4a4de",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "SUCCESS",
          "ResultCode": "000",
          "ResultText": "SUCCESS",
          "SESSIONID": "Web{dff738ca-b9b9-4276-b286-d85eedb6fec3}_1584692864122",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Finalize"
        }
    ex_req_Verify_Basic:
      summary: Verify
      description: Standard basic Verify request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Verify",
          "Medium": "Credit",
          "AccountNum": "4012000098765439",
          "ExpDate": "1220",
          "CVVNum": "999",
          "CustomerAddress": "8320",
          "CustomerZipCode": "85284",
          "EntryMode": "Manual"
        }
    ex_rep_Verify_Basic:
      summary: Verify
      description: Standard basic Verify reply.
      value: |
        {
          "AVSResultCode": "Y",
          "AccountNum": "401200******5439",
          "AuthAmt": "0",
          "AuthCode": "PREATH",
          "AuthDate": "20200305",
          "AuthTime": "170700",
          "Brand": "Visa",
          "CVVResultCode": "M",
          "ErrorCode": "000",
          "ErrorText": "EXACT MATCH     ",
          "ExpDate": "1220",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "1929e229e017446a8f6fc8648812f0ea",
          "MainAmt": "0",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "EXACT MATCH     ",
          "ResultCode": "000",
          "ResultText": "EXACT MATCH     ",
          "SESSIONID": "Web{899c11cb-83c3-4c18-9e25-c348352af9df}_1583446017860",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Verify",
          "TransactionIdentifier": "000000000007082"        
        }
    ex_req_Inquiry_Basic:
      summary: Basic Inquiry
      description: Standard basic Inquiry request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AllowsPartialAuth": "N",
          "TransType": "Inquiry",
          "Medium": "Credit",
          "AccountNum": "4788250000028291",
          "ExpDate": "1250",
          "EntryMode": "Manual",
          "IsOffline": "N"
        }
    ex_rep_Inquiry_Basic:
      summary: Basic Inquiry
      description: Standard basic Inquiry reply.
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "0",
          "AuthCode": "37986A",
          "Brand": "Visa",
          "EntryMode": "Manual",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "f83cd5bb63a54f0abefd9f2bb4bd8312",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "000000443322",
          "Status": "success"
        }
    ex_req_GetTransInfo_Basic:
      summary: Basic GetTransInfo
      description: Standard basic GetTransInfo request.
      value: |
        {
          "GMID":"2001008149",
          "GTID": "GT3010023905", 
          "GMPW": "GMPW3010026163",
          "TransType": "GetTransInfo",
          "GTRC":"915c8f382eae4a50a37a0e10abde1687"
        }
    ex_rep_GetTransInfo_Basic:
      summary: Basic GetTransInfo
      description: Standard basic GetTransInfo reply.
      value: |
        {
          "AVSResultCode": "Y",
          "AccountNum": "478825******8291",
          "AuthAmt": "312",
          "AuthCode": "TAS774",
          "AuthDate": "20191203",
          "AuthTime": "231010",
          "Brand": "Visa",
          "ErrorCode": "100",
          "ErrorText": "EXACT MATCH     ",
          "ExpDate": "1250",
          "GMID": "2001008149",
          "MainAmt": "100",
          "Medium": "Credit",
          "NewRecordCreated": "N",
          "PrevGTRC": "915c8f382eae4a50a37a0e10abde1687",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "EXACT MATCH     ",
          "ResultCode": "100",
          "ResultText": "EXACT MATCH     ",
          "SESSIONID": "Web{1e876b41-e18e-4fbd-938a-90bd2407d064}_1575432610310",
          "Status": "success",
          "TipAmt": "212",
          "TransType": "GetTransInfo"
        }
    ex_req_GetTransInfo_InvoiceNum:
      summary: GetTransInfo by Invoice Number
      description: GetTransInfo request by using Invoice Number as reference.
      value: |
        {
          "GMID":"1001396250",
          "GTID": "GT3010023905", 
          "GMPW": "GMPW3010024557",
          "TransType": "GetTransInfo",
          "InvoiceNum":"Ttest"
        }
    ex_rep_GetTransInfo_InvoiceNum:
      summary: GetTransInfo by Invoice Number
      description: GetTransInfo request by using Invoice Number as reference.
      value: |
        {
          "AuthDate": "20230111",
          "AuthTime": "152734",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "GMID": "1001396250",
          "Medium": "UnknownCard",
          "NewRecordCreated": "N",
          "ProcessorID": "32518",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "SESSIONID": "Web{e72a2681-f294-4dd8-89a9-c8671582edc6}_1673468854199",
          "Status": "success",
          "TransactionList": "[\n    {\n        \"AVSResultCode\": \"0\",\n        \"AccountNum\": \"401200******5439\",\n        \"AuthAmt\": \"\",\n        \"AuthCode\": \"TAS312\",\n        \"AuthDate\": \"20220125\",\n        \"AuthTime\": \"230230\",\n        \"Brand\": \"Visa\",\n        \"CVVResultCode\": \"\",\n        \"ExpDate\": \"0923\",\n        \"GTRC\": \"03a9184db5cd432fa80e9b4d39159a91\",\n        \"InvoiceNum\": \"Ttest\",\n        \"IsVoided\": \"N\",\n        \"Medium\": \"Credit\",\n        \"ResultCode\": \"00\",\n        \"ResultText\": \"APPROVAL TAS312 \",\n        \"Status\": \"success\",\n        \"TipAmt\": \"0\",\n        \"TotalAmt\": \"900\",\n        \"TransType\": \"Auth\"\n    },\n    {\n        \"AVSResultCode\": \"N\",\n        \"AccountNum\": \"401200******5439\",\n        \"AuthAmt\": \"\",\n        \"AuthCode\": \"TAS637\",\n        \"AuthDate\": \"20230105\",\n        \"AuthTime\": \"012216\",\n        \"Brand\": \"Visa\",\n        \"CVVResultCode\": \"\",\n        \"ExpDate\": \"0923\",\n        \"GTRC\": \"d82118ca9977476eba73f948ebe0ea8c\",\n        \"InvoiceNum\": \"Ttest\",\n        \"IsVoided\": \"N\",\n        \"Medium\": \"Credit\",\n        \"ResultCode\": \"00\",\n        \"ResultText\": \"  NO  MATCH     \",\n        \"Status\": \"success\",\n        \"TipAmt\": \"0\",\n        \"TotalAmt\": \"900\",\n        \"TransType\": \"Auth\"\n    }\n]\n"
        }
    ex_req_GetTransInfo_Failed:
      summary: GetTransInfo_Failed
      description: GetTransInfo for original transaction failed request.
      value: |
        {
          "GMID":"2001008149",
          "GTID": "GT3010023905", 
          "GMPW": "GMPW3010026163",
          "TransType": "GetTransInfo",
          "GTRC":"ba7551b383834a178123f27cf408ed54"
        }
    ex_rep_GetTransInfo_Failed:
      summary: GetTransInfo_Failed
      description: GetTransInfo for original transaction failed reply.
      value: |
        {
          "AVSResultCode":"0",
          "AccountNum": "411111******1111",
          "AuthAmt": "200",
          "AuthDate": "20191204",
          "AuthTime": "222946",
          "Brand": "Visa",
          "ErrorCode": "0N7",
          "ErrorText": "CVV2 MISMATCH   ",
          "ExpDate": "1223",
          "GMID": "2001008149",
          "MainAmt": "200",
          "Medium": "Credit",
          "NewRecordCreated": "N",
          "PrevGTRC": "ba7551b383834a178123f27cf408ed54",
          "ProcessorID": "40203",
          "ResponseCode": "N7",
          "ResponseText": "CVV2 MISMATCH   ",
          "ResultCode": "0N7",
          "ResultText": "CVV2 MISMATCH   ",
          "SESSIONID": "Web{edc38dc2-c809-41f5-af9c-8120737272a5}_1575516585962",
          "Status": "fail",
          "TipAmt": "0",
          "TransType": "GetTransInfo"
        }
    ex_req_GetTransInfo_Void:
      summary: GetTransInfo_Void
      description: Inquiry original trans which was void request.
      value: |
        {
          "GMID":"2001008149",
          "GTID": "GT3010023905", 
          "GMPW": "GMPW3010026163",
          "TransType": "GetTransInfo",
          "GTRC":"b0e3e93da21048c882909fe2b0445823"
        }
    ex_rep_GetTransInfo_Void:
      summary: GetTransInfo_Void
      description: Inquiry original trans which was void reply, please notice IsVoid item.
      value: |
        {
          "AVSResultCode": "N",
          "AccountNum": "411111******1111",
          "AuthAmt": "200",
          "AuthCode": "TAS174",
          "AuthDate": "20191204",
          "AuthTime": "215342",
          "Brand": "Visa",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "ExpDate": "1223",
          "GMID": "2001008149",
          "GTRC": "b0e3e93da21048c882909fe2b0445823",
          "IsVoid": "Y",
          "MainAmt": "200",
          "Medium": "Credit",
          "NewRecordCreated": "N",
          "PrevGTRC": "b0e3e93da21048c882909fe2b0445823",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "SESSIONID": "Web{3c53b2f7-1ce2-4bee-a7d5-b62ed5bb36c3}_1575514422177",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "GetTransInfo"
        }
    ex_req_NoRecordFoundOfGetTransInfo_Basic:
      summary: GetTransInfo_NoRecordFound
      description: when the GTRC doesn't exist for GetTransInfo request.
      value: |
        {
          "GMID":"2001008149",
          "GTID": "GT3010023905", 
          "GMPW": "GMPW3010026163",
          "TransType": "GetTransInfo",
          "GTRC":"a15c8f382eae4a50a37a0e10abde1684"
        }
    ex_rep_NoRecordFoundOfGetTransInfo_Basic:
      summary: GetTransInfo_NoRecordFound
      description: No Record Found GetTransInfo reply.
      value: |
        {
          "AuthDate": "20191204",
          "AuthTime": "090345",
          "ErrorCode": "202",
          "ErrorText": "No record found.",
          "Medium": "UnknownCard",
          "NewRecordCreated": "N",
          "ProcessorID": "40203",
          "ResponseCode": "02",
          "ResponseText": "No record found.",
          "ResultCode": "202",
          "ResultText": "No record found.",
          "SESSIONID": "Web{e8665e10-a43b-4d0e-8e7f  -fabe039ba4b3}_1575468225556",
          "Status": "fail",
          "TransType": "GetTransInfo"
        }
    ex_req_Refund_Basic:
      summary: Basic Refund
      description: Standard basic Refund request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType":"Refund",
          "Medium":"Credit",
          "AccountNum":"4788250000028291",
          "ExpDate":"1250",
          "MainAmt":"1001",
          "EntryMode":"Manual",
          "InvoiceNum":"E2TV2345"
        }
    ex_rep_Refund_Basic:
      summary: Basic Refund
      description: Standard basic Refund reply.
      value: |
        {
          "AVSResultCode": "0",
          "AccountNum": "478825******8291",
          "AuthAmt": "1001",
          "AuthCode": "TAS783",
          "AuthDate": "20201126",
          "AuthTime": "120940",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS783 ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "4babb2fa0634410481becb1971b65a0e",
          "MainAmt": "1001",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS783 ",
          "ResultCode": "000",
          "ResultText": "APPROVAL TAS783 ",
          "SESSIONID": "Web{bd0cb9d5-9070-4d05-8b66-7a2865c40af2}_1606410578270",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Refund",
          "TransactionIdentifier": "000000001100691"
        }
    ex_req_Refund_GTRC:
      summary: Refund with GTRC
      description: Refund request using the GTRC of a previous sale transaction.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType":"Refund",
          "GTRC": "4babb2fa0634410481becb1971b65a0e"
        }
    ex_rep_Refund_GTRC:
      summary: Refund with GTRC
      description: Refund reply using the GTRC of a previous sale transaction..
      value: |
        {
          "AVSResultCode": "0",
          "AccountNum": "478825******8291",
          "AuthAmt": "1001",
          "AuthCode": "TAS803",
          "AuthDate": "20201126",
          "AuthTime": "121305",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS803 ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "c6c47b66850547878d81f81bd39ad33a",
          "MainAmt": "1001",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "PrevGTRC": "4babb2fa0634410481becb1971b65a0e",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS803 ",
          "ResultCode": "000",
          "ResultText": "APPROVAL TAS803 ",
          "SESSIONID": "Web{3e9bb565-9b5d-4d92-aefe-ac0d43022e78}_1606410782967",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Refund",
          "TransactionIdentifier": "000000001100741"
        }
    ex_req_Void_Basic:
      summary: Void
      description: Standard Void request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "27f12974e0f242aaaa73a7651c33d21f",
          "TransType": "Void"
        }
    ex_rep_Void_Basic:
      summary: Void
      description: Standard Void reply.
      value: |
        {

          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum": "478825******8291",
          "AuthAmt": "0",
          "AuthCode": "TAS139",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS139 ",
          "GTRC": "27f12974e0f242aaaa73a7651c33d21f",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS139 ",
          "Status": "success"
        }
    ex_req_Cancel:
      summary: Cancel
      description: Standard Cancel request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "27f12974e0f242aaaa73a7651c33d21f",
          "TransType": "Cancel"
        }
    ex_rep_Cancel:
      summary: Cancel
      description: Standard Cancel reply.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AVSResultCode": "0",
          "AccountNum": "478825******8291",
          "AuthAmt": "5213",
          "AuthCode": "TAS908",
          "Brand": "Visa",
          "CardToken": "43b9daa1279148b593a011ae4e396dd9",
          "EntryMode": "Manual",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS908 ",
          "ExpDate": "1250",
          "GTRC": "85903d7caf764f48a87e6d9a11ec2ae2",
          "Medium": "Credit",
          "NewGTRC": "27475b3375704574a6365f697a4186b2",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS908 ",
          "Status": "success"
        }
    ex_req_Reverse:
      summary: Reverse
      description: Standard Reverse request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "27f12974e0f242aaaa73a7651c33d21f",
          "TransType": "Reverse"
        }
    ex_rep_Reverse:
      summary: Reverse
      description: Standard Reverse reply.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum": "478825******8291",
          "AuthAmt": "5001",
          "AuthCode": "273348",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "SUCCESS",
          "ExpDate": "1250",
          "GTRC": "57b331fb6ebb4a859c49c8e919ee7858",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "SUCCESS",
          "Status": "success"
        }
    ex_req_Modify_Basic:
      summary: Basic Modify
      description: Standard basic Modify request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "e11dde4de55542e9822df7951c6a5bd0",
          "TransType": "Modify",
          "MainAmt": "1501",
          "TipAmt": "232",
          "IncTaxAmt": "193"
        }
    ex_rep_Modify_Basic:
      summary: Basic Modify
      description: Standard basic Modify reply.
      value: |
        {

          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum": "478825******8291",
          "AuthAmt": "0",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "SUCCESS",
          "ExpDate": "1250",
          "GTRC": "e11dde4de55542e9822df7951c6a5bd0",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "SUCCESS",
          "Status": "success"
        }
    ex_req_CreateCardToken:
      summary: CreateCardToken
      description: Standard basic CreateCardToken request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "CreateCardToken",
          "Medium": "Credit",
          "AccountNum": "4012000098765439",
          "ExpDate": "1220",
          "CustomerZipCode": "85284",
          "CustomerAddress": "8320"        
        }
    ex_rep_CreateCardToken:
      summary: CreateCardToken
      description: Standard basic CreateCardToken reply.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum": "401200******5439",
          "AuthAmt": "0",
          "AuthCode": "PREATH",
          "Brand": "Visa",
          "CardToken": "51904a0c96c14887a4044170229ee5c3",
          "ErrorCode": "085",
          "ErrorText": "EXACT MATCH ",
          "ExpDate": "1220",
          "GTRC": "5238624e07424e1e86f3291ec4bf9958",
          "Medium": "Credit",
          "ResponseCode": "85",
          "ResponseText": "EXACT MATCH ",
          "Status": "success"
        }
    ex_req_DeleteCardToken:
      summary: DeleteCardToken
      description: Standard basic DeleteCardToken request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "DeleteCardToken",
          "CardToken": "f2885df4d232403b8f47885da95b80ae"
        }
    ex_rep_DeleteCardToken:
      summary: DeleteCardToken
      description: Standard basic DeleteCardToken reply.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "EntryModel": "Unknow",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "Medium": "UnknowCard",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "Status": "success"
        }
    ex_req_UpdateCardTokenInfo:
      summary: UpdateCardTokenInfo
      description: Standard basic UpdateCardTokenInfo request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "UpdateCardTokenInfo",
          "CardToken": "51caf7a7517447f4a3641a5810d7b833",
          "ExpDate": "1219",
          "CustomerAddress": "8320",
          "CustomerZipCode": "74254"
        }
    ex_rep_UpdateCardTokenInfo:
      summary: UpdateCardTokenInfo
      description: Standard basic UpdateCardTokenInfo reply.
      value: |
        {
          "EntryModel": "Unknow",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "Medium": "UnknowCard",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "Status": "success"
        }
    ex_req_GetCardTokenInfo:
      summary: GetCardTokenInfo
      description: Standard basic GetCardTokenInfo request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "GetCardTokenInfo",
          "CardToken": "51caf7a7517447f4a3641a5810d7b833"
        }
    ex_rep_GetCardTokenInfo:
      summary: GetCardTokenInfo
      description: Standard basic GetCardTokenInfo reply.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum":"400240******0002",
          "AuthDate":"20190820",
          "AuthTime":"140019",
          "Brand":"Unknown",
          "CustomerZipCode":"85284",
          "ErrorCode":"100",
          "ErrorText":"No Error",
          "ExpDate":"1220",
          "Medium":"Credit",
          "NewRecordCreated":"N",
          "ProcessorID":"1051679695",
          "ResponseCode":"00",
          "ResponseText":"No Error",
          "ResultCode":"100",
          "ResultText":"No Error",
          "SESSIONID":"Web{7e7360f8-928c-4741-89af-67627a7583b2}_1566324019350",
          "Status":"success",
          "TransType":"GetCardTokenInfo"
        }
    ex_req_SaleTokenGen:
      summary: Sale with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "RequestCardToken":"Y",
          "Medium": "Credit",
          "EntryModel":"Manual",
          "AccountNum": "4012000098765439",
          "ExpDate": "1250",
          "CustomerZipCode": "85284",
          "MainAmt": "1000",
          "InvoiceNum": "XBUZC0KM"
          }
    ex_rep_SaleTokenGen:
      summary: Sale with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "AVSResultCode": "Z",
          "AccountNum": "401200******5439",
          "AuthAmt": "1000",
          "AuthCode": "TAS422",
          "AuthDate": "20201211",
          "AuthTime": "155755",
          "Brand": "Visa",
          "CardToken": "e8115d5f79144edfb987a1cdaee641f0",
          "ErrorCode": "000",
          "ErrorText": " ZIP  MATCH     ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "62b51d10c85a4b49a7c0394913f5efbd",
          "MainAmt": "1000",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": " ZIP  MATCH     ",
          "ResultCode": "000",
          "ResultText": " ZIP  MATCH     ",
          "SESSIONID": "Web{fd170181-2f33-44c6-9abd-0e3eb7b8c396}_1607720273505",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale",
          "TransactionIdentifier": "000000001655601"
        }
    ex_req_AuthTokenGen:
      summary: Auth with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Auth",
          "RequestCardToken":"Y",
          "Medium": "Credit",
          "EntryModel":"Manual",
          "AccountNum": "4012000098765439",
          "ExpDate": "1250",
          "CustomerZipCode": "85284",
          "MainAmt": "1000",
          "InvoiceNum": "ZDUC2082"
          }
    ex_rep_AuthTokenGen:
      summary: Auth with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "AVSResultCode": "Z",
          "AccountNum": "401200******5439",
          "AuthAmt": "1000",
          "AuthCode": "TAS930",
          "AuthDate": "20201212",
          "AuthTime": "055622",
          "Brand": "Visa",
          "CardToken": "e8115d5f79144edfb987a1cdaee641f0",
          "ErrorCode": "000",
          "ErrorText": " ZIP  MATCH     ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC": "d096526460034ea9a78e3022a62d236f",
          "MainAmt": "1000",
          "Medium": "Credit",
          "MerchantAddr": "265 S Federal Hwy",
          "MerchantCity": "Deerfield Beach",
          "MerchantName": "TSYS Test",
          "MerchantPhoneNum": "5613929606",
          "MerchantState": "FL",
          "MerchantZip": "33441",
          "NewRecordCreated": "Y",
          "ProcessorID": "40203",
          "ResponseCode": "00",
          "ResponseText": " ZIP  MATCH     ",
          "ResultCode": "000",
          "ResultText": " ZIP  MATCH     ",
          "SESSIONID": "Web{1dd96dfa-30d0-4b5d-90e7-ca5ca1e6519f}_1607770579944",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Auth",
          "TransactionIdentifier": "000000001673424"
        }
    ex_req_TokenSale:
      summary: Basic Token Sale
      description: Standard basic Sale request with card token
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "CardToken": "51caf7a7517447f4a3641a5810d7b833",
          "Medium": "Credit",
          "MainAmt": "1001",
          "TipAmt": "212",
          "IncTaxAmt": "153"
          }
    ex_rep_TokenSale:
      summary: Basic Token Sale
      description: Standard basic Sale reply with card token
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "1213",
          "AuthCode": "TAS110",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS110 ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "1b9d6a04dab84eda9aacc051c1e10ac6",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS110 ",
          "Status": "success"
        }
    ex_req_Batch:
      summary: Batch
      description: A Batch transaction is used to close the current open batch and settle it. It is supported by terminal capture only .For host capture, merchant don’t need submit batch request.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Batch"
        }
    ex_rep_Batch:
      summary: Batch
      description: Close batch.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum": "401200******5439",
          "AuthAmt": "0",
          "AuthCode": "PREATH",
          "Brand": "Visa",
          "CardToken": "51904a0c96c14887a4044170229ee5c3",
          "ErrorCode": "085",
          "ErrorText": "EXACT MATCH ",
          "ExpDate": "1220",
          "GTRC": "5238624e07424e1e86f3291ec4bf9958",
          "Medium": "Credit",
          "ResponseCode": "85",
          "ResponseText": "EXACT MATCH ",
          "Status": "success"
        }
    ex_req_BatchLookup:
      summary: BatchLookup
      description: A BatchLookup transaction is used to query batch ID by batch date.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "BatchLookup",
          "BatchDate": "20200825"
        }
    ex_rep_BatchLookup:
      summary: BatchLookup
      description: Batch Lookup.
      value: |
        {
          "GMID": "1110222484",
          "BatchIDList": "c45a175bb9dc4f4cb8676ad3bc16d527",
          "IsClosed": "Y",
          "IsArchived": "N",
          "ChargeCount": "1",
          "ChargeAmount": "1256",
          "RefundCount": "1",
          "RefundAmount": "101",
          "TotalCount": "2",
          "NetAmount": "1155",
          "Status": "success",
          "ResponseCode": "00",
          "ResponseText": "success",
          "ErrorCode": "000",
          "ErrorText": "success",
          "xMsg_DstUName": "svcbch",
          "xMsg_DstTrcNum": "206282",
          "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_BatchLookupNoDate:
      summary: BatchLookup without date
      description: A BatchLookup transaction without a date is used to query the  current open batch ID.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "BatchLookup"
        }
    ex_rep_BatchLookupNoDate:
      summary: BatchLookup without date
      description: Batch Lookup without date.
      value: |
        {
          "GMID": "1110222484",
          "BatchIDList": "1ae76835f6034486bdd2256bae46fa55",
          "IsClosed": "N",
          "IsArchived": "N",
          "ChargeCount": "5",
          "ChargeAmount": "7148",
          "RefundCount": "0",
          "RefundAmount": "0",
          "TotalCount": "5",
          "NetAmount": "7148",
          "Status": "success",
          "ResponseCode": "00",
          "ResponseText": "success",
          "ErrorCode": "000",
          "ErrorText": "success",
          "xMsg_DstUName": "svcbch",
          "xMsg_DstTrcNum": "206287",
          "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_BatchQuery:
      summary: BatchQuery
      description: A BatchQuery transaction is used to query transaction list by batch ID.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "BatchQuery",
          "BatchID": "c45a175bb9dc4f4cb8676ad3bc16d527",
          "StartIndex": "0",
          "ResponseLimit": "2"
        }
    ex_rep_BatchQuery:
      summary: BatchQuery
      description: Batch Query.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "",
          "BatchID": "c45a175bb9dc4f4cb8676ad3bc16d527",
          "TransactionList": [
            {
              "GTRC": "67ea5f8d487744c1969a6726ae6797a2",
              "TransactionNum": "000000000238874",
              "Brand": "Visa",
              "Medium": "Credit",
              "AccountNum": "************5168",
              "ExpDate": "**/**",
              "TransType": "Refund",
              "AuthCode": "TAS836",
              "AuthTS": "1598374173",
              "FinalizeTS": "1598374173",
              "IncTaxAmt": "0",
              "IncCashBackAmt": "0",
              "TipAmt": "0",
              "AuthAmt": "101",
              "TotalAmt": "101",
              "IsVoided": "0",
              "MainAmt": "101",
              "BaseAmt": "101"
            },
            {
              "GTRC": "a80e41770cf043d88fdd380ad4af9c9d",
              "TransactionNum": "000000000238895",
              "Brand": "Visa",
              "Medium": "Credit",
              "AccountNum": "************5168",
              "ExpDate": "**/**",
              "TransType": "Sale",
              "AuthCode": "TAS846",
              "AuthTS": "1598374213",
              "FinalizeTS": "1598374213",
              "IncTaxAmt": "0",
              "IncCashBackAmt": "0",
              "TipAmt": "123",
              "AuthAmt": "1010",
              "TotalAmt": "1256",
              "IsVoided": "0",
              "MainAmt": "1133",
              "BaseAmt": "1133"
            }
          ],
          "MoreTransactions": "N",
          "StartIndex": "0",
          "EndIndex": "1",
          "Status": "success",
          "ResponseCode": "00",
          "ResponseText": "success",
          "ErrorCode": "000",
          "ErrorText": "success",
          "xMsg_DstUName": "svcbch",
          "xMsg_DstTrcNum": "206284",
          "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_ACH_Sale:
      summary: Basic ACH Sale
      description: Standard basic ACH Sale request
      value: |
        {
          "TransType": "Sale",
          "Medium": "ElectronicCheck",
          "EntryModel": "Manual",
          "EleCheckServiceProvider": "ElecCheckWEB",
          "EleCheckTransactionType": "EleCheckConversion",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "MainAmt": "2500",
          "EleCheckRoutingNumber": "102000021",
          "EleCheckAccountNumber": "125401754499",
          "InvoiceNum":"X2342S67"
        }
    ex_rep_ACH_Sale:
      summary: Basic ACH Sale
      description: Standard basic ACH Sale reply
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "AccountNum":"T10200**************499O",
          "AuthAmt":"2500",
          "AuthCode":"297583",
          "AuthDate":"051818",
          "AuthTime":"044921",
          "EntryMode":"Manual",
          "ErrorCode":"000",
          "ErrorText":"APPROVAL",
          "GTRC":"25c638f8e8e944b082c06f2f7b00689d",
          "Medium":"ElectronicCheck",
          "NewGTRC":"25c638f8e8e944b082c06f2f7b00689d",
          "ResponseCode":"00",
          "ResponseText":"APPROVAL",
          "Status":"success"
        }
    ex_req_ACH_Credit_CreateToken:
      summary: ACH Credit Account registration(tokenization)
      description: |
        ACH Credit Account data registration(tokenization).   
        It allows to setup sub-accounts to process payouts.   
        When this API is called all ACH account data is forwarded to the Processor(Gulf Management System) to be setup for future payments. It is important to provide the mandatory unique ID("CustomerNum") that will identify all this data in the Processor system. If the setup is successful then all the supplied data is tokenized on Netevia and a token is returned to the merchant so that it can be used for future payment requests.
        - <span style="color:red">AccountType</span> – savings/checking  
        - <span style="color:red">CustomerNum</span> – the ID(Required 6 AN Character Identifier) assigned to the account data in the Gulf Management System system  
        - <span style="color:red">Customer Name/Address/State/City/ZipCode</span> – account holder name/address/state/city/ZipCode  
      value: |
        {
          "GMID": "1110220413",
          "GTID": "GT1120090921",
          "GMPW": "GMPW3010296816",
          "Medium": "ElectronicCheck",
          "TransType": "CreateCardToken",
          "VerifyCard":"Y",
          "EntryModel": "Manual",
          "EleCheckRoutingNumber": "123456780",
          "EleCheckAccountNumber": "1071642307",
          "AccountType":"savings",
          "CustomerNum":"ABC123",
          "CustomerName":"John Doe",
          "CustomerZipCode":"12345", 
          "CustomerAddress":"888 Main St",
          "CustomerCity":"New York",
          "CustomerState":"NY"
        }
    ex_rep_ACH_Credit_CreateToken:
      summary: ACH Credit Account registration(tokenization)
      description: ACH Credit Account registration(tokenization)
      value: |
        {
          "AccountNum":"T12345************307O",
          "AuthAmt":"0",
          "AuthDate":"20190827",
          "AuthTime":"014426",
          "CardToken":"03cb34b3859249bab5789ee309bcf341",
          "ErrorCode":"100",
          "ErrorText":"Setup successfully processed",
          "GMID": "1110220413",
          "GMPW": "GMPW3010300378",
          "GTID": "GT1120095178",
          "GTRC":"ad64791e6f334562b44741bd417828c1",
          "MainAmt":"0",
          "Medium":"ElectronicCheck",
          "MerchantAddr":"state1",
          "MerchantCity":"Phoenix",
          "MerchantName":"GMS",
          "MerchantPhoneNum":"19282032000",
          "MerchantState":"AZ",
          "MerchantZip":"85008",
          "NewRecordCreated":"Y",
          "ProcessorID":"40207",
          "ResponseCode":"00",
          "ResponseText":"Setup successfully processed",
          "ResultCode":"100",
          "ResultText":"Setup successfully processed",
          "SESSIONID":"Web{20c82330-4af2-42a5-9d15-495fbfffe7b3}_1566859465378",
          "Status":"success",
          "TipAmt":"0",
          "TransType":"CreateCardToken"
        }
    ex_req_ACH_Credit_Credit:
      summary: ACH Credit Payment
      description: |
        ACH Credit single Payment.  
        By using the **Credit** transaction you can schedule a payment to an ACH account that was previously registered(tokenized). The payment is on hold on Netevia system until the merchant account is batched.  
        During batching all pending recorded paymentes are submitted to the Processor as a single PayOut request.
      value: |
        {
          "GMID": "1110220413",
          "GTID": "GT1120090921",
          "GMPW": "GMPW3010296816",
          "Medium": "ElectronicCheck",
          "TransType": "Credit",
          "CardToken":"ad98eee1a0fa4421a3fa98a04fa4241d",
          "MainAmt":"1000"
        }
    ex_rep_ACH_Credit_Credit:
      summary: ACH Credit tokenization
      description: ACH Credit Create token
      value: |
        {
          "AccountNum":"T12345************307O",
          "AuthAmt":"1000",
          "AuthDate":"20191007",
          "AuthTime":"182706",
          "ErrorCode":"100",
          "ErrorText":"Pending",
          "GMID":"1110220413",
          "GMPW":"GMPW3010296816",
          "GTID":"GT1120090921",
          "MainAmt":"1000",
          "Medium":"ElectronicCheck",
          "MerchantAddr":"state1",
          "MerchantCity":"Phoenix",
          "MerchantName":"GMS",
          "MerchantPhoneNum":"19282032000",
          "MerchantState":"AZ",
          "MerchantZip":"85008",
          "NewRecordCreated":"N",
          "ProcessorID":"40207",
          "ResponseCode":"00",
          "ResponseText":"Pending",
          "ResultCode":"100",
          "ResultText":"Pending",
          "SESSIONID":"Web{2fb509ce-ae1a-401f-b08b-2f829cfc05b0}_1570487226550",
          "SourceTraceNum":"1570487226",
          "Status":"success",
          "TipAmt":"0",
          "TransType":"Credit"
        }
    ex_req_ACH_Credit_Batch:
      summary: ACH Credit Batch
      description: |
        ACH Credit Batch will trigger a PayOut request to the Processor with all the pending payments from Netevia system.  
        - <span style="color:red">TotalCreditAmt</span> - this will be the total PayOut value and will be used to validate the credits previously stored; if the value will not match then the batch will fail.  
        - <span style="color:red">AuthCode</span> - the value returned in the response for successful batch operations will contain the Payout filename returned by the Processor (this filename will be used by the Processor for future reporting)
      value: |
        {
          "GMID": "1110220413",
          "GTID": "GT1120090921",
          "GMPW": "GMPW3010296816",
          "TransType": "Batch",
          "TotalCreditAmt":"3000"
        }
    ex_rep_ACH_Credit_Batch:
      summary: ACH Credit Batch
      description: ACH Credit batch.
      value: |
        {
          "AuthAmt":"0",
          "AuthCode":"PBF3HXDT201910071836.txt",
          "AuthDate":"20191007",
          "AuthTime":"183710",
          "BatchID":"4adeccaf49234fc680d85ad3d208a39e",
          "ErrorCode":"0GB",
          "ErrorText":"GMS:SUCCESS",
          "GMID":"1110220413",
          "GMPW":"GMPW3010296816",
          "GTID":"GT1120090921",
          "MainAmt":"0",
          "MerchantAddr":"state1",
          "MerchantCity":"Phoenix",
          "MerchantName":"GMS",
          "MerchantPhoneNum":"19282032000",
          "MerchantState":"AZ",
          "MerchantZip":"85008",
          "ProcessorID":"40207",
          "ResponseCode":"GB",
          "ResponseText":"GMS:SUCCESS",
          "ResultCode":"0GB",
          "ResultText":"GMS:SUCCESS",
          "SESSIONID":"Web{7e52cb82-2ea6-466e-82e5-13a5b155f7d4}_1570487829078",
          "Status":"success",
          "TipAmt":"0",
          "TransType":"Batch",
          "xMerAcctLupNum":"1110220413-60167"
        }
    ex_req_Gift_Activation:
      summary: Gift Activation request
      description: |
        Inquiry the certificate available amount and pionts.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Activation",
          "AccountNum": "603628798342586296162",
          "MainAmt":"12000"
          "Medium": "Gift"
        }
    ex_req_Gift_Inquiry:
      summary: Gift Inquiry request
      description: |
        Inquiry the certificate available amount and pionts.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Inquiry",
          "AccountNum": "603628798342586296162",
          "Medium": "Gift"
        }
    ex_rep_Gift_Inquiry:
      summary: Gift Inquiry response
      description: Gift inquiry response
      value: |
        {
          "AccountNum": "603628***********6162",
          "AuthAmt": "0",
          "AuthDate": "20210727",
          "AuthTime": "015222",
          "BalanceAmt": "0",
          "CertificateExpDate": "None",
          "CurrencyCode": "CAD",
          "ErrorCode": "000",
          "ErrorText": "SUCCESS",
          "GMID": "1110100904",
          "GMPW": "GMPW3010020729",
          "GTID": "GT1120025457",
          "GTRC": "8c49e559a637492c805e8c7305459c6e",
          "MainAmt": "0",
          "Medium": "Gift",
          "MerchantAddr": "123213",
          "MerchantCity": "wh",
          "MerchantName": "Main",
          "MerchantPhoneNum": "1233423",
          "MerchantState": "sdf",
          "MerchantZip": "23456",
          "NewRecordCreated": "Y",
          "PointsBalance": "17",
          "ProcessorID": "40211",
          "ProcessorLatencyTime": "723",
          "ResponseCode": "00",
          "ResponseText": "SUCCESS",
          "ResultCode": "000",
          "ResultText": "SUCCESS",
          "SESSIONID": "Web{8a032d41-9f40-4231-bd64-dfff970dcfef}_1627365140195",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Inquiry"
        }
    ex_req_Gift_Sale:
      summary: Gift Sale request
      description: Gift Sale request
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Sale",
          "MainAmt": "100",
          "AccountNum": "603628798342586296162",
          "Medium": "Gift"
        }
    ex_rep_Gift_Sale:
      summary: Gift Sale response
      description: Gift Sale response
      value: |
        {
          "AccountNum": "603628***********6162",
          "AuthAmt": "0",
          "AuthDate": "20210727",
          "AuthTime": "015928",
          "BalanceAmt": "0",
          "CertificateBalance": "0.00",
          "ErrorCode": "009",
          "ErrorText": "ERR  BAL=$0.00",
          "GMID": "1110100904",
          "GMPW": "GMPW3010020729",
          "GTID": "GT1120025457",
          "GTRC": "f41d3e044c014ba083d28e23b24b4335",
          "Givex Transaction Reference or error message": "ERR  bal=$0.00",
          "MainAmt": "100",
          "Medium": "Gift",
          "MerchantAddr": "123213",
          "MerchantCity": "wh",
          "MerchantName": "Main",
          "MerchantPhoneNum": "1233423",
          "MerchantState": "sdf",
          "MerchantZip": "23456",
          "NewRecordCreated": "Y",
          "ProcessorID": "40211",
          "ProcessorLatencyTime": "751",
          "ResponseCode": "09",
          "ResponseText": "ERR  BAL=$0.00",
          "ResultCode": "009",
          "ResultText": "ERR  BAL=$0.00",
          "SESSIONID": "Web{2a90450f-d218-4a74-9226-00039c007b65}_1627365566651",
          "Status": "fail",
          "TipAmt": "0",
          "TransType": "Sale"
        }
    ex_req_Gift_Auth:
      summary: Gift Auth request
      description: If the transaction is not finalized within 7 days, the transaction will be invalidated.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Auth",
          "MainAmt": "100",
          "AccountNum": "603628798342586296162",
          "Medium": "Gift"
        }
    ex_rep_Gift_Auth:
      summary: Gift Auth response
      description: Gift Auth response
      value: |
        {
          "AccountNum": "603628***********6162",
          "AuthAmt": "0",
          "AuthDate": "20210727",
          "AuthTime": "015928",
          "BalanceAmt": "0",
          "CertificateBalance": "0.00",
          "ErrorCode": "009",
          "ErrorText": "ERR  BAL=$0.00",
          "GMID": "1110100904",
          "GMPW": "GMPW3010020729",
          "GTID": "GT1120025457",
          "GTRC": "f41d3e044c014ba083d28e23b24b4335",
          "Givex Transaction Reference or error message": "ERR  bal=$0.00",
          "MainAmt": "100",
          "Medium": "Gift",
          "MerchantAddr": "123213",
          "MerchantCity": "wh",
          "MerchantName": "Main",
          "MerchantPhoneNum": "1233423",
          "MerchantState": "sdf",
          "MerchantZip": "23456",
          "NewRecordCreated": "Y",
          "ProcessorID": "40211",
          "ProcessorLatencyTime": "751",
          "ResponseCode": "09",
          "ResponseText": "ERR  BAL=$0.00",
          "ResultCode": "009",
          "ResultText": "ERR  BAL=$0.00",
          "SESSIONID": "Web{2a90450f-d218-4a74-9226-00039c007b65}_1627365566651",
          "Status": "fail",
          "TipAmt": "0",
          "TransType": "Auth"
        }
    ex_req_Gift_Finalize:
      summary: Gift Finalize request
      description: |
        This service is used to complete a Pre-Auth and redeem the reserved funds.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Finalize",
          "TipAmt": "100",
          "GTRC": "907fd1ab95404d549dcd004ecbe7164a"
        }
    ex_rep_Gift_Finalize:
      summary: Gift Finalize response
      description: Gift Finalize response
      value: |
        {
            "AccountNum": "603628******6162",
            "AuthAmt": "300",
            "AuthCode": "945114",
            "AuthDate": "20210727",
            "AuthTime": "022715",
            "BalanceAmt": "1900",
            "EntryMode": "Manual",
            "ErrorCode": "000",
            "ExpDate": "0000",
            "GMID": "1110100904",
            "GMPW": "GMPW3010020729",
            "GTID": "GT1120025457",
            "GTRC": "907fd1ab95404d549dcd004ecbe7164a",
            "MainAmt": "200",
            "Medium": "Gift",
            "NewGTRC": "856664ace474468084838d32f29cd05e",
            "NewRecordCreated": "N",
            "PrevGTRC": "907fd1ab95404d549dcd004ecbe7164a",
            "ResponseCode": "00",
            "ResultCode": "000",
            "Status": "success",
            "TipAmt": "100",
            "TransType": "Finalize",
            "xMsg_DstUName": "PGCWSSServer",
            "xMsg_DstTrcNum": "120949",
            "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_Gift_Refund:
      summary: Gift Refund request
      description: |
        This service is to differentiate a gift transaction used to add value in a consumer comp or merchandise credit scenario at the front line. This transaction may be applied to an active or inactive card. When successfully performed on an active gift card the card balance will increase in value corresponding to the amount requested and a Merchandise Credit transaction for that amount will be recorded in its transaction history. When successfully performed on an inactive gift card, the card will first be activated before the merchandise credit is applied.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Refund",
          "MainAmt": "10000",
          "AccountNum": "603628798342586296162",
          "Medium": "Gift"
        }
    ex_rep_Gift_Refund:
      summary: Gift Refund response
      description: Gift Refund response
      value: |
        {
            "AccountNum": "603628***********6162",
            "AuthAmt": "10000",
            "AuthCode": "945162",
            "AuthDate": "20210727",
            "AuthTime": "030501",
            "BalanceAmt": "12200",
            "CertificateExpDate": "None",
            "ErrorCode": "000",
            "GMID": "1110100904",
            "GMPW": "GMPW3010020729",
            "GTID": "GT1120025457",
            "GTRC": "60f8cc7b2a9440cca0f02c6ef9294895",
            "Givex Transaction Reference or error message": "945162",
            "MainAmt": "10000",
            "Medium": "Gift",
            "MerchantAddr": "123213",
            "MerchantCity": "wh",
            "MerchantName": "Main",
            "MerchantPhoneNum": "1233423",
            "MerchantState": "sdf",
            "MerchantZip": "23456",
            "NewRecordCreated": "Y",
            "ProcessorID": "40211",
            "ProcessorLatencyTime": "649",
            "ResponseCode": "00",
            "ResultCode": "000",
            "SESSIONID": "Web{1794630f-c4bb-4d7b-bd2c-5ac31b003a5f}_1627369499605",
            "Status": "success",
            "TipAmt": "0",
            "TransType": "Refund"
        }
    ex_req_Gift_AddValue:
      summary: Gift AddValue request
      description: |
        This service enables a merchant to add value to a certificate. The certificate must be designated as flexible rather than fixed value or the
        Increment will not succeed.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "AddValue",
          "MainAmt": "100",
          "AccountNum": "603628798342586296162",
          "Medium": "Gift"
        }
    ex_rep_Gift_AddValue:
      summary: Gift AddValue response
      description: Gift AddValue response
      value: |
        {
          "AccountNum": "603628******6162",
          "AuthAmt": "1200",
          "AuthCode": "945091",
          "AuthDate": "20210727",
          "AuthTime": "021737",
          "BalanceAmt": "2200",
          "EntryMode": "Manual",
          "ErrorCode": "000",
          "GMID": "1110100904",
          "GMPW": "GMPW3010020729",
          "GTID": "GT1120025457",
          "GTRC": "e827e866f2c34cb29fbefd5146e86a53",
          "MainAmt": "1200",
          "Medium": "Gift",
          "NewGTRC": "e827e866f2c34cb29fbefd5146e86a53",
          "NewRecordCreated": "Y",
          "ResponseCode": "00",
          "ResultCode": "000",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "AddValue",
          "xMsg_DstUName": "PGCWSSServer",
          "xMsg_DstTrcNum": "120946",
          "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_Gift_Adjust:
      summary: Gift Adjust/AdjustDown request
      description: |
        This service enables a merchant to adjust (increment or decrement) the value of an existing certificate. Adjustment transactions cannot be cancelled.
        change the transtype to AdjustDown then is the decrement operator.
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "AdjustUp",
          "MainAmt": "100",
          "AccountNum": "603628798342586296162",
          "Medium": "Gift"
        }
    ex_rep_Gift_Adjust:
      summary: Gift AdjustUp(AdjustDown) response
      description: Gift AdjustUp(AdjustDown) response
      value: |
        {
          "AccountNum": "603628******6162",
          "AuthAmt": "1200",
          "AuthCode": "945091",
          "AuthDate": "20210727",
          "AuthTime": "021737",
          "BalanceAmt": "2200",
          "EntryMode": "Manual",
          "ErrorCode": "000",
          "GMID": "1110100904",
          "GMPW": "GMPW3010020729",
          "GTID": "GT1120025457",
          "GTRC": "e827e866f2c34cb29fbefd5146e86a53",
          "MainAmt": "1200",
          "Medium": "Gift",
          "NewGTRC": "e827e866f2c34cb29fbefd5146e86a53",
          "NewRecordCreated": "Y",
          "ResponseCode": "00",
          "ResultCode": "000",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "AdjustUp",
          "xMsg_DstUName": "PGCWSSServer",
          "xMsg_DstTrcNum": "120946",
          "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_Gift_Void:
      summary: Gift Void request
      description: |
        The service enables the merchant to void or cancel a transaction
      value: |
        {
          "GMID": "1110100904",
          "GTID": "GT1120025457",
          "GMPW": "GMPW3010020729",
          "TransType": "Void",
          "GTRC": "907fd1ab95404d549dcd004ecbe7164a"
        }
    ex_rep_Gift_Void:
      summary: Gift Void response
      description: Gift Void response
      value: |
        {
            "AccountNum": "603628******6162",
            "AuthAmt": "300",
            "AuthCode": "945114",
            "AuthDate": "20210727",
            "AuthTime": "023327",
            "BalanceAmt": "2200",
            "EntryMode": "Manual",
            "ErrorCode": "000",
            "ExpDate": "0000",
            "GMID": "1110100904",
            "GMPW": "GMPW3010020729",
            "GTID": "GT1120025457",
            "GTRC": "907fd1ab95404d549dcd004ecbe7164a",
            "MainAmt": "0",
            "Medium": "Gift",
            "NewGTRC": "4f654399f880448b8024a6e8b8cda981",
            "NewRecordCreated": "N",
            "PrevGTRC": "907fd1ab95404d549dcd004ecbe7164a",
            "ResponseCode": "00",
            "ResultCode": "000",
            "Status": "success",
            "TipAmt": "0",
            "TransType": "Void",
            "xMsg_DstUName": "PGCWSSServer",
            "xMsg_DstTrcNum": "120950",
            "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_Gift_PointsIssue:
      summary: Gift PointsIssuance request
      description: |
        This service is used for issuing points as part of a loyalty program. Points can be issued based on the total amount of the check or for specific SKU numbers. For issuance based on total check amount, Points transactions reference pre-defined formulas setup on the Givex host through the promo code specified. The formula will calculate the amount of points to issue based on the amount and units provided. For issuance based on SKU numbers, Points transactions reference pre-defined formulas setup on the Givex host through the SKU(s) specified. The formula will calculate the amount of points to issue based on the SKUs and SKU Quantities provided.
        PromoCode 
        SKU item format SKUNum:Amount:QTY example ("SKUItems":"5:500:2,2:275:1")
      value: |
        {
            "GMID":"1110100904",
            "GTID":"GT1120025457",
            "GMPW":"GMPW3010020729",
            "TransType":"PointsIssuance",
            "AccountNum":"603628798342586296162",
            "MainAmt":"1200",
            "Medium":"Gift"
        }
    ex_rep_Gift_PointsIssue:
      summary: Gift PointsIssue response
      description: Gift PointsIssue response
      value: |
        {
            "AccountNum": "603628******6162",
            "AuthAmt": "100",
            "AuthCode": "945429",
            "AuthDate": "20210727",
            "AuthTime": "024212",
            "BalanceAmt": "2200",
            "EntryMode": "Manual",
            "ErrorCode": "000",
            "GMID": "1110100904",
            "GMPW": "GMPW3010020729",
            "GTID": "GT1120025457",
            "GTRC": "15a87f5938014081842de1d5ff4e5ebb",
            "MainAmt": "100",
            "Medium": "Gift",
            "NewGTRC": "15a87f5938014081842de1d5ff4e5ebb",
            "NewRecordCreated": "Y",
            "PointsBalance": "18",
            "ResponseCode": "00",
            "ResultCode": "000",
            "Status": "success",
            "TipAmt": "0",
            "TransType": "PointsIssuance",
            "xMsg_DstUName": "PGCWSSServer",
            "xMsg_DstTrcNum": "120951",
            "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_Gift_PointsRedemption:
      summary: Gift PointsRedemption request
      description: |
        The Points redemption service is used for redeeming (decrementing) points as part of a loyalty program. numbers. 
      value: |
        {
            "GMID":"1110100904",
            "GTID":"GT1120025457",
            "GMPW":"GMPW3010020729",
            "TransType":"PointsRedemption",
            "AccountNum":"603628798342586296162",
            "Points":"10",
            "Medium":"Gift"
        }
    ex_rep_Gift_PointsRedemption:
      summary: Gift PointsRedemption response
      description: Gift PointsRedemption response
      value: |
        {
           "AccountNum": "603628******6162",
           "AuthAmt": "0",
           "AuthDate": "20210727",
           "AuthTime": "024938",
           "BalanceAmt": "2200",
           "EntryMode": "Manual",
           "ErrorCode": "000",
           "GMID": "1110100904",
           "GMPW": "GMPW3010020729",
           "GTID": "GT1120025457",
           "GTRC": "6cce5145535a4006bccbc6855108fffe",
           "MainAmt": "0",
           "Medium": "Gift",
           "NewGTRC": "6cce5145535a4006bccbc6855108fffe",
           "NewRecordCreated": "Y",
           "Points": "10",
           "PointsBalance": "8",
           "ResponseCode": "00",
           "ResultCode": "000",
           "Status": "success",
           "TipAmt": "0",
           "TransType": "PointsRedemption",
           "xMsg_DstUName": "PGCWSSServer",
           "xMsg_DstTrcNum": "120952",
           "xMsg_Action": "xMsgAct_Reply"
        }
    ex_req_Gift_PointsReduction:
      summary: Gift PointsReduction request
      description: |
        Used for reducing points as part of a loyalty program. The Points transaction references pre-defined formulas setup on the Givex host through the promo code specified. The formula will calculate the amount of points to reduce based on the amount and promo code provided.
      value: |
        {
            "GMID":"1110100904",
            "GTID":"GT1120025457",
            "GMPW":"GMPW3010020729",
            "TransType":"PointsRedemption",
            "AccountNum":"603628798342586296162",
            "MainAmt":"1000",
            "Medium":"Gift"
        }
    ex_rep_Gift_PointsReduction:
      summary: Gift PointsReduction response
      description: Gift PointsReduction response
      value: |
        {
           "AccountNum": "603628***********6162",
           "AuthAmt": "1000",
           "AuthDate": "20210727",
           "AuthTime": "025230",
           "BalanceAmt": "0",
           "ErrorCode": "000",
           "GMID": "1110100904",
           "GMPW": "GMPW3010020729",
           "GTID": "GT1120025457",
           "GTRC": "130511c58dc24b88a696bf8991f37f08",
           "Givex Transaction Reference or error message": "945431",
           "MainAmt": "1000",
           "Medium": "Gift",
           "MerchantAddr": "123213",
           "MerchantCity": "wh",
           "MerchantName": "Main",
           "MerchantPhoneNum": "1233423",
           "MerchantState": "sdf",
           "MerchantZip": "23456",
           "NewRecordCreated": "Y",
           "PointsBalance": "8",
           "ProcessorID": "40211",
           "ProcessorLatencyTime": "659",
           "ResponseCode": "00",
           "ResultCode": "000",
           "SESSIONID": "Web{689ec4cc-fdd5-4dbe-92fd-e73c752132f7}_1627368748577",
           "Status": "success",
           "TipAmt": "0",
           "TransType": "PointsReduction"
        }
    ex_req_Gift_PointsVoid:
      summary: Gift PointsVoid request
      description: |
        Used for reducing points as part of a loyalty program. The Points transaction references pre-defined formulas setup on the Givex host through the promo code specified. The formula will calculate the amount of points to reduce based on the amount and promo code provided.
      value: |
        {
            "GMID":"1110100904",
            "GTID":"GT1120025457",
            "GMPW":"GMPW3010020729",
            "TransType":"PointsVoid",
            "GTRC":"130511c58dc24b88a696bf8991f37f08"
        }
    ex_rep_Gift_PointsVoid:
      summary: Gift PointsVoid response
      description: Gift PointsVoid response
      value: |
        {
            "AccountNum": "603628***********6162",
            "AuthAmt": "100",
            "AuthCode": "945433",
            "AuthDate": "20210727",
            "AuthTime": "025644",
            "BalanceAmt": "2200",
            "ErrorCode": "000",
            "ExpDate": "0000",
            "GMID": "1110100904",
            "GMPW": "GMPW3010020729",
            "GTID": "GT1120025457",
            "GTRC": "a26b7a20df7544b3b76dd6cf4cf98aac",
            "Givex Transaction Reference or error message": "945433",
            "MainAmt": "0",
            "Medium": "Gift",
            "MerchantAddr": "123213",
            "MerchantCity": "wh",
            "MerchantName": "Main",
            "MerchantPhoneNum": "1233423",
            "MerchantState": "sdf",
            "MerchantZip": "23456",
            "NewRecordCreated": "N",
            "PointsBalance": "0",
            "PointsCancelled": "1",
            "PrevGTRC": "a26b7a20df7544b3b76dd6cf4cf98aac",
            "ProcessorID": "40211",
            "ProcessorLatencyTime": "760",
            "ResponseCode": "00",
            "ResultCode": "000",
            "SESSIONID": "Web{7353b809-23e9-40c9-9274-16a55445ed36}_1627369002175",
            "Status": "success",
            "TipAmt": "0",
            "TransType": "PointsVoid"
        }
    ex_req_Gift_CashOut:
      summary: Gift CashOut request
      description: |
        This is a batch close operation that affects all operators and terminals within the store. The service will also clear any Pre-Auth transactions that have not been posted with the Post-Auth service. The transactions are either cancelled or posted depending on merchant settings.
      value: |
        {
            "GMID":"1110100904",
            "GTID":"GT1120025457",
            "GMPW":"GMPW3010020729",
            "TransType":"Batch",
        }
    ex_rep_Gift_CashOut:
      summary: Gift CashOut response
      description: Gift CashOut response
      value: |
        {
            "AuthAmt": "0",
            "AuthDate": "20210727",
            "AuthTime": "030035",
            "BatchID": "56427c75e6d94f02999208272026a9db",
            "ErrorCode": "0GB",
            "ErrorText": "GIVEX:SUCCESS\n",
            "GMID": "1110100904",
            "GMPW": "GMPW3010020729",
            "GTID": "GT1120025457",
            "MainAmt": "0",
            "MerchantAddr": "123213",
            "MerchantCity": "wh",
            "MerchantName": "Main",
            "MerchantPhoneNum": "1233423",
            "MerchantState": "sdf",
            "MerchantZip": "23456",
            "ProcessorID": "40211",
            "ProcessorLatencyTime": "710",
            "ResponseCode": "GB",
            "ResponseText": "GIVEX:SUCCESS\n",
            "ResultCode": "0GB",
            "ResultText": "GIVEX:SUCCESS\n",
            "SESSIONID": "Web{177de5cd-1d75-4d65-b119-1654a8c87f4c}_1627369232960",
            "Status": "success",
            "TipAmt": "0",
            "TransType": "Batch"
        }
    ex_req_Sale_GPay:
      summary: GPay Sale
      description: Standard GPay Sale request
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "Medium": "Credit",
          "MainAmt": "1001",
          "PayAPI":"GooglePay",
          "Payload": "{\"signature\":\"MEMCIBD7zOfOintAG/gjg6XenH+x8uM//2b3L/i+GKlhOMtxAh89lRkECojoDHc/Ohis4hvivc2EtCNf/k69MWMCemBN\",\"intermediateSigningKey\":{\"signedKey\":\"{\\\"keyValue\\\":\\\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEq1r61W296dtgCNIJYS9KTl5bp8lMPjz7SDEjE5Zk27iiuane/oEZbOQYlF8YurHvitrLyFN9ROU8p+9Rts7feg\\\\u003d\\\\u003d\\\",\\\"keyExpiration\\\":\\\"1603261713365\\\"}\",\"signatures\":[\"MEUCIQDnvLuziBPYWDmMuUR493lDMYoZYccEPi7sCYHC+EILkgIgacX5hiHoxxD7HRfm9xG9lYNHAoV5i2OaFpggArB0uwQ\\u003d\"]},\"protocolVersion\":\"ECv2\",\"signedMessage\":\"{\\\"encryptedMessage\\\":\\\"+Oc0tH5ZWHTyrUlxBOimgM1zyIeOEKJAf300KNBlTUUUU1RzswJMhXa6Ehc9haOTnfYdqcQRx+1f7ztnqbHujPfITzRCjTA8DPMHfYe/Z/MhPPZr9MIHubFjizenRU/tBjm6f/WuAjMj+CoDxDUwR7cD+ZMwAvYzyY5A3hBG/iJrJfqvYcF2g9GNZFwYI4MsgrYh8SM4tViEVr//B4AxSGNiCp8Utgyy7qilRWcViEzl/t2cqXxK9p4lG7xkN+nC4qOcNTwtQASmX3WqUA2nt3yb7J9t84iAKYIFvWxdiHLonxs89bfanpgLW9ZG4Dt2YycGZo3+wVbCFDzQ8MlzM+ibTXifaTYyWWIEEZFrm3nkVQxsu337VGUdtA60uM8GxawG7zARWeoE+6wC+E2G6kUyXYybm5IBDXQMYWprjhWLyAB1D+bjXzldcG8rUvbk2zHzzg4BEf36kzHwqmCWiuxKKtzGTZce5XQqF1Jd8p9c/Gc\\\\u003d\\\",\\\"ephemeralPublicKey\\\":\\\"BGJ+y+S+rQ+6IywwstXdh2nzHwP3LKcvI58XAN3LW3PoSNlWuNluRJ6cJ3dn7XP6dl+m2y8SuzXFxelPspg8moY\\\\u003d\\\",\\\"tag\\\":\\\"v8r09doA5qKuA8SeLuQVgKCsJxdorUgoj/Rmh0/5MLk\\\\u003d\\\"}\"}",
          "EntryMode": "Manual"
          }
    ex_rep_Sale_GPay:
      summary: GPay Sale
      description: Standard GPay Sale response
      value: |
        {
          "AccountNum": "478825******8291",
          "AuthAmt": "1213",
          "AuthCode": "TAS110",
          "Brand": "Visa",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL TAS110 ",
          "ExpDate": "1250",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "GTRC": "1b9d6a04dab84eda9aacc051c1e10ac6",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL TAS110 ",
          "Status": "success"
        }
    ex_req_CreateQRCode_Dynamic_QRPay:
      summary: Create Dynamic QRCode(text format)
      description: Create Dynamic QRCode request
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "CreateQRCode",
          "MainAmt":"600",
          "TipAmt":"100", 
          "QRCodeType":"Dynamic",
          "QRCodeFormat":"text"
          }
    ex_rep_CreateQRCode_Dynamic_QRPay:
      summary: Create Dynamic QRCode (text format)
      description: Create Dynamic QRCode response
      value: |
        {
           "ErrorCode": "100",
           "ErrorText": "No Error",
           "QRCodeContext": "https://gatewayapidocs.netevia.com/qrpay?GTRC=65eb34bfcbd34a79b5b6ce201484f9d0",
           "QRCodeID": "65eb34bfcbd34a79b5b6ce201484f9d0",
           "QRCodeType": "Dynamic",
           "ResponseCode": "00",
           "ResponseText": "No Error",
           "ResultCode": "100",
           "ResultText": "No Error",
           "Status": "success"
        }
    ex_req_CreateQRCode_Dynamic_SVG_QRPay:
      summary: Create Dynamic QRCode(SVG image format)
      description: Create Dynamic QRCode request, and the QRcode format is image, image is encode with SVG.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "CreateQRCode",
          "MainAmt":"600",
          "TipAmt":"100", 
          "QRCodeType":"Dynamic",
          "QRCodeFormat":"svg"
          }
    ex_rep_CreateQRCode_Dynamic_SVG_QRPay:
      summary: Create Dynamic QRCode(SVG image format)
      description: Create Dynamic QRCode response
      value: |
        {
           "ErrorCode": "100",
           "ErrorText": "No Error",
           "QRCodeContext": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 37 37\" stroke=\"none\">\n\t<rect width=\"100%\" height=\"100%\" fill=\"#FFFFFF\"/>\n\t<path d=\"M4,4h1v1h-1z M5,4h1v1h-1z M6,4h1v1h-1z M7,4h1v1h-1z M8,4h1v1h-1z M9,4h1v1h-1z M10,4h1v1h-1z M14,4h1v1h-1z M15,4h1v1h-1z M16,4h1v1h-1z M18,4h1v1h-1z M19,4h1v1h-1z M22,4h1v1h-1z M23,4h1v1h-1z M24,4h1v1h-1z M26,4h1v1h-1z M27,4h1v1h-1z M28,4h1v1h-1z M29,4h1v1h-1z M30,4h1v1h-1z M31,4h1v1h-1z M32,4h1v1h-1z M4,5h1v1h-1z M10,5h1v1h-1z M12,5h1v1h-1z M13,5h1v1h-1z M14,5h1v1h-1z M15,5h1v1h-1z M16,5h1v1h-1z M18,5h1v1h-1z M19,5h1v1h-1z M20,5h1v1h-1z M21,5h1v1h-1z M26,5h1v1h-1z M32,5h1v1h-1z M4,6h1v1h-1z M6,6h1v1h-1z M7,6h1v1h-1z M8,6h1v1h-1z M10,6h1v1h-1z M12,6h1v1h-1z M13,6h1v1h-1z M15,6h1v1h-1z M16,6h1v1h-1z M17,6h1v1h-1z M18,6h1v1h-1z M19,6h1v1h-1z M22,6h1v1h-1z M23,6h1v1h-1z M24,6h1v1h-1z M26,6h1v1h-1z M28,6h1v1h-1z M29,6h1v1h-1z M30,6h1v1h-1z M32,6h1v1h-1z M4,7h1v1h-1z M6,7h1v1h-1z M7,7h1v1h-1z M8,7h1v1h-1z M10,7h1v1h-1z M13,7h1v1h-1z M14,7h1v1h-1z M17,7h1v1h-1z M18,7h1v1h-1z M19,7h1v1h-1z M20,7h1v1h-1z M21,7h1v1h-1z M22,7h1v1h-1z M26,7h1v1h-1z M28,7h1v1h-1z M29,7h1v1h-1z M30,7h1v1h-1z M32,7h1v1h-1z M4,8h1v1h-1z M6,8h1v1h-1z M7,8h1v1h-1z M8,8h1v1h-1z M10,8h1v1h-1z M13,8h1v1h-1z M14,8h1v1h-1z M15,8h1v1h-1z M16,8h1v1h-1z M21,8h1v1h-1z M22,8h1v1h-1z M23,8h1v1h-1z M26,8h1v1h-1z M28,8h1v1h-1z M29,8h1v1h-1z M30,8h1v1h-1z M32,8h1v1h-1z M4,9h1v1h-1z M10,9h1v1h-1z M13,9h1v1h-1z M14,9h1v1h-1z M15,9h1v1h-1z M17,9h1v1h-1z M18,9h1v1h-1z M21,9h1v1h-1z M22,9h1v1h-1z M23,9h1v1h-1z M24,9h1v1h-1z M26,9h1v1h-1z M32,9h1v1h-1z M4,10h1v1h-1z M5,10h1v1h-1z M6,10h1v1h-1z M7,10h1v1h-1z M8,10h1v1h-1z M9,10h1v1h-1z M10,10h1v1h-1z M12,10h1v1h-1z M14,10h1v1h-1z M16,10h1v1h-1z M18,10h1v1h-1z M20,10h1v1h-1z M22,10h1v1h-1z M24,10h1v1h-1z M26,10h1v1h-1z M27,10h1v1h-1z M28,10h1v1h-1z M29,10h1v1h-1z M30,10h1v1h-1z M31,10h1v1h-1z M32,10h1v1h-1z M13,11h1v1h-1z M14,11h1v1h-1z M15,11h1v1h-1z M16,11h1v1h-1z M17,11h1v1h-1z M18,11h1v1h-1z M19,11h1v1h-1z M20,11h1v1h-1z M21,11h1v1h-1z M5,12h1v1h-1z M6,12h1v1h-1z M7,12h1v1h-1z M9,12h1v1h-1z M10,12h1v1h-1z M13,12h1v1h-1z M14,12h1v1h-1z M16,12h1v1h-1z M21,12h1v1h-1z M22,12h1v1h-1z M23,12h1v1h-1z M24,12h1v1h-1z M30,12h1v1h-1z M31,12h1v1h-1z M5,13h1v1h-1z M6,13h1v1h-1z M7,13h1v1h-1z M8,13h1v1h-1z M9,13h1v1h-1z M11,13h1v1h-1z M16,13h1v1h-1z M22,13h1v1h-1z M23,13h1v1h-1z M26,13h1v1h-1z M28,13h1v1h-1z M31,13h1v1h-1z M32,13h1v1h-1z M4,14h1v1h-1z M6,14h1v1h-1z M8,14h1v1h-1z M10,14h1v1h-1z M17,14h1v1h-1z M19,14h1v1h-1z M21,14h1v1h-1z M24,14h1v1h-1z M25,14h1v1h-1z M27,14h1v1h-1z M29,14h1v1h-1z M31,14h1v1h-1z M4,15h1v1h-1z M7,15h1v1h-1z M8,15h1v1h-1z M12,15h1v1h-1z M15,15h1v1h-1z M16,15h1v1h-1z M17,15h1v1h-1z M19,15h1v1h-1z M20,15h1v1h-1z M23,15h1v1h-1z M25,15h1v1h-1z M27,15h1v1h-1z M29,15h1v1h-1z M31,15h1v1h-1z M32,15h1v1h-1z M4,16h1v1h-1z M7,16h1v1h-1z M10,16h1v1h-1z M12,16h1v1h-1z M13,16h1v1h-1z M14,16h1v1h-1z M15,16h1v1h-1z M17,16h1v1h-1z M18,16h1v1h-1z M19,16h1v1h-1z M21,16h1v1h-1z M22,16h1v1h-1z M23,16h1v1h-1z M24,16h1v1h-1z M27,16h1v1h-1z M29,16h1v1h-1z M30,16h1v1h-1z M4,17h1v1h-1z M5,17h1v1h-1z M6,17h1v1h-1z M7,17h1v1h-1z M9,17h1v1h-1z M13,17h1v1h-1z M14,17h1v1h-1z M15,17h1v1h-1z M18,17h1v1h-1z M20,17h1v1h-1z M21,17h1v1h-1z M22,17h1v1h-1z M23,17h1v1h-1z M24,17h1v1h-1z M26,17h1v1h-1z M27,17h1v1h-1z M30,17h1v1h-1z M32,17h1v1h-1z M4,18h1v1h-1z M8,18h1v1h-1z M10,18h1v1h-1z M11,18h1v1h-1z M13,18h1v1h-1z M14,18h1v1h-1z M16,18h1v1h-1z M20,18h1v1h-1z M22,18h1v1h-1z M23,18h1v1h-1z M28,18h1v1h-1z M31,18h1v1h-1z M32,18h1v1h-1z M7,19h1v1h-1z M8,19h1v1h-1z M15,19h1v1h-1z M16,19h1v1h-1z M17,19h1v1h-1z M19,19h1v1h-1z M20,19h1v1h-1z M24,19h1v1h-1z M25,19h1v1h-1z M28,19h1v1h-1z M31,19h1v1h-1z M4,20h1v1h-1z M8,20h1v1h-1z M10,20h1v1h-1z M13,20h1v1h-1z M14,20h1v1h-1z M15,20h1v1h-1z M16,20h1v1h-1z M18,20h1v1h-1z M22,20h1v1h-1z M27,20h1v1h-1z M28,20h1v1h-1z M29,20h1v1h-1z M32,20h1v1h-1z M5,21h1v1h-1z M6,21h1v1h-1z M7,21h1v1h-1z M11,21h1v1h-1z M16,21h1v1h-1z M18,21h1v1h-1z M20,21h1v1h-1z M25,21h1v1h-1z M27,21h1v1h-1z M4,22h1v1h-1z M6,22h1v1h-1z M8,22h1v1h-1z M10,22h1v1h-1z M14,22h1v1h-1z M15,22h1v1h-1z M17,22h1v1h-1z M18,22h1v1h-1z M19,22h1v1h-1z M20,22h1v1h-1z M24,22h1v1h-1z M29,22h1v1h-1z M30,22h1v1h-1z M6,23h1v1h-1z M7,23h1v1h-1z M8,23h1v1h-1z M11,23h1v1h-1z M12,23h1v1h-1z M14,23h1v1h-1z M15,23h1v1h-1z M16,23h1v1h-1z M17,23h1v1h-1z M20,23h1v1h-1z M21,23h1v1h-1z M23,23h1v1h-1z M24,23h1v1h-1z M27,23h1v1h-1z M29,23h1v1h-1z M30,23h1v1h-1z M5,24h1v1h-1z M6,24h1v1h-1z M7,24h1v1h-1z M9,24h1v1h-1z M10,24h1v1h-1z M11,24h1v1h-1z M14,24h1v1h-1z M15,24h1v1h-1z M16,24h1v1h-1z M18,24h1v1h-1z M21,24h1v1h-1z M22,24h1v1h-1z M23,24h1v1h-1z M24,24h1v1h-1z M25,24h1v1h-1z M26,24h1v1h-1z M27,24h1v1h-1z M28,24h1v1h-1z M29,24h1v1h-1z M30,24h1v1h-1z M32,24h1v1h-1z M12,25h1v1h-1z M14,25h1v1h-1z M17,25h1v1h-1z M22,25h1v1h-1z M23,25h1v1h-1z M24,25h1v1h-1z M28,25h1v1h-1z M29,25h1v1h-1z M32,25h1v1h-1z M4,26h1v1h-1z M5,26h1v1h-1z M6,26h1v1h-1z M7,26h1v1h-1z M8,26h1v1h-1z M9,26h1v1h-1z M10,26h1v1h-1z M13,26h1v1h-1z M14,26h1v1h-1z M18,26h1v1h-1z M21,26h1v1h-1z M22,26h1v1h-1z M23,26h1v1h-1z M24,26h1v1h-1z M26,26h1v1h-1z M28,26h1v1h-1z M30,26h1v1h-1z M4,27h1v1h-1z M10,27h1v1h-1z M12,27h1v1h-1z M14,27h1v1h-1z M15,27h1v1h-1z M18,27h1v1h-1z M20,27h1v1h-1z M23,27h1v1h-1z M24,27h1v1h-1z M28,27h1v1h-1z M29,27h1v1h-1z M32,27h1v1h-1z M4,28h1v1h-1z M6,28h1v1h-1z M7,28h1v1h-1z M8,28h1v1h-1z M10,28h1v1h-1z M13,28h1v1h-1z M16,28h1v1h-1z M19,28h1v1h-1z M21,28h1v1h-1z M24,28h1v1h-1z M25,28h1v1h-1z M26,28h1v1h-1z M27,28h1v1h-1z M28,28h1v1h-1z M29,28h1v1h-1z M30,28h1v1h-1z M4,29h1v1h-1z M6,29h1v1h-1z M7,29h1v1h-1z M8,29h1v1h-1z M10,29h1v1h-1z M12,29h1v1h-1z M13,29h1v1h-1z M15,29h1v1h-1z M17,29h1v1h-1z M18,29h1v1h-1z M19,29h1v1h-1z M20,29h1v1h-1z M21,29h1v1h-1z M23,29h1v1h-1z M28,29h1v1h-1z M30,29h1v1h-1z M32,29h1v1h-1z M4,30h1v1h-1z M6,30h1v1h-1z M7,30h1v1h-1z M8,30h1v1h-1z M10,30h1v1h-1z M12,30h1v1h-1z M13,30h1v1h-1z M14,30h1v1h-1z M16,30h1v1h-1z M17,30h1v1h-1z M18,30h1v1h-1z M20,30h1v1h-1z M22,30h1v1h-1z M23,30h1v1h-1z M25,30h1v1h-1z M32,30h1v1h-1z M4,31h1v1h-1z M10,31h1v1h-1z M12,31h1v1h-1z M13,31h1v1h-1z M16,31h1v1h-1z M18,31h1v1h-1z M20,31h1v1h-1z M22,31h1v1h-1z M24,31h1v1h-1z M28,31h1v1h-1z M29,31h1v1h-1z M31,31h1v1h-1z M4,32h1v1h-1z M5,32h1v1h-1z M6,32h1v1h-1z M7,32h1v1h-1z M8,32h1v1h-1z M9,32h1v1h-1z M10,32h1v1h-1z M13,32h1v1h-1z M18,32h1v1h-1z M20,32h1v1h-1z M23,32h1v1h-1z M24,32h1v1h-1z M25,32h1v1h-1z M26,32h1v1h-1z M27,32h1v1h-1z M28,32h1v1h-1z M31,32h1v1h-1z\" fill=\"#000000\"/>\n</svg>\n",
           "QRCodeID": "65eb34bfcbd34a79b5b6ce201484f9d0",
           "QRCodeType": "Dynamic",
           "ResponseCode": "00",
           "ResponseText": "No Error",
           "ResultCode": "100",
           "ResultText": "No Error",
           "Status": "success"
        }
    ex_req_CreateQRCode_Static_QRPay:
      summary: Create Static QRCode(text format)
      description: Create Static QRCode request
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "CreateQRCode",
          "QRCodeType":"Static",
          "QRCodeFormat":"text"
          }
    ex_rep_CreateQRCode_Static_QRPay:
      summary: Create Static QRCode(text format)
      description: Create Static QRCode response
      value: |
        {
           "ErrorCode": "100",
           "ErrorText": "No Error",
           "QRCodeContext": "https://gatewayapidocs.netevia.com/qrpay?GTRC=65eb34bfcbd34a79b5b6ce201484f9d0",
           "QRCodeID": "65eb34bfcbd34a79b5b6ce201484f9d0",
           "QRCodeType": "Static",
           "ResponseCode": "00",
           "ResponseText": "No Error",
           "ResultCode": "100",
           "ResultText": "No Error",
           "Status": "success"
        }
    ex_req_GetQRPayInfo_QRPay:
      summary: Get QRCode Information
      description: Get QRCode Information request
      value: |
        {
          "TransType": "GetQRPayInfo",
          "QRCodeID":"65eb34bfcbd34a79b5b6ce201484f9d0"
        }
    ex_rep_GetQRPayInfo_QRPay:
      summary: Get QRCode Information
      description: Get QRCode Information response
      value: |
        {
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "GMID": "1110100847",
          "GTID": "GT1120025150",
          "MainAmt": "600",
          "TipAmt": "100",
          "QRCodeType": "Dynamic",
          "QRCodeID":"65eb34bfcbd34a79b5b6ce201484f9d0",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "Status": "success"
        }
    ex_req_QRPaySale_QRPay:
      summary: QRCode Sale
      description: QRCode Sale request
      value: |
        {
          "TransType": "QRPaySale",
          "Medium": "Credit",
          "AccountNum": "4788250000028291",
          "ExpDate": "1250",          
          "QRCodeID":"65eb34bfcbd34a79b5b6ce201484f9d0"
        }
    ex_rep_QRPaySale_QRPay:
      summary: QRCode Sale
      description: QRCode Sale request reply
      value: |
        {
          "AccountNum": "401200******0016",
          "AuthAmt": "700",
          "AuthCode": "37979A",
          "Brand": "Visa",
          "EntryMode": "Manual",
          "GMID": "1110100847",
          "GTID": "GT1120025150",
          "GTRC": "c98bbe85ff8942f5b787e33e7b1b54a3",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "Status": "success"
        }        
    ex_req_GetQRPayResult_QRPay:
      summary: GetQRPayResult
      description: Inquiry QRCode Sale Result request
      value: |
        {
          "TransType": "GetQRPayResult",
          "QRCodeID":"65eb34bfcbd34a79b5b6ce201484f9d0"
        }
    ex_rep_GetQRPayResult_QRPay:
      summary: GetQRPayResult
      description: Inquiry QRCode Sale Result reply
      value: |
        {
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "Status": "success",
          "TransactionStatus": "success",
           "QRCodeID": "6dbb681d80cb4ea49dff92bcc4963a7c"         
        }   
    ex_req_PDC_Sale_CardRead:
      summary: Sale
      description: Standard basic Sale request to a PDC to read card data.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "AllowsPartialAuth": "N",
          "MainAmt": "500",
          "TipAmt": "100",
          "InvoiceNum": "000004",
          "TransType": "Sale",
          "IsOffline": "N",
          "SourceTraceNum": "000004",
          "Medium": "Credit",
          "NeedSwipeCard": "Y"
        }
    ex_rep_PDC_Sale_CardRead:
      summary: Sale
      description: Standard basic Sale reply from a PDC.
      value: |
        {
          "AccountNum": "401200******0016",
          "AuthAmt": "600",
          "AuthCode": "37979A",
          "Brand": "Visa",
          "EntryMode": "Swipe",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "c98bbe85ff8942f5b787e33e7b1b54a3",
          "Medium": "Credit",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "Status": "success"
        }
    ex_req_PDC_Sale_WithTip:
      summary: Sale with tip entry on pinpad
      description: '<span style="color:red">It is mandatory to include "NeedSwipeCard":"Y" and "RequestTipAmount":"Y" to trigger the tip entry on the pinpad! If "TipAmountRate" is not supplied the cardholder will be asked to manually key in the TIP amount. The TIP value will be returned in the reply: "TipAmt": "500"</span>'
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "Sale",
          "NeedSwipeCard": "Y",
          "RequestTipAmount":"Y",
          "TipAmountRate":"10,22,25",
          "ServiceAmt":"5000",
          "MainAmt":"3000",
          "Medium": "Credit",
          "InvoiceNum": "XCTDCXX34"
          }
    ex_rep_PDC_Sale_WithTip:
      summary: Sale with tip entry on pinpad
      description: <span style="color:red">It is mandatory to include "NeedSwipeCard":"Y" and "RequestTipAmount":"Y" to trigger the tip entry on the pinpad!</span>
      value: |
        {
          "AccountNum": "541333******0037",
          "AuthAmt": "3500",
          "AuthCode": "UEQC6Q",
          "AuthDate": "20210106",
          "AuthTime": "204727",
          "Brand": "Master",
          "DeviceResultCode": "108",
          "DeviceResultText": "Receipt not requested",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL",
          "ExpDate": "1225",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "2a27eef476f74640a2393c2247b72bf2",
          "MainAmt": "3000",
          "Medium": "Credit",
          "NewRecordCreated": "Y",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "ResultCode": "000",
          "ResultText": "APPROVAL",
          "SN": "03946610",
           "Status": "success",
          "TipAmt": "500"
        }
    ex_req_PDC_Sale_CardReadSig:
      summary: Sale with Electronic Signature Capture
      description: Sale request to a PDC to read card data and also capture electronic signature.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "AllowsPartialAuth": "N",
          "MainAmt": "100",
          "InvoiceNum": "000004",
          "TransType": "Sale",
          "IsOffline": "N",
          "Medium": "Credit",
          "NeedSwipeCard": "Y",
          "NeedSignature":"Y"
        }
    ex_rep_PDC_Sale_CardReadSig:
      summary: Sale with Electronic Signature Capture
      description: Sale reply from a PDC with electronic signature.
      value: |
        {
          "AccountNum": "541333******0037",
          "AuthAmt": "100",
          "AuthCode": "251212",
          "AuthDate": "20200902",
          "AuthTime": "011332",
          "Brand": "Master",
          "DeviceResultCode": "108",
          "DeviceResultText": "Receipt not requested",
          "EntryMode": "Swipe",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL",
          "ExpDate": "1225",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "3259d85ea2c84195a3b4c51c03b5cb03",
          "MainAmt": "100",
          "Medium": "Credit",
          "NewRecordCreated": "Y",
          "RRN": "901221328",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "ResultCode": "000",
          "ResultText": "APPROVAL",
          "SN": "03946610",
          "SignatureData
          "Status": "success",
          "TipAmt": "0"
        }
    ex_req_PDC_SaleTokenGen:
      summary: Sale with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Sale",
          "RequestCardToken":"Y",
          "Medium": "Credit",
          "NeedSwipeCard": "Y",
          "MainAmt": "1000",
          "InvoiceNum": "XCTDC1LM"
          }
    ex_rep_PDC_SaleTokenGen:
      summary: Sale with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "AccountNum": "541333******0037",
          "AuthAmt": "1000",
          "AuthCode": "759586",
          "AuthDate": "20201211",
          "AuthTime": "220326",
          "Brand": "Master",
          "CardToken": "0b360bb3d9d24d35afb6f9dd5f3406",
          "DeviceResultCode": "108",
          "DeviceResultText": "Receipt not requested",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL",
          "ExpDate": "1225",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "da97b2b8d7da464fbaa21d68c32ce071",
          "HolderName": "MTIP04",
          "MainAmt": "1000",
          "Medium": "Credit",
          "NewRecordCreated": "Y",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "ResultCode": "000",
          "ResultText": "APPROVAL",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Sale"
        }
    ex_req_PDC_AuthTokenGen:
      summary: Auth with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "TransType": "Auth",
          "RequestCardToken":"Y",
          "Medium": "Credit",
          "NeedSwipeCard": "Y",
          "MainAmt": "1000",
          "InvoiceNum": "XRTD23KD"
          }
    ex_rep_PDC_AuthTokenGen:
      summary: Auth with card token generation
      description: Any Sale/Auth with "RequestCardToken":"Y" flag will return a card token if the authorization is Approved.
      value: |
        {
          "AccountNum": "541333******0037",
          "AuthAmt": "1000",
          "AuthCode": "769015",
          "AuthDate": "20201212",
          "AuthTime": "110056",
          "Brand": "Master",
          "CardToken": "0b360bb3d9d24d35afb6f9dd5f3406",
          "DeviceResultCode": "108",
          "DeviceResultText": "Receipt not requested",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL",
          "ExpDate": "1225",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "9662cbba9d774ada92569de0fa1c3ad7",
          "HolderName": "MTIP04",
          "MainAmt": "1000",
          "Medium": "Credit",
          "NewRecordCreated": "Y",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "ResultCode": "000",
          "ResultText": "APPROVAL",
          "Status": "success",
          "TipAmt": "0",
          "TransType": "Auth"
        }
    ex_req_PDC_SaleTokenTip:
      summary: Sale using card token and tip entry on pinpad
      description: <span style="color:red">It is mandatory to include "NeedSwipeCard":"Y" and "RequestTipAmount":"Y" to trigger the tip entry on the pinpad!</span>
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "Sale",
          "NeedSwipeCard": "Y",
          "RequestTipAmount":"Y",
          "TipAmountRate":"10,22,25",
          "ServiceAmt":"5000",
          "MainAmt":"0",
          "NeedSignature":"Y",
          "Medium": "Credit",
          "CardToken": "0b360bb3d9d24d35afb6f9dd5f3406",
          "InvoiceNum": "XCTDC1LM"
          }
    ex_rep_PDC_SaleTokenTip:
      summary: Sale using card token and tip entry on pinpad
      description: <span style="color:red">It is mandatory to include "NeedSwipeCard":"Y" and "RequestTipAmount":"Y" to trigger the tip entry on the pinpad!</span>
      value: |
        {
          "AccountNum": "541333******0037",
          "AuthAmt": "500",
          "AuthCode": "UEQC6Q",
          "AuthDate": "20210106",
          "AuthTime": "204727",
          "Brand": "Master",
          "CardToken": "0b360bb3d9d24d35afb6f9dd5f3406",
          "DeviceResultCode": "108",
          "DeviceResultText": "Receipt not requested",
          "ErrorCode": "000",
          "ErrorText": "APPROVAL",
          "ExpDate": "1225",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "2a27eef476f74640a2393c2247b72bf2",
          "MainAmt": "0",
          "Medium": "Credit",
          "NewRecordCreated": "Y",
          "ResponseCode": "00",
          "ResponseText": "APPROVAL",
          "ResultCode": "000",
          "ResultText": "APPROVAL",
          "SN": "03946610",
          "SignatureData": "602D20382020302020302020382020385F20485D20305C20285C213A5D21285F20235F5F5F235E22255F222320302120202020305F20385D20405E20305F202C5F2058205F27205F452020382020285F20305E202C5E20235E20585F5F475F5F56205F27205F2E205F272020205F20585F205870",
          "Status": "success",
          "TipAmt": "500"
        }
    ex_req_PDC_Refund:
      summary: Refund
      description: Refund request to a PDC to read card data.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW3010300378",
          "MainAmt": "500",
          "InvoiceNum": "000123",
          "TransType": "Refund",
          "Medium": "Credit",
          "NeedSwipeCard": "Y"
        }
    ex_rep_PDC_Refund:
      summary: Refund
      description: Refund reply from a PDC.
      value: |
        {
          "AccountNum":"541333******0037",
          "AuthAmt":"500",
          "AuthCode":"273348",
          "AuthDate":"20201126",
          "AuthTime":"123344",
          "Brand":"Master",
          "DeviceResultCode":"108",
          "DeviceResultText":"Receipt not requested",
          "ErrorCode":"000",
          "ErrorText":"SUCCESS",
          "ExpDate":"1225",
          "GMID":"1110222484",
          "GMPW":"GMPW3010300378",
          "GTID":"GT1120095178",
          "GTRC":"3bd61cc9c1b54330a3e0299d192bb0d0",
          "HolderName":"MTIP04",
          "MainAmt":"500",
          "Medium":"Credit",
          "NewRecordCreated":"Y",
          "ResponseCode":"00",
          "ResponseText":"SUCCESS",
          "ResultCode":"000",
          "ResultText":"SUCCESS",
          "Status":"success",
          "TipAmt":"0"
        }
    ex_req_PDC_Register:
      summary: Register
      description: |-
        Register a new device(it is mandatory to be connected):<br>
        - if the serial number has been registered by other GMID, it will return error.
        - if the serial number has been registered by other GTID corresponding to this GMID, it will return the corresponding GTID.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "Register",
          "SN": "15297PP12345678"
        }
    ex_rep_PDC_Register:
      summary: Register
      description: Register a new device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "121546",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW1001396467",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "SN": "12345678",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_RegisterWithoutGTID:
      summary: Register with GTID generation
      description: Register a new device(it is mandatory to be connected) for a GMID and generate a new GTID for it.
      value: |
        {
          "GMID": "1110222484",
          "TransType": "Register",
          "SN": "15297PP12345678"
        }
    ex_rep_PDC_RegisterWithoutGTID:
      summary: Register with GTID generation
      description: Register a new device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "121546",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW1001396467",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "SN": "12345678",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_RegisterOffline:
      summary: Register while PinPad is offline
      description: Register a new device, even if it is not connected.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "Register",
          "IsOffline": "Y",
          "SN": "15297PP12345678"
        }
    ex_rep_PDC_RegisterOffline:
      summary: Register while PinPad is offline
      description: Register a new device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "121546",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GMPW": "GMPW1001396467",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "SN": "12345678",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_Unregister:
      summary: Unregister
      description: Unregister a device.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "Unregister",
          "SN": "15297PP12345678"
        }
    ex_rep_PDC_Unregister:
      summary: Unregister
      description: Unregister a device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "124508",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "ResultCode": "100",
          "ResultText": "No Error",
          "SN": "12345678",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_GetStatus:
      summary: GetStatus
      description: Get connection status for a device.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "GetStatus"
        }
    ex_rep_PDC_GetStatus:
      summary: GetStatus
      description: Get connection status for a device.
      value: |
        {
          "DeviceStatus": "ON",
          "ErrorCode": "100",
          "ErrorText": "No Error",
          "SN": "12345678",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "No Error",
          "Status": "success",
          "TransType": "GetStatus"
        } 
    ex_req_PDC_GetStatusBySN:
      summary: GetStatus by SN
      description: Get registerd values for a device using the SN.
      value: |
        {
          "SN": "15297PP12345678",
          "TransType": "GetStatus"
        }
    ex_rep_PDC_GetStatusBySN:
      summary: GetStatus by SN
      description: Get registerd values for a device using the SN.
      value: |
        {
          "AuthDate": "20210811",
          "AuthTime": "105654",
          "DeviceStatus": "OFF",
          "ErrorCode": "162",
          "ErrorText": "No Terminal Serial Number registered for TID.",
          "IsRegistered": "Y",
          "RegisteredGMID": "1001396250",
          "RegisteredGTID": "GT1001396399",
          "RegisteredSN": "12345678",
          "ResponseCode": "62",
          "ResponseText": "No Terminal Serial Number registered for TID.",
          "ResultCode": "162",
          "ResultText": "No Terminal Serial Number registered for TID.",
          "SignatureData": "",
          "Status": "fail",
          "TransType": "GetStatus"
        }
    ex_req_PDC_AskNumberQuestion:
      summary: AskNumberQuestion
      description: |
        Get user numeric input on the device using predefined text messages. The input value is going to be returned in the "ResponseText" field.
        MessageIndex: 

        - 001 : "Please enter your home phone number"
        - 002 : "Please enter your 10-digit HOME phone number"
        - 003 : "Please enter your date of birth"
        - 004 : "Please Enter ZIP Code"
        - 010 : "Enter Card Number"
        - 011 : "Enter Expiration Date"
        - 012 : "Enter CVV or CID from card"
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "AskNumberQuestion",
          "MessageIndex": "001"
        }
    ex_rep_PDC_AskNumberQuestion:
      summary: AskNumberQuestion
      description: Get user numeric input on the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "135043",
          "ErrorCode": "100",
          "ErrorText": "1234567890",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "1234567890",
          "ResultCode": "100",
          "ResultText": "1234567890",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_AskSelectionQuestion:
      summary: AskSelectionQuestion
      description: Get user selection result on the device. The text from the field "MessageText" is going to be displayed on the device screen and the response options are "YES"/"NO". The result is going to be returned in the "ResponseText" with the values "Y"/"N".
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "AskSelectionQuestion",
          "MessageText": "Are you sure?"
        }
    ex_rep_PDC_AskSelectionQuestion:
      summary: AskSelectionQuestion
      description: Get user selection result on the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "135547",
          "ErrorCode": "100",
          "ErrorText": "N",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Y",
          "ResultCode": "100",
          "ResultText": "N",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_ShowMessage:
      summary: ShowMessage
      description: Display message on the device.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "ShowMessage",
          "MessageText": "Happy Birthday!"
        }
    ex_rep_PDC_ShowMessage:
      summary: ShowMessage
      description: Display message on the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "140342",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_UploadImage:
      summary: UploadImage
      description: Upload an image to the device that it is going to be displayed in offline mode if enabled. ImageData has to be encoded in base64.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "UploadImage",
          "Model": "L3000",
         "ImageID": "001",
          "ImageData": "ABC",
          "ImageLength":"3"
        }
    ex_rep_PDC_UploadImage:
      summary: UploadImage
      description: Upload image to the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "140342",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_SetImageList:
      summary: SetImageList
      description: Set up the indexes of the images that need to be displayed on the device during offline mode(we support up to 13 images).
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "SetImageList",
          "Model": "L3000",
         "ImageList": "001,002,003,004,005,006,007,008,009,010,011,012,013"
        }
    ex_rep_PDC_SetImageList:
      summary: SetImageList
      description: Set up the indexes of the images that need to be displayed on the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "140342",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_ResetMessage:
      summary: ResetMessage
      description: It is used to restore built-in messages on the device.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "ResetMessage"
        }
    ex_rep_PDC_ResetMessage:
      summary: ResetMessage
      description: It is used to restore built-in messages on the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "140342",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_RebootDevice:
      summary: RebootDevice
      description: Reboot the device.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "RebootDevice"
        }
    ex_rep_PDC_RebootDevice:
      summary: RebootDevice
      description: Reboot the device.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "140342",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_UploadFile:
      summary: UploadFile
      description: It is used to upload the configuration files to the device. After uploading successfully, you’d better restart the PIN pad. The configuration file named “CUSTPROMPT.PGZ”(tip entry messages) exists on our server. You can send the request message with your GMID,GTID and upload it.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "UploadFile",
          "FileName":"CUSTPROMPT.PGZ"
        }
    ex_rep_PDC_UploadFile:
      summary: UploadFile
      description: It is used to upload the configuration files to the device. After uploading successfully, you’d better restart the PIN pad. The configuration file named “CUSTPROMPT.PGZ”(tip entry messages) exists on our server. You can send the request message with your GMID,GTID and upload it.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "140342",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "",
          "Status": "success"
        } 
    ex_req_PDC_PrintReceipt:
      summary: PrintReceipt
      description: Used for re-printing receipts.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "PrintReceipt",
          "GTRC":"aabc17fb93b64a1aa01838946fd1ee57"
        }
    ex_rep_PDC_PrintReceipt:
      summary: PrintReceipt
      description: Used for re-printing receipts.
      value: |
        {
          "AuthDate": "20200519",
          "AuthTime": "141701",
          "DeviceResultCode": "100",
          "DeviceResultText": "Successful",
          "ErrorCode": "100",
          "ErrorText": "Successful",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "GTRC": "aabc17fb93b64a1aa01838946fd1ee57",
          "ResponseCode": "00",
          "ResponseText": "Successful",
          "SignatureData": "",
          "Status": "success"
        }
    ex_req_PDC_ESignature:
      summary: ElectronicSignature
      description: Used for capturing client's electronic signature on request without performing a transaction.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "ESignature"
        }
    ex_rep_PDC_ESignature:
      summary: ElectronicSignature
      description: Used for capturing client's electronic signature on request without performing a transaction.
      value: |
        {
          "AuthDate": "20200929",
          "AuthTime": "030925",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "60292146205f26205f2e205f275f5f5f205f26205f25205f2d2020305f20582020207060202027205f27202020205f46215f2421205021205821205021203821203020203870602220482020205f20405f20385f205020202020205821205022204823203022204870",
          "Status": "success"
        }
    ex_req_PDC_ESignatureCustom:
      summary: ElectronicSignature Custom Prompt
      description: Used for capturing client's electronic signature on request without performing a transaction with a custom prompt.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "ESignature",
          "MessageText":"Please sign below"
        }
    ex_rep_PDC_ESignatureCustom:
      summary: ElectronicSignature Custom Prompt
      description: Used for capturing client's electronic signature on request without performing a transaction with a a custom prompt.
      value: |
        {
          "AuthDate": "20200929",
          "AuthTime": "030925",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "60292146205f26205f2e205f275f5f5f205f26205f25205f2d2020305f20582020207060202027205f27202020205f46215f2421205021205821205021203821203020203870602220482020205f20405f20385f205020202020205821205022204823203022204870",
          "Status": "success"
        }
    ex_req_PDC_ESignatureTaC:
      summary: ElectronicSignature with T&C
      description: Used for capturing client's electronic signature for custom Terms&Conditions.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "ESignature",
          "TermsAndConditions":"I, the undersigned, certify that the person for whom the prescription was written is eligible for benefits. I have received the prescription listed and authorize the release of all information contained, the prescription to which it corresponds and subsequent claim to all parties concerned. I further certify that this medication is NOT covered by any other insurance plan other than the one I previously indicated and I hereby assign any payment due pursuant to this transaction to the pharmacy shown. I certify that I am the patient or the patient's authorized representative and I have the legal right to obtain patient records.   PLEASE NOTE: In the event that your insurance company fails to pay this claim, for any reason, by accepting below you agree to reimburse the pharmacy."
        }
    ex_rep_PDC_ESignatureTaC:
      summary: ElectronicSignature with T&C
      description: Used for capturing client's electronic signature for custom Terms&Conditions.
      value: |
        {
          "AuthDate": "20200929",
          "AuthTime": "030925",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "60292146205f26205f2e205f275f5f5f205f26205f25205f2d2020305f20582020207060202027205f27202020205f46215f2421205021205821205021203821203020203870602220482020205f20405f20385f205020202020205821205022204823203022204870",
          "Status": "success"
        }
    ex_req_PDC_ESignatureTaCCustom:
      summary: ElectronicSignature with T&C and custom prompt
      description: Used for capturing client's electronic signature for custom Terms&Conditions with custom prompt.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "TransType": "ESignature",
          "TermsAndConditions":"I, the undersigned, certify that the person for whom the prescription was written is eligible for benefits. I have received the prescription listed and authorize the release of all information contained, the prescription to which it corresponds and subsequent claim to all parties concerned. I further certify that this medication is NOT covered by any other insurance plan other than the one I previously indicated and I hereby assign any payment due pursuant to this transaction to the pharmacy shown. I certify that I am the patient or the patient's authorized representative and I have the legal right to obtain patient records.   PLEASE NOTE: In the event that your insurance company fails to pay this claim, for any reason, by accepting below you agree to reimburse the pharmacy.",
          "MessageText":"Please sign below"
        }
    ex_rep_PDC_ESignatureTaCCustom:
      summary: ElectronicSignature with T&C and custom prompt
      description: Used for capturing client's electronic signature for custom Terms&Conditions with custom prompt.
      value: |
        {
          "AuthDate": "20200929",
          "AuthTime": "030925",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "SignatureData": "60292146205f26205f2e205f275f5f5f205f26205f25205f2d2020305f20582020207060202027205f27202020205f46215f2421205021205821205021203821203020203870602220482020205f20405f20385f205020202020205821205022204823203022204870",
          "Status": "success"
        }
    ex_req_PDC_CardRead:
      summary: CardRead - Gift Cards only
      description: Used for capturing Gift card details.
      value: |
        {
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "Medium":"Gift",
          "TransType": "CardRead"
        }
    ex_rep_PDC_CardRead:
      summary: CardRead - Gift Cards only
      description: Used for capturing Gift card details.
      value: |
        {
          "AuthDate": "20200929",
          "AuthTime": "030925",
          "ErrorCode": "100",
          "ErrorText": "Complete",
          "GMID": "1110222484",
          "GTID": "GT1120095178",
          "ResponseCode": "00",
          "ResponseText": "Complete",
          "ResultCode": "100",
          "ResultText": "Complete",
          "Track1": "MerchantNameGiftCard",
          "Track2": "1234567890",
          "Track3": "$100",
          "Status": "success"
        }
  requestBodies:
    genericRequest:
      description: Generic Request body
      content:
        application/json:
          schema:
            allOf:
              # - $ref: '#/components/schemas/grp_configure'
              # - $ref: '#/components/schemas/grp_action'
              - anyOf:
                  - $ref: '#/components/schemas/grp_amount'
                  - $ref: '#/components/schemas/grp_extendInfo'
                  - $ref: '#/components/schemas/grp_Lvl3'
                  - $ref: '#/components/schemas/grp_trace'
                  - $ref: '#/components/schemas/grp_cardInfo'
                  - $ref: '#/components/schemas/grp_terminalInfo'
                  - $ref: '#/components/schemas/grp_EMV'
                  - $ref: '#/components/schemas/grp_cardDataEncryption'
                  - $ref: '#/components/schemas/grp_PIN'
      required: true
