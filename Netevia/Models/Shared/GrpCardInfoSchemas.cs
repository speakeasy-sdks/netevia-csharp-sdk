
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Netevia.Models.Shared
{
    using Netevia.Models.Shared;
    using Newtonsoft.Json;
    
    /// <summary>
    /// NOTE: This subgroup is only used when card info is from POS, not PDC.&lt;br&gt;<br/>
    /// 
    /// <remarks>
    ///       When sent to a PDC, NeedSwipeCard must be “N”.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public class GrpCardInfoSchemas
    {

        /// <summary>
        /// Card number. Maximum length = 22. Must be present when card info is from POS and encrypted.&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// If this field and ExpDate are set in the request, it does not need to provide Track1, Track2, CardToken. And EntryMode needs to be set to Manual.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("AccountNum")]
        public string? AccountNum { get; set; }

        /// <summary>
        /// Indicates whether partial authorization is allowed.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("AllowsPartialAuth")]
        public SchemasGrpCardInfoAllowsPartialAuth? AllowsPartialAuth { get; set; }

        /// <summary>
        /// Card verification code on the card.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CVVNum")]
        public string? CVVNum { get; set; }

        /// <summary>
        /// Indicates whether the card is present.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CardPresent")]
        public SchemasCardPresent? CardPresent { get; set; }

        /// <summary>
        /// It can replace AccountNum and ExpDate. Only support in json request.&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// If this field is set in the request, it does not need to provide AccountNum, ExpDate, Track1, Track2. And EntryMode needs to be set to Manual.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CardToken")]
        public string? CardToken { get; set; }

        /// <summary>
        /// Indicates whether to check for duplicate transactions.&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// Duplicate check interval: 1 minute.&lt;br&gt;<br/>
        /// Note: you need to supply this field in all the request to enable this feature.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CheckDuplicate")]
        public SchemasGrpCardInfoCheckDuplicate? CheckDuplicate { get; set; }

        /// <summary>
        /// Indicates whether the card is Commercial.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CommercialCard")]
        public SchemasCommercialCard? CommercialCard { get; set; }

        /// <summary>
        /// Indicates whether do force void transaction.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CreditOnFailure")]
        public SchemasGrpCardInfoCreditOnFailure? CreditOnFailure { get; set; }

        /// <summary>
        /// Cardholder&apos;s billing address.
        /// </summary>
        [JsonProperty("CustomerAddress")]
        public string? CustomerAddress { get; set; }

        /// <summary>
        /// Cardholder&apos;s billing city.
        /// </summary>
        [JsonProperty("CustomerCity")]
        public string? CustomerCity { get; set; }

        /// <summary>
        /// Cardholder&apos;s name.
        /// </summary>
        [JsonProperty("CustomerName")]
        public string? CustomerName { get; set; }

        /// <summary>
        /// Cardholder&apos;s number.  <br/>
        /// 
        /// <remarks>
        /// Purchase Level2/3 Transaction: This value is used to identify the customer number for purchasing card transactions.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("CustomerNum")]
        public string? CustomerNum { get; set; }

        /// <summary>
        /// Cardholder&apos;s billing State.
        /// </summary>
        [JsonProperty("CustomerState")]
        public string? CustomerState { get; set; }

        /// <summary>
        /// Cardholder&apos;s billing zip code.
        /// </summary>
        [JsonProperty("CustomerZipCode")]
        public string? CustomerZipCode { get; set; }

        /// <summary>
        /// Must be present when card data is provided by the POS.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("EntryMode")]
        public SchemasEntryMode? EntryMode { get; set; }

        /// <summary>
        /// Card expiration Date MMYY. Must be present when card info is from POS and encrypted.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("ExpDate")]
        public string? ExpDate { get; set; }

        /// <summary>
        /// Merchant identifier Assigned by&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// Netevia Payment Systems Administrator during registration<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("GMID")]
        public string Gmid { get; set; } = default!;

        /// <summary>
        /// Merchant password&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// Only verified for Refund transactions.&lt;br&gt;<br/>
        /// It can be any value for other transactions.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("GMPW")]
        public string Gmpw { get; set; } = default!;

        /// <summary>
        /// Merchant&apos;s terminal identifier&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// Assigned by Netevia Payment Systems Administrator during registration.&lt;br&gt;<br/>
        /// This field is Optional when doing Register.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("GTID")]
        public string Gtid { get; set; } = default!;

        /// <summary>
        /// Ignore AVS result from processor, default value is Y, if need to check AVS result please send it in request with N. the feature only works in TSYS and Elavon. Elavon if host return the code (A,B,C,E,N,R,W,Z) and doesnt&apos; ignore avs result code then Netevia will reject the verify request. TSYS if host return N and doesn&apos;t ignore avs result then Netevia will reject the Verify, Auth, Sale request.
        /// </summary>
        [JsonProperty("IgnoreAVSResult")]
        public SchemasGrpCardInfoIgnoreAVSResult? IgnoreAVSResult { get; set; }

        /// <summary>
        /// Ignore CVV result from processor, default value is Y, if need to check CVV result please send it in request with N. the feature only works in TSYS and Elavon. Elavon, if doesn&apos;t Ignore CVV and host return N then Netevia will reject the Verify request. TSYS, if doesn&apos;t ignore cvv and host return N then Netevia will reject the Verify/Auth/Sale request.
        /// </summary>
        [JsonProperty("IgnoreCVVResult")]
        public SchemasGrpCardInfoIgnoreCVVResult? IgnoreCVVResult { get; set; }

        /// <summary>
        /// Ignore Void result from processor. if processor return fail, then we force it to success. Default value is Y,
        /// </summary>
        [JsonProperty("IgnoreVoidResult")]
        public SchemasGrpCardInfoIgnoreVoidResult? IgnoreVoidResult { get; set; }

        /// <summary>
        /// Indicates whether is an offline transaction.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("IsOffline")]
        public SchemasGrpCardInfoIsOffline? IsOffline { get; set; }

        /// <summary>
        /// Card Type. Must be present when card info is from POS.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("Medium")]
        public SchemasMedium? Medium { get; set; }

        /// <summary>
        /// indicate the pay protocol.
        /// </summary>
        [JsonProperty("PayAPI")]
        public SchemasPayAPI? PayAPI { get; set; }

        /// <summary>
        /// It is GPay info and containers the encryption card data.
        /// </summary>
        [JsonProperty("Payload")]
        public string? Payload { get; set; }

        /// <summary>
        /// Indicates whether server should return CardToken.&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// Only support in json request.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("RequestCardToken")]
        public SchemasRequestCardToken? RequestCardToken { get; set; }

        /// <summary>
        /// Full magnetic Track I data read from the card by a card reader.&lt;br&gt;<br/>
        /// 
        /// <remarks>
        ///  If this field is set in the request, it does not need to provide AccountNum, ExpDate, Track2, CardToken. And EntryMode needs to be set to Swipe.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("Track1")]
        public string? Track1 { get; set; }

        /// <summary>
        /// Full magnetic Track II data read from the card by a card reader.&lt;br&gt;<br/>
        /// 
        /// <remarks>
        /// If this field is set in the request, it does not need to provide AccountNum, ExpDate, Track1, CardToken. And EntryMode needs to be set to Swipe.<br/>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("Track2")]
        public string? Track2 { get; set; }

        /// <summary>
        /// Transaction Type.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("TransType")]
        public SchemasGrpCardInfoTransType TransType { get; set; } = default!;

        /// <summary>
        /// Indicates whether verify card when doing CreateCardToken.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("VerifyCard")]
        public SchemasGrpCardInfoVerifyCard? VerifyCard { get; set; }
    }
}