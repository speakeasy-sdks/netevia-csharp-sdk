
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Netevia.Models.Shared
{
    using Netevia.Models.Shared;
    using Netevia.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Numerics;
    using System;
    

    public class RequestGenericType
    {
        private RequestGenericType(string value) { Value = value; }

        public string Value { get; private set; }
        public static RequestGenericType GrpAmountSchemas { get { return new RequestGenericType("grp_amount_Schemas"); } }
        
        public static RequestGenericType GrpExtendInfoSchemas { get { return new RequestGenericType("grp_extendInfo_Schemas"); } }
        
        public static RequestGenericType GrpLvl3Schemas { get { return new RequestGenericType("grp_Lvl3_Schemas"); } }
        
        public static RequestGenericType GrpTraceSchemas1 { get { return new RequestGenericType("grp_trace_Schemas1"); } }
        
        public static RequestGenericType GrpCardInfoSchemas { get { return new RequestGenericType("grp_cardInfo_Schemas"); } }
        
        public static RequestGenericType GrpEMVSchemas { get { return new RequestGenericType("grp_EMV_Schemas"); } }
        
        public static RequestGenericType GrpCardDataEncryptionSchemas { get { return new RequestGenericType("grp_cardDataEncryption_Schemas"); } }
        
        public static RequestGenericType GrpPINSchemas { get { return new RequestGenericType("grp_PIN_Schemas"); } }
        
        public static RequestGenericType Schemas { get { return new RequestGenericType("Schemas"); } }
        
        public static RequestGenericType Null { get { return new RequestGenericType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(RequestGenericType v) { return v.Value; }
        public static RequestGenericType FromString(string v) {
            switch(v) {
                case "grp_amount_Schemas": return GrpAmountSchemas;
                case "grp_extendInfo_Schemas": return GrpExtendInfoSchemas;
                case "grp_Lvl3_Schemas": return GrpLvl3Schemas;
                case "grp_trace_Schemas1": return GrpTraceSchemas1;
                case "grp_cardInfo_Schemas": return GrpCardInfoSchemas;
                case "grp_EMV_Schemas": return GrpEMVSchemas;
                case "grp_cardDataEncryption_Schemas": return GrpCardDataEncryptionSchemas;
                case "grp_PIN_Schemas": return GrpPINSchemas;
                case "Schemas": return Schemas;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for RequestGenericType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((RequestGenericType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    
/// <summary>
/// NOTE: This subgroup is used for all transactions.<br/>
/// 
/// <remarks>
/// 
/// </remarks>
/// </summary>
    [JsonConverter(typeof(RequestGeneric.RequestGenericConverter))]
    public class RequestGeneric {
        public RequestGeneric(RequestGenericType type) {
            Type = type;
        }
        public GrpAmountSchemas? GrpAmountSchemas { get; set; } 
        public GrpExtendInfoSchemas? GrpExtendInfoSchemas { get; set; } 
        public GrpLvl3Schemas? GrpLvl3Schemas { get; set; } 
        public GrpTraceSchemas1? GrpTraceSchemas1 { get; set; } 
        public GrpCardInfoSchemas? GrpCardInfoSchemas { get; set; } 
        public GrpEMVSchemas? GrpEMVSchemas { get; set; } 
        public GrpCardDataEncryptionSchemas? GrpCardDataEncryptionSchemas { get; set; } 
        public GrpPINSchemas? GrpPINSchemas { get; set; } 
        public Schemas? Schemas { get; set; } 

        public RequestGenericType Type { get; set; }


        public static RequestGeneric CreateGrpAmountSchemas(GrpAmountSchemas grpAmountSchemas) {
            RequestGenericType typ = RequestGenericType.GrpAmountSchemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpAmountSchemas = grpAmountSchemas;
            return res;
        }

        public static RequestGeneric CreateGrpExtendInfoSchemas(GrpExtendInfoSchemas grpExtendInfoSchemas) {
            RequestGenericType typ = RequestGenericType.GrpExtendInfoSchemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpExtendInfoSchemas = grpExtendInfoSchemas;
            return res;
        }

        public static RequestGeneric CreateGrpLvl3Schemas(GrpLvl3Schemas grpLvl3Schemas) {
            RequestGenericType typ = RequestGenericType.GrpLvl3Schemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpLvl3Schemas = grpLvl3Schemas;
            return res;
        }

        public static RequestGeneric CreateGrpTraceSchemas1(GrpTraceSchemas1 grpTraceSchemas1) {
            RequestGenericType typ = RequestGenericType.GrpTraceSchemas1;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpTraceSchemas1 = grpTraceSchemas1;
            return res;
        }

        public static RequestGeneric CreateGrpCardInfoSchemas(GrpCardInfoSchemas grpCardInfoSchemas) {
            RequestGenericType typ = RequestGenericType.GrpCardInfoSchemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpCardInfoSchemas = grpCardInfoSchemas;
            return res;
        }

        public static RequestGeneric CreateGrpEMVSchemas(GrpEMVSchemas grpEMVSchemas) {
            RequestGenericType typ = RequestGenericType.GrpEMVSchemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpEMVSchemas = grpEMVSchemas;
            return res;
        }

        public static RequestGeneric CreateGrpCardDataEncryptionSchemas(GrpCardDataEncryptionSchemas grpCardDataEncryptionSchemas) {
            RequestGenericType typ = RequestGenericType.GrpCardDataEncryptionSchemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpCardDataEncryptionSchemas = grpCardDataEncryptionSchemas;
            return res;
        }

        public static RequestGeneric CreateGrpPINSchemas(GrpPINSchemas grpPINSchemas) {
            RequestGenericType typ = RequestGenericType.GrpPINSchemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.GrpPINSchemas = grpPINSchemas;
            return res;
        }

        public static RequestGeneric CreateSchemas(Schemas schemas) {
            RequestGenericType typ = RequestGenericType.Schemas;

            RequestGeneric res = new RequestGeneric(typ);
            res.Schemas = schemas;
            return res;
        }

        public static RequestGeneric CreateNull() {
            RequestGenericType typ = RequestGenericType.Null;
            return new RequestGeneric(typ);
        }

        public class RequestGenericConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(RequestGeneric);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    GrpPINSchemas? grpPINSchemas = JsonConvert.DeserializeObject<GrpPINSchemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpPINSchemas))});
                    return new RequestGeneric(RequestGenericType.GrpPINSchemas) {
                        GrpPINSchemas = grpPINSchemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpTraceSchemas1? grpTraceSchemas1 = JsonConvert.DeserializeObject<GrpTraceSchemas1>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpTraceSchemas1))});
                    return new RequestGeneric(RequestGenericType.GrpTraceSchemas1) {
                        GrpTraceSchemas1 = grpTraceSchemas1
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpCardDataEncryptionSchemas? grpCardDataEncryptionSchemas = JsonConvert.DeserializeObject<GrpCardDataEncryptionSchemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpCardDataEncryptionSchemas))});
                    return new RequestGeneric(RequestGenericType.GrpCardDataEncryptionSchemas) {
                        GrpCardDataEncryptionSchemas = grpCardDataEncryptionSchemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpAmountSchemas? grpAmountSchemas = JsonConvert.DeserializeObject<GrpAmountSchemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpAmountSchemas))});
                    return new RequestGeneric(RequestGenericType.GrpAmountSchemas) {
                        GrpAmountSchemas = grpAmountSchemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpExtendInfoSchemas? grpExtendInfoSchemas = JsonConvert.DeserializeObject<GrpExtendInfoSchemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpExtendInfoSchemas))});
                    return new RequestGeneric(RequestGenericType.GrpExtendInfoSchemas) {
                        GrpExtendInfoSchemas = grpExtendInfoSchemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Schemas? schemas = JsonConvert.DeserializeObject<Schemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Schemas))});
                    return new RequestGeneric(RequestGenericType.Schemas) {
                        Schemas = schemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpLvl3Schemas? grpLvl3Schemas = JsonConvert.DeserializeObject<GrpLvl3Schemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpLvl3Schemas))});
                    return new RequestGeneric(RequestGenericType.GrpLvl3Schemas) {
                        GrpLvl3Schemas = grpLvl3Schemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpCardInfoSchemas? grpCardInfoSchemas = JsonConvert.DeserializeObject<GrpCardInfoSchemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpCardInfoSchemas))});
                    return new RequestGeneric(RequestGenericType.GrpCardInfoSchemas) {
                        GrpCardInfoSchemas = grpCardInfoSchemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpEMVSchemas? grpEMVSchemas = JsonConvert.DeserializeObject<GrpEMVSchemas>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpEMVSchemas))});
                    return new RequestGeneric(RequestGenericType.GrpEMVSchemas) {
                        GrpEMVSchemas = grpEMVSchemas
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                RequestGeneric res = (RequestGeneric)value;
                if (RequestGenericType.FromString(res.Type).Equals(RequestGenericType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.GrpAmountSchemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpAmountSchemas));
                    return;
                }
                if (res.GrpExtendInfoSchemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpExtendInfoSchemas));
                    return;
                }
                if (res.GrpLvl3Schemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpLvl3Schemas));
                    return;
                }
                if (res.GrpTraceSchemas1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpTraceSchemas1));
                    return;
                }
                if (res.GrpCardInfoSchemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpCardInfoSchemas));
                    return;
                }
                if (res.GrpEMVSchemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpEMVSchemas));
                    return;
                }
                if (res.GrpCardDataEncryptionSchemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpCardDataEncryptionSchemas));
                    return;
                }
                if (res.GrpPINSchemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpPINSchemas));
                    return;
                }
                if (res.Schemas != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Schemas));
                    return;
                }

            }
        }

    }

}