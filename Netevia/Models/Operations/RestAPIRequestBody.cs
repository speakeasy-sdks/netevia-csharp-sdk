
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Netevia.Models.Operations
{
    using Netevia.Models.Shared;
    using Netevia.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Numerics;
    using System;
    

    public class RestAPIRequestBodyType
    {
        private RestAPIRequestBodyType(string value) { Value = value; }

        public string Value { get; private set; }
        public static RestAPIRequestBodyType GrpAmount { get { return new RestAPIRequestBodyType("grp_amount"); } }
        
        public static RestAPIRequestBodyType GrpExtendInfo { get { return new RestAPIRequestBodyType("grp_extendInfo"); } }
        
        public static RestAPIRequestBodyType GrpLvl3 { get { return new RestAPIRequestBodyType("grp_Lvl3"); } }
        
        public static RestAPIRequestBodyType GrpTrace { get { return new RestAPIRequestBodyType("grp_trace"); } }
        
        public static RestAPIRequestBodyType GrpCardInfo { get { return new RestAPIRequestBodyType("grp_cardInfo"); } }
        
        public static RestAPIRequestBodyType GrpTerminalInfo { get { return new RestAPIRequestBodyType("grp_terminalInfo"); } }
        
        public static RestAPIRequestBodyType GrpEMV { get { return new RestAPIRequestBodyType("grp_EMV"); } }
        
        public static RestAPIRequestBodyType GrpCardDataEncryption { get { return new RestAPIRequestBodyType("grp_cardDataEncryption"); } }
        
        public static RestAPIRequestBodyType GrpPIN { get { return new RestAPIRequestBodyType("grp_PIN"); } }
        
        public static RestAPIRequestBodyType Null { get { return new RestAPIRequestBodyType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(RestAPIRequestBodyType v) { return v.Value; }
        public static RestAPIRequestBodyType FromString(string v) {
            switch(v) {
                case "grp_amount": return GrpAmount;
                case "grp_extendInfo": return GrpExtendInfo;
                case "grp_Lvl3": return GrpLvl3;
                case "grp_trace": return GrpTrace;
                case "grp_cardInfo": return GrpCardInfo;
                case "grp_terminalInfo": return GrpTerminalInfo;
                case "grp_EMV": return GrpEMV;
                case "grp_cardDataEncryption": return GrpCardDataEncryption;
                case "grp_PIN": return GrpPIN;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for RestAPIRequestBodyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((RestAPIRequestBodyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    
/// <summary>
/// Generic Request body
/// </summary>
    [JsonConverter(typeof(RestAPIRequestBody.RestAPIRequestBodyConverter))]
    public class RestAPIRequestBody {
        public RestAPIRequestBody(RestAPIRequestBodyType type) {
            Type = type;
        }
        public GrpAmount? GrpAmount { get; set; } 
        public GrpExtendInfo? GrpExtendInfo { get; set; } 
        public GrpLvl3? GrpLvl3 { get; set; } 
        public GrpTrace? GrpTrace { get; set; } 
        public GrpCardInfo? GrpCardInfo { get; set; } 
        public GrpTerminalInfo? GrpTerminalInfo { get; set; } 
        public GrpEMV? GrpEMV { get; set; } 
        public GrpCardDataEncryption? GrpCardDataEncryption { get; set; } 
        public GrpPIN? GrpPIN { get; set; } 

        public RestAPIRequestBodyType Type {get; set; }


        public static RestAPIRequestBody CreateGrpAmount(GrpAmount grpAmount) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpAmount;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpAmount = grpAmount;
            return res;
        }

        public static RestAPIRequestBody CreateGrpExtendInfo(GrpExtendInfo grpExtendInfo) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpExtendInfo;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpExtendInfo = grpExtendInfo;
            return res;
        }

        public static RestAPIRequestBody CreateGrpLvl3(GrpLvl3 grpLvl3) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpLvl3;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpLvl3 = grpLvl3;
            return res;
        }

        public static RestAPIRequestBody CreateGrpTrace(GrpTrace grpTrace) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpTrace;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpTrace = grpTrace;
            return res;
        }

        public static RestAPIRequestBody CreateGrpCardInfo(GrpCardInfo grpCardInfo) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpCardInfo;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpCardInfo = grpCardInfo;
            return res;
        }

        public static RestAPIRequestBody CreateGrpTerminalInfo(GrpTerminalInfo grpTerminalInfo) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpTerminalInfo;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpTerminalInfo = grpTerminalInfo;
            return res;
        }

        public static RestAPIRequestBody CreateGrpEMV(GrpEMV grpEMV) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpEMV;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpEMV = grpEMV;
            return res;
        }

        public static RestAPIRequestBody CreateGrpCardDataEncryption(GrpCardDataEncryption grpCardDataEncryption) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpCardDataEncryption;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpCardDataEncryption = grpCardDataEncryption;
            return res;
        }

        public static RestAPIRequestBody CreateGrpPIN(GrpPIN grpPIN) {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.GrpPIN;

            RestAPIRequestBody res = new RestAPIRequestBody(typ);
            res.GrpPIN = grpPIN;
            return res;
        }

        public static RestAPIRequestBody CreateNull() {
            RestAPIRequestBodyType typ = RestAPIRequestBodyType.Null;
            return new RestAPIRequestBody(typ);
        }

        public class RestAPIRequestBodyConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(RestAPIRequestBody);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    GrpPIN? grpPIN = JsonConvert.DeserializeObject<GrpPIN>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpPIN), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpPIN) {
                        GrpPIN = grpPIN
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpTrace? grpTrace = JsonConvert.DeserializeObject<GrpTrace>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpTrace), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpTrace) {
                        GrpTrace = grpTrace
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpCardDataEncryption? grpCardDataEncryption = JsonConvert.DeserializeObject<GrpCardDataEncryption>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpCardDataEncryption), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpCardDataEncryption) {
                        GrpCardDataEncryption = grpCardDataEncryption
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpAmount? grpAmount = JsonConvert.DeserializeObject<GrpAmount>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpAmount), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpAmount) {
                        GrpAmount = grpAmount
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpExtendInfo? grpExtendInfo = JsonConvert.DeserializeObject<GrpExtendInfo>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpExtendInfo), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpExtendInfo) {
                        GrpExtendInfo = grpExtendInfo
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpTerminalInfo? grpTerminalInfo = JsonConvert.DeserializeObject<GrpTerminalInfo>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpTerminalInfo), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpTerminalInfo) {
                        GrpTerminalInfo = grpTerminalInfo
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpLvl3? grpLvl3 = JsonConvert.DeserializeObject<GrpLvl3>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpLvl3), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpLvl3) {
                        GrpLvl3 = grpLvl3
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpCardInfo? grpCardInfo = JsonConvert.DeserializeObject<GrpCardInfo>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpCardInfo), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpCardInfo) {
                        GrpCardInfo = grpCardInfo
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    GrpEMV? grpEMV = JsonConvert.DeserializeObject<GrpEMV>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(GrpEMV), "string")});
                    return new RestAPIRequestBody(RestAPIRequestBodyType.GrpEMV) {
                        GrpEMV = grpEMV
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                RestAPIRequestBody res = (RestAPIRequestBody)value;
                if (RestAPIRequestBodyType.FromString(res.Type).Equals(RestAPIRequestBodyType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.GrpAmount != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpAmount));
                    return;
                }
                if (res.GrpExtendInfo != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpExtendInfo));
                    return;
                }
                if (res.GrpLvl3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpLvl3));
                    return;
                }
                if (res.GrpTrace != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpTrace));
                    return;
                }
                if (res.GrpCardInfo != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpCardInfo));
                    return;
                }
                if (res.GrpTerminalInfo != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpTerminalInfo));
                    return;
                }
                if (res.GrpEMV != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpEMV));
                    return;
                }
                if (res.GrpCardDataEncryption != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpCardDataEncryption));
                    return;
                }
                if (res.GrpPIN != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.GrpPIN));
                    return;
                }

            }
        }

    }


}