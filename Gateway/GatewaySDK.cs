
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gateway
{
    using Gateway.Utils;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Netevia API: # Netevia Gateway API for Transaction Processing&lt;br&gt;<br/>
    /// 
    /// <remarks>
    /// Netevia Payment Gateway provides a simple method of processing payment transactions for merchants who want to integrate payment processing with their existing applications. The Netevia Payment Gateway processes credit card, debit card and Electronic Benefits Transfer (EBT) transactions. Transactions are accepted from various industries including: retail, restaurant, mail order/telephone order, lodging, and E-comm.&lt;br&gt;<br/>
    /// This document describes how to write your own application for processing payment transactions or integrate payment processing capabilities into an existing application.&lt;br&gt;&lt;br&gt;<br/>
    ///   Copyright 2023 by Netevia, INC DBA Netevia Payment Services. Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance with the License. You may obtain a copy of the License at <a href="http://www.apache.org/licenses/LICENSE-2.0.html">http://www.apache.org/licenses/LICENSE-2.0.html</a>. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;br&gt;&lt;br&gt;<br/>
    /// <a href="https://netevia.com/">Netevia Payment Gateway Web Site</a>.&lt;br&gt;<br/>
    /// 
    /// </remarks>
    /// </summary>
    public interface IGatewaySDK
    {
        public IACHCreditTransactionSDK ACHCreditTransaction { get; }
        public IACHCreditTransactionV2SDK ACHCreditTransactionV2 { get; }
        public IACHDebitTransactionSDK ACHDebitTransaction { get; }
        public IACHDebitTransactionV2SDK ACHDebitTransactionV2 { get; }
        public IAuthSDK Auth { get; }
        public IBatchQueryV2SDK BatchQueryV2 { get; }
        public IBatchTransactionSDK BatchTransaction { get; }
        public ICloudPDCIngenicoTransactionV2SDK CloudPDCIngenicoTransactionV2 { get; }
        public ICloudPDCRefundSDK CloudPDCRefund { get; }
        public ICloudPDCRefundv2SDK CloudPDCRefundv2 { get; }
        public ICloudPDCSaleTransactionSDK CloudPDCSaleTransaction { get; }
        public ICloudPDCSaleTransactionV2SDK CloudPDCSaleTransactionV2 { get; }
        public IDesktopPDCTransactionSDK DesktopPDCTransaction { get; }
        public IDesktopPDCTransactionV2SDK DesktopPDCTransactionV2 { get; }
        public IGPayTransactionSDK GPayTransaction { get; }
        public IGiftTransactionSDK GiftTransaction { get; }
        public IGiftTransactionV2SDK GiftTransactionV2 { get; }
        public IModifyTransactionV2SDK ModifyTransactionV2 { get; }
        public IPaymentDeviceControllerSDK PaymentDeviceController { get; }
        public IQRPayTransactionSDK QRPayTransaction { get; }
        public IRefundSDK Refund { get; }
        public IRefundTransctionV2SDK RefundTransctionV2 { get; }
        public ISaleTransactionSDK SaleTransaction { get; }
        public ISaleTransactionV2SDK SaleTransactionV2 { get; }
        public ITokenTransactionSDK TokenTransaction { get; }
        public ITokenTransactionV2SDK TokenTransactionV2 { get; }
        public ITransInfoSDK TransInfo { get; }
        public ITransactionSDK Transaction { get; }
        public ITransactionAuthV2SDK TransactionAuthV2 { get; }
        public ITransactionInfoV2SDK TransactionInfoV2 { get; }
        public ITransactionV2SDK TransactionV2 { get; }
        public IVerifySDK Verify { get; }
        public IVerifyTransactionV2SDK VerifyTransactionV2 { get; }
        public IVoidTransactionV2SDK VoidTransactionV2 { get; }
    }
    
    public class SDKConfig
    {
    }

    /// <summary>
    /// Netevia API: # Netevia Gateway API for Transaction Processing&lt;br&gt;<br/>
    /// 
    /// <remarks>
    /// Netevia Payment Gateway provides a simple method of processing payment transactions for merchants who want to integrate payment processing with their existing applications. The Netevia Payment Gateway processes credit card, debit card and Electronic Benefits Transfer (EBT) transactions. Transactions are accepted from various industries including: retail, restaurant, mail order/telephone order, lodging, and E-comm.&lt;br&gt;<br/>
    /// This document describes how to write your own application for processing payment transactions or integrate payment processing capabilities into an existing application.&lt;br&gt;&lt;br&gt;<br/>
    ///   Copyright 2023 by Netevia, INC DBA Netevia Payment Services. Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance with the License. You may obtain a copy of the License at <a href="http://www.apache.org/licenses/LICENSE-2.0.html">http://www.apache.org/licenses/LICENSE-2.0.html</a>. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;br&gt;&lt;br&gt;<br/>
    /// <a href="https://netevia.com/">Netevia Payment Gateway Web Site</a>.&lt;br&gt;<br/>
    /// 
    /// </remarks>
    /// </summary>
    public class GatewaySDK: IGatewaySDK
    {
        public SDKConfig Config { get; private set; }
        public static List<string> ServerList = new List<string>()
        {
            "https://{environment}.netevia.com:{port}",
            "https://{environment}.netevia.com:{port}",
            "https://virtserver.swaggerhub.com/Netevia_INC/Netevia/0.1.0",
        };

        private const string _language = "csharp";
        private const string _sdkVersion = "0.6.0";
        private const string _sdkGenVersion = "2.173.0";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.6.0 2.173.0 0.1.0 netevia";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;
        public IACHCreditTransactionSDK ACHCreditTransaction { get; private set; }
        public IACHCreditTransactionV2SDK ACHCreditTransactionV2 { get; private set; }
        public IACHDebitTransactionSDK ACHDebitTransaction { get; private set; }
        public IACHDebitTransactionV2SDK ACHDebitTransactionV2 { get; private set; }
        public IAuthSDK Auth { get; private set; }
        public IBatchQueryV2SDK BatchQueryV2 { get; private set; }
        public IBatchTransactionSDK BatchTransaction { get; private set; }
        public ICloudPDCIngenicoTransactionV2SDK CloudPDCIngenicoTransactionV2 { get; private set; }
        public ICloudPDCRefundSDK CloudPDCRefund { get; private set; }
        public ICloudPDCRefundv2SDK CloudPDCRefundv2 { get; private set; }
        public ICloudPDCSaleTransactionSDK CloudPDCSaleTransaction { get; private set; }
        public ICloudPDCSaleTransactionV2SDK CloudPDCSaleTransactionV2 { get; private set; }
        public IDesktopPDCTransactionSDK DesktopPDCTransaction { get; private set; }
        public IDesktopPDCTransactionV2SDK DesktopPDCTransactionV2 { get; private set; }
        public IGPayTransactionSDK GPayTransaction { get; private set; }
        public IGiftTransactionSDK GiftTransaction { get; private set; }
        public IGiftTransactionV2SDK GiftTransactionV2 { get; private set; }
        public IModifyTransactionV2SDK ModifyTransactionV2 { get; private set; }
        public IPaymentDeviceControllerSDK PaymentDeviceController { get; private set; }
        public IQRPayTransactionSDK QRPayTransaction { get; private set; }
        public IRefundSDK Refund { get; private set; }
        public IRefundTransctionV2SDK RefundTransctionV2 { get; private set; }
        public ISaleTransactionSDK SaleTransaction { get; private set; }
        public ISaleTransactionV2SDK SaleTransactionV2 { get; private set; }
        public ITokenTransactionSDK TokenTransaction { get; private set; }
        public ITokenTransactionV2SDK TokenTransactionV2 { get; private set; }
        public ITransInfoSDK TransInfo { get; private set; }
        public ITransactionSDK Transaction { get; private set; }
        public ITransactionAuthV2SDK TransactionAuthV2 { get; private set; }
        public ITransactionInfoV2SDK TransactionInfoV2 { get; private set; }
        public ITransactionV2SDK TransactionV2 { get; private set; }
        public IVerifySDK Verify { get; private set; }
        public IVerifyTransactionV2SDK VerifyTransactionV2 { get; private set; }
        public IVoidTransactionV2SDK VoidTransactionV2 { get; private set; }

        public GatewaySDK(string? serverUrl = null, ISpeakeasyHttpClient? client = null)
        {
            _serverUrl = serverUrl ?? GatewaySDK.ServerList[0];

            _defaultClient = new SpeakeasyHttpClient(client);
            _securityClient = _defaultClient;
            
            Config = new SDKConfig()
            {
            };

            ACHCreditTransaction = new ACHCreditTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            ACHCreditTransactionV2 = new ACHCreditTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            ACHDebitTransaction = new ACHDebitTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            ACHDebitTransactionV2 = new ACHDebitTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            Auth = new AuthSDK(_defaultClient, _securityClient, _serverUrl, Config);
            BatchQueryV2 = new BatchQueryV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            BatchTransaction = new BatchTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            CloudPDCIngenicoTransactionV2 = new CloudPDCIngenicoTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            CloudPDCRefund = new CloudPDCRefundSDK(_defaultClient, _securityClient, _serverUrl, Config);
            CloudPDCRefundv2 = new CloudPDCRefundv2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            CloudPDCSaleTransaction = new CloudPDCSaleTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            CloudPDCSaleTransactionV2 = new CloudPDCSaleTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            DesktopPDCTransaction = new DesktopPDCTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            DesktopPDCTransactionV2 = new DesktopPDCTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            GPayTransaction = new GPayTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            GiftTransaction = new GiftTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            GiftTransactionV2 = new GiftTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            ModifyTransactionV2 = new ModifyTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            PaymentDeviceController = new PaymentDeviceControllerSDK(_defaultClient, _securityClient, _serverUrl, Config);
            QRPayTransaction = new QRPayTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            Refund = new RefundSDK(_defaultClient, _securityClient, _serverUrl, Config);
            RefundTransctionV2 = new RefundTransctionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            SaleTransaction = new SaleTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            SaleTransactionV2 = new SaleTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            TokenTransaction = new TokenTransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            TokenTransactionV2 = new TokenTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            TransInfo = new TransInfoSDK(_defaultClient, _securityClient, _serverUrl, Config);
            Transaction = new TransactionSDK(_defaultClient, _securityClient, _serverUrl, Config);
            TransactionAuthV2 = new TransactionAuthV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            TransactionInfoV2 = new TransactionInfoV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            TransactionV2 = new TransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            Verify = new VerifySDK(_defaultClient, _securityClient, _serverUrl, Config);
            VerifyTransactionV2 = new VerifyTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
            VoidTransactionV2 = new VoidTransactionV2SDK(_defaultClient, _securityClient, _serverUrl, Config);
        }
    }
}